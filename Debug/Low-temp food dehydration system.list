
Low-temp food dehydration system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ecc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08007fe0  08007fe0  00017fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008360  08008360  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008360  08008360  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008360  08008360  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001e0  08008544  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08008544  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e229  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e11  00000000  00000000  0002e42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00030240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00031160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018231  00000000  00000000  00031fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5ed  00000000  00000000  0004a1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cf79  00000000  00000000  000557ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  000e27c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fc4 	.word	0x08007fc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007fc4 	.word	0x08007fc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <DWT_Delay_Init>:
uint32_t DHT_timeout = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <DWT_Delay_Init+0x58>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <DWT_Delay_Init+0x58>)
 8000d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d92:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <DWT_Delay_Init+0x58>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <DWT_Delay_Init+0x58>)
 8000d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <DWT_Delay_Init+0x5c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <DWT_Delay_Init+0x5c>)
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <DWT_Delay_Init+0x5c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <DWT_Delay_Init+0x5c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <DWT_Delay_Init+0x5c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000dbe:	bf00      	nop
     __ASM volatile ("NOP");
 8000dc0:	bf00      	nop
  __ASM volatile ("NOP");
 8000dc2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <DWT_Delay_Init+0x5c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e000      	b.n	8000dd2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000dd0:	2301      	movs	r3, #1
  }
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000edf0 	.word	0xe000edf0
 8000de0:	e0001000 	.word	0xe0001000

08000de4 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <delay+0x3c>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000df2:	f002 fd81 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8000df6:	4602      	mov	r2, r0
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <delay+0x40>)
 8000dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8000dfe:	0c9b      	lsrs	r3, r3, #18
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e08:	bf00      	nop
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <delay+0x3c>)
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad2      	subs	r2, r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3f8      	bcc.n	8000e0a <delay+0x26>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e0001000 	.word	0xe0001000
 8000e24:	431bde83 	.word	0x431bde83

08000e28 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f001 fb81 	bl	800255c <HAL_GPIO_Init>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f001 fb64 	bl	800255c <HAL_GPIO_Init>
}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <DHT_Start>:


void DHT_Start (void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000ea0:	f7ff ff70 	bl	8000d84 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <DHT_Start+0x40>)
 8000ea8:	f7ff ffbe 	bl	8000e28 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000eac:	2200      	movs	r2, #0
 8000eae:	2102      	movs	r1, #2
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <DHT_Start+0x40>)
 8000eb2:	f001 fcc4 	bl	800283e <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000eb6:	f244 6050 	movw	r0, #18000	; 0x4650
 8000eba:	f7ff ff93 	bl	8000de4 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <DHT_Start+0x40>)
 8000ec4:	f001 fcbb 	bl	800283e <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ec8:	2014      	movs	r0, #20
 8000eca:	f7ff ff8b 	bl	8000de4 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <DHT_Start+0x40>)
 8000ed2:	f7ff ffc6 	bl	8000e62 <Set_Pin_Input>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010800 	.word	0x40010800

08000ee0 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000eea:	2028      	movs	r0, #40	; 0x28
 8000eec:	f7ff ff7a 	bl	8000de4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <DHT_Check_Response+0x74>)
 8000ef4:	f001 fc8c 	bl	8002810 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10e      	bne.n	8000f1c <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000efe:	2050      	movs	r0, #80	; 0x50
 8000f00:	f7ff ff70 	bl	8000de4 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f04:	2102      	movs	r1, #2
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <DHT_Check_Response+0x74>)
 8000f08:	f001 fc82 	bl	8002810 <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <DHT_Check_Response+0x38>
 8000f12:	2301      	movs	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	e001      	b.n	8000f1c <DHT_Check_Response+0x3c>
		else Response = -1;
 8000f18:	23ff      	movs	r3, #255	; 0xff
 8000f1a:	71fb      	strb	r3, [r7, #7]
	}
	DHT_timeout = 0;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <DHT_Check_Response+0x78>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) { // wait for the pin to go low
 8000f22:	e009      	b.n	8000f38 <DHT_Check_Response+0x58>
		DHT_timeout++;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <DHT_Check_Response+0x78>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <DHT_Check_Response+0x78>)
 8000f2c:	6013      	str	r3, [r2, #0]
		if (DHT_timeout >= ERROR) {
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <DHT_Check_Response+0x78>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f36:	d207      	bcs.n	8000f48 <DHT_Check_Response+0x68>
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) { // wait for the pin to go low
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <DHT_Check_Response+0x74>)
 8000f3c:	f001 fc68 	bl	8002810 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1ee      	bne.n	8000f24 <DHT_Check_Response+0x44>
 8000f46:	e000      	b.n	8000f4a <DHT_Check_Response+0x6a>
			break;
 8000f48:	bf00      	nop
		}
	}

	return Response;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010800 	.word	0x40010800
 8000f58:	20000200 	.word	0x20000200

08000f5c <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	e055      	b.n	8001014 <DHT_Read+0xb8>
	{
		DHT_timeout = 0;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <DHT_Read+0xc8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) { // wait for the pin to go high
 8000f6e:	e009      	b.n	8000f84 <DHT_Read+0x28>
			DHT_timeout++;
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <DHT_Read+0xc8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <DHT_Read+0xc8>)
 8000f78:	6013      	str	r3, [r2, #0]
			if (DHT_timeout >= ERROR) {
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <DHT_Read+0xc8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f82:	d207      	bcs.n	8000f94 <DHT_Read+0x38>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) { // wait for the pin to go high
 8000f84:	2102      	movs	r1, #2
 8000f86:	4828      	ldr	r0, [pc, #160]	; (8001028 <DHT_Read+0xcc>)
 8000f88:	f001 fc42 	bl	8002810 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0ee      	beq.n	8000f70 <DHT_Read+0x14>
 8000f92:	e000      	b.n	8000f96 <DHT_Read+0x3a>
				break;
 8000f94:	bf00      	nop
			}
		}
		delay (40);   // wait for 40 us
 8000f96:	2028      	movs	r0, #40	; 0x28
 8000f98:	f7ff ff24 	bl	8000de4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <DHT_Read+0xcc>)
 8000fa0:	f001 fc36 	bl	8002810 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10e      	bne.n	8000fc8 <DHT_Read+0x6c>
		{
			i&= ~(1<<(7-j));   // write 0
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	f1c3 0307 	rsb	r3, r3, #7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	e00b      	b.n	8000fe0 <DHT_Read+0x84>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	71fb      	strb	r3, [r7, #7]
		DHT_timeout = 0;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <DHT_Read+0xc8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) { // wait for the pin to go low
 8000fe6:	e009      	b.n	8000ffc <DHT_Read+0xa0>
			DHT_timeout++;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <DHT_Read+0xc8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <DHT_Read+0xc8>)
 8000ff0:	6013      	str	r3, [r2, #0]
			if (DHT_timeout >= ERROR) {
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <DHT_Read+0xc8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffa:	d207      	bcs.n	800100c <DHT_Read+0xb0>
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) { // wait for the pin to go low
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <DHT_Read+0xcc>)
 8001000:	f001 fc06 	bl	8002810 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ee      	bne.n	8000fe8 <DHT_Read+0x8c>
 800100a:	e000      	b.n	800100e <DHT_Read+0xb2>
				break;
 800100c:	bf00      	nop
	for (j=0;j<8;j++)
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	3301      	adds	r3, #1
 8001012:	71bb      	strb	r3, [r7, #6]
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d9a6      	bls.n	8000f68 <DHT_Read+0xc>
			}
		}
	}
	return i;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000200 	.word	0x20000200
 8001028:	40010800 	.word	0x40010800

0800102c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001034:	f7ff ff32 	bl	8000e9c <DHT_Start>
    DHT_timeout = 0;
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <DHT_GetData+0xbc>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
	Presence = DHT_Check_Response ();
 800103e:	f7ff ff4f 	bl	8000ee0 <DHT_Check_Response>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <DHT_GetData+0xc0>)
 8001048:	701a      	strb	r2, [r3, #0]
	if (DHT_timeout >= ERROR) {
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <DHT_GetData+0xbc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001052:	d303      	bcc.n	800105c <DHT_GetData+0x30>
		DHT_Data->Error = 1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e002      	b.n	8001062 <DHT_GetData+0x36>
	} else {
		DHT_Data->Error = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	}
	Rh_byte1 = DHT_Read ();
 8001062:	f7ff ff7b 	bl	8000f5c <DHT_Read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <DHT_GetData+0xc4>)
 800106c:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800106e:	f7ff ff75 	bl	8000f5c <DHT_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <DHT_GetData+0xc8>)
 8001078:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800107a:	f7ff ff6f 	bl	8000f5c <DHT_Read>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <DHT_GetData+0xcc>)
 8001084:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001086:	f7ff ff69 	bl	8000f5c <DHT_Read>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <DHT_GetData+0xd0>)
 8001090:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001092:	f7ff ff63 	bl	8000f5c <DHT_Read>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <DHT_GetData+0xd4>)
 800109c:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <DHT_GetData+0xd4>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <DHT_GetData+0xc4>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <DHT_GetData+0xc8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <DHT_GetData+0xcc>)
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <DHT_GetData+0xd0>)
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4299      	cmp	r1, r3
 80010be:	d10f      	bne.n	80010e0 <DHT_GetData+0xb4>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <DHT_GetData+0xcc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe05 	bl	8000cd4 <__aeabi_ui2f>
 80010ca:	4602      	mov	r2, r0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	605a      	str	r2, [r3, #4]
			DHT_Data->Humidity = Rh_byte1;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <DHT_GetData+0xc4>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fdfd 	bl	8000cd4 <__aeabi_ui2f>
 80010da:	4602      	mov	r2, r0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	609a      	str	r2, [r3, #8]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000200 	.word	0x20000200
 80010ec:	200001fc 	.word	0x200001fc
 80010f0:	20000218 	.word	0x20000218
 80010f4:	2000021a 	.word	0x2000021a
 80010f8:	20000219 	.word	0x20000219
 80010fc:	2000021e 	.word	0x2000021e
 8001100:	2000021c 	.word	0x2000021c

08001104 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f023 030f 	bic.w	r3, r3, #15
 8001114:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f043 030c 	orr.w	r3, r3, #12
 8001122:	b2db      	uxtb	r3, r3
 8001124:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	b2db      	uxtb	r3, r3
 800112e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	f043 030c 	orr.w	r3, r3, #12
 8001136:	b2db      	uxtb	r3, r3
 8001138:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	b2db      	uxtb	r3, r3
 8001142:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2304      	movs	r3, #4
 800114e:	214e      	movs	r1, #78	; 0x4e
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <lcd_send_cmd+0x5c>)
 8001152:	f001 fcff 	bl	8002b54 <HAL_I2C_Master_Transmit>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000026c 	.word	0x2000026c

08001164 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f023 030f 	bic.w	r3, r3, #15
 8001174:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 030d 	orr.w	r3, r3, #13
 8001182:	b2db      	uxtb	r3, r3
 8001184:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f043 0309 	orr.w	r3, r3, #9
 800118c:	b2db      	uxtb	r3, r3
 800118e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	f043 030d 	orr.w	r3, r3, #13
 8001196:	b2db      	uxtb	r3, r3
 8001198:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	f043 0309 	orr.w	r3, r3, #9
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011a4:	f107 0208 	add.w	r2, r7, #8
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2304      	movs	r3, #4
 80011ae:	214e      	movs	r1, #78	; 0x4e
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <lcd_send_data+0x5c>)
 80011b2:	f001 fccf 	bl	8002b54 <HAL_I2C_Master_Transmit>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000026c 	.word	0x2000026c

080011c4 <lcd_init>:

void lcd_init (void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80011c8:	2033      	movs	r0, #51	; 0x33
 80011ca:	f7ff ff9b 	bl	8001104 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f7ff ff98 	bl	8001104 <lcd_send_cmd>
	HAL_Delay(50);
 80011d4:	2032      	movs	r0, #50	; 0x32
 80011d6:	f001 f891 	bl	80022fc <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80011da:	2028      	movs	r0, #40	; 0x28
 80011dc:	f7ff ff92 	bl	8001104 <lcd_send_cmd>
	HAL_Delay(50);
 80011e0:	2032      	movs	r0, #50	; 0x32
 80011e2:	f001 f88b 	bl	80022fc <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff ff8c 	bl	8001104 <lcd_send_cmd>
	HAL_Delay(50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f001 f885 	bl	80022fc <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80011f2:	2006      	movs	r0, #6
 80011f4:	f7ff ff86 	bl	8001104 <lcd_send_cmd>
	HAL_Delay(50);
 80011f8:	2032      	movs	r0, #50	; 0x32
 80011fa:	f001 f87f 	bl	80022fc <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80011fe:	200c      	movs	r0, #12
 8001200:	f7ff ff80 	bl	8001104 <lcd_send_cmd>
	HAL_Delay(50);
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f001 f879 	bl	80022fc <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800120a:	2002      	movs	r0, #2
 800120c:	f7ff ff7a 	bl	8001104 <lcd_send_cmd>
	HAL_Delay(50);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f001 f873 	bl	80022fc <HAL_Delay>
	lcd_send_cmd (0x80);
 8001216:	2080      	movs	r0, #128	; 0x80
 8001218:	f7ff ff74 	bl	8001104 <lcd_send_cmd>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001228:	e006      	b.n	8001238 <lcd_send_string+0x18>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff96 	bl	8001164 <lcd_send_data>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f4      	bne.n	800122a <lcd_send_string+0xa>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ff59 	bl	8001104 <lcd_send_cmd>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	337f      	adds	r3, #127	; 0x7f
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e008      	b.n	800128a <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3340      	adds	r3, #64	; 0x40
 800127e:	b2db      	uxtb	r3, r3
 8001280:	b25b      	sxtb	r3, r3
 8001282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001286:	b25b      	sxtb	r3, r3
 8001288:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff39 	bl	8001104 <lcd_send_cmd>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <initialize>:
void Fan1(void); // Runs fan 1
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void initialize(void) {
 800129c:	b598      	push	{r3, r4, r7, lr}
 800129e:	af00      	add	r7, sp, #0
	buttonPeriod = notPressed;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <initialize+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	buttonIncrease = notPressed;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <initialize+0x78>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	buttonDecrease = notPressed;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <initialize+0x7c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	TempFSMState = initTemp;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <initialize+0x80>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	periodInput = TRUE;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <initialize+0x84>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
	humidityCounter = 0;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <initialize+0x88>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
	period = 0;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <initialize+0x8c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	frequency = 100;
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <initialize+0x90>)
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	4c17      	ldr	r4, [pc, #92]	; (8001330 <initialize+0x94>)
 80012d2:	e9c2 3400 	strd	r3, r4, [r2]
	heatEffect = 0;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <initialize+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
	timeoutFlag = FALSE;
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <initialize+0x9c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	turnOffLED(Heater_GPIO_Port, Heater_Pin);
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <initialize+0xa0>)
 80012e6:	f000 f83f 	bl	8001368 <turnOffLED>
	turnOffLED(Heat_pump_GPIO_Port, Heat_pump_Pin);
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <initialize+0xa4>)
 80012f0:	f000 f83a 	bl	8001368 <turnOffLED>
	turnOffLED(Fan_1_GPIO_Port, Fan_1_Pin);
 80012f4:	2101      	movs	r1, #1
 80012f6:	4813      	ldr	r0, [pc, #76]	; (8001344 <initialize+0xa8>)
 80012f8:	f000 f836 	bl	8001368 <turnOffLED>
	turnOffLED(Fan_2_GPIO_Port, Fan_2_Pin);
 80012fc:	2102      	movs	r1, #2
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <initialize+0xa0>)
 8001300:	f000 f832 	bl	8001368 <turnOffLED>
	turnOffLED(Fan_3_GPIO_Port, Fan_3_Pin);
 8001304:	2101      	movs	r1, #1
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <initialize+0xa0>)
 8001308:	f000 f82e 	bl	8001368 <turnOffLED>
}
 800130c:	bf00      	nop
 800130e:	bd98      	pop	{r3, r4, r7, pc}
 8001310:	20000451 	.word	0x20000451
 8001314:	20000450 	.word	0x20000450
 8001318:	20000384 	.word	0x20000384
 800131c:	20000374 	.word	0x20000374
 8001320:	20000253 	.word	0x20000253
 8001324:	200002c4 	.word	0x200002c4
 8001328:	200003ba 	.word	0x200003ba
 800132c:	20000258 	.word	0x20000258
 8001330:	40590000 	.word	0x40590000
 8001334:	200002c0 	.word	0x200002c0
 8001338:	20000252 	.word	0x20000252
 800133c:	40011000 	.word	0x40011000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00

08001348 <turnOnLED>:

void turnOnLED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f001 fa6f 	bl	800283e <HAL_GPIO_WritePin>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <turnOffLED>:

void turnOffLED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f001 fa5f 	bl	800283e <HAL_GPIO_WritePin>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <toggleLED>:

void toggleLED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f001 fa68 	bl	800286e <HAL_GPIO_TogglePin>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <readButtonPeriod>:

void readButtonPeriod(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	firstRead[0] = secondRead[0];
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <readButtonPeriod+0x50>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <readButtonPeriod+0x54>)
 80013b4:	701a      	strb	r2, [r3, #0]
	secondRead[0] = !(HAL_GPIO_ReadPin(Button_Period_GPIO_Port, Button_Period_Pin));
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <readButtonPeriod+0x58>)
 80013ba:	f001 fa29 	bl	8002810 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <readButtonPeriod+0x50>)
 80013ce:	701a      	strb	r2, [r3, #0]
	if (!firstRead[0] && secondRead[0]) {
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <readButtonPeriod+0x54>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d108      	bne.n	80013ec <readButtonPeriod+0x44>
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <readButtonPeriod+0x50>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <readButtonPeriod+0x44>
		buttonPeriod = pressed;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <readButtonPeriod+0x5c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e002      	b.n	80013f2 <readButtonPeriod+0x4a>
	} else {
		buttonPeriod = notPressed;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <readButtonPeriod+0x5c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
	}
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000208 	.word	0x20000208
 80013fc:	20000204 	.word	0x20000204
 8001400:	40010800 	.word	0x40010800
 8001404:	20000451 	.word	0x20000451

08001408 <readButtonIncrease>:

void readButtonIncrease(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	firstRead[1] = secondRead[1];
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <readButtonIncrease+0x50>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <readButtonIncrease+0x54>)
 8001414:	705a      	strb	r2, [r3, #1]
	secondRead[1] = !(HAL_GPIO_ReadPin(Button_Increase_GPIO_Port, Button_Increase_Pin));
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4811      	ldr	r0, [pc, #68]	; (8001460 <readButtonIncrease+0x58>)
 800141a:	f001 f9f9 	bl	8002810 <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <readButtonIncrease+0x50>)
 800142e:	705a      	strb	r2, [r3, #1]
	if (!firstRead[1] && secondRead[1]) {
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <readButtonIncrease+0x54>)
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d108      	bne.n	800144c <readButtonIncrease+0x44>
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <readButtonIncrease+0x50>)
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <readButtonIncrease+0x44>
		buttonIncrease = pressed;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <readButtonIncrease+0x5c>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e002      	b.n	8001452 <readButtonIncrease+0x4a>
	} else {
		buttonIncrease = notPressed;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <readButtonIncrease+0x5c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000208 	.word	0x20000208
 800145c:	20000204 	.word	0x20000204
 8001460:	40010800 	.word	0x40010800
 8001464:	20000450 	.word	0x20000450

08001468 <readButtonDecrease>:

void readButtonDecrease(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	firstRead[2] = secondRead[2];
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <readButtonDecrease+0x50>)
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <readButtonDecrease+0x54>)
 8001474:	709a      	strb	r2, [r3, #2]
	secondRead[2] = !(HAL_GPIO_ReadPin(Button_Decrease_GPIO_Port, Button_Decrease_Pin));
 8001476:	2110      	movs	r1, #16
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <readButtonDecrease+0x58>)
 800147a:	f001 f9c9 	bl	8002810 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <readButtonDecrease+0x50>)
 800148e:	709a      	strb	r2, [r3, #2]
	if (!firstRead[2] && secondRead[2]) {
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <readButtonDecrease+0x54>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <readButtonDecrease+0x44>
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <readButtonDecrease+0x50>)
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <readButtonDecrease+0x44>
		buttonDecrease = pressed;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <readButtonDecrease+0x5c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e002      	b.n	80014b2 <readButtonDecrease+0x4a>
	} else {
		buttonDecrease = notPressed;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <readButtonDecrease+0x5c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	}
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000208 	.word	0x20000208
 80014bc:	20000204 	.word	0x20000204
 80014c0:	40010800 	.word	0x40010800
 80014c4:	20000384 	.word	0x20000384

080014c8 <adjustPeriod>:

void adjustPeriod(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	TempFSMState = initTemp;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <adjustPeriod+0x60>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	readButtonIncrease();
 80014d2:	f7ff ff99 	bl	8001408 <readButtonIncrease>
	readButtonDecrease();
 80014d6:	f7ff ffc7 	bl	8001468 <readButtonDecrease>
	if (buttonIncrease == pressed) {
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <adjustPeriod+0x64>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <adjustPeriod+0x28>
		period++;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <adjustPeriod+0x68>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <adjustPeriod+0x68>)
 80014ec:	701a      	strb	r2, [r3, #0]
	} else if (buttonPeriod == pressed) {
		if (period > 0) {
			periodInput = FALSE;
		}
	}
}
 80014ee:	e019      	b.n	8001524 <adjustPeriod+0x5c>
	} else if (buttonDecrease == pressed) {
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <adjustPeriod+0x6c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10a      	bne.n	800150e <adjustPeriod+0x46>
		if (period > 0) {
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <adjustPeriod+0x68>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d011      	beq.n	8001524 <adjustPeriod+0x5c>
			period--;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <adjustPeriod+0x68>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <adjustPeriod+0x68>)
 800150a:	701a      	strb	r2, [r3, #0]
}
 800150c:	e00a      	b.n	8001524 <adjustPeriod+0x5c>
	} else if (buttonPeriod == pressed) {
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <adjustPeriod+0x70>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d106      	bne.n	8001524 <adjustPeriod+0x5c>
		if (period > 0) {
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <adjustPeriod+0x68>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <adjustPeriod+0x5c>
			periodInput = FALSE;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <adjustPeriod+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000374 	.word	0x20000374
 800152c:	20000450 	.word	0x20000450
 8001530:	200003ba 	.word	0x200003ba
 8001534:	20000384 	.word	0x20000384
 8001538:	20000451 	.word	0x20000451
 800153c:	20000253 	.word	0x20000253

08001540 <readData>:

void readData(void) {
 8001540:	b598      	push	{r3, r4, r7, lr}
 8001542:	af00      	add	r7, sp, #0
	DHT_GetData(&DHT11_Data);
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <readData+0x78>)
 8001546:	f7ff fd71 	bl	800102c <DHT_GetData>
	Temperature = DHT11_Data.Temperature;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <readData+0x78>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff6a 	bl	8000428 <__aeabi_f2d>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <readData+0x7c>)
 800155a:	e9c2 3400 	strd	r3, r4, [r2]
	Humidity = DHT11_Data.Humidity;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <readData+0x78>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <readData+0x80>)
 800156e:	e9c2 3400 	strd	r3, r4, [r2]
	humidityCounter = 0;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <readData+0x84>)
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
	Temperature += heatEffect * 0.0001; // Final result would be +0.4/2s for heater and -0.2/2s for heat pump
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <readData+0x88>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff41 	bl	8000404 <__aeabi_i2d>
 8001582:	a30b      	add	r3, pc, #44	; (adr r3, 80015b0 <readData+0x70>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7fe ffa6 	bl	80004d8 <__aeabi_dmul>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	4618      	mov	r0, r3
 8001592:	4621      	mov	r1, r4
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <readData+0x7c>)
 8001596:	cb18      	ldmia	r3, {r3, r4}
 8001598:	461a      	mov	r2, r3
 800159a:	4623      	mov	r3, r4
 800159c:	f7fe fde6 	bl	800016c <__adddf3>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <readData+0x7c>)
 80015a6:	e9c2 3400 	strd	r3, r4, [r2]
}
 80015aa:	bf00      	nop
 80015ac:	bd98      	pop	{r3, r4, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	eb1c432d 	.word	0xeb1c432d
 80015b4:	3f1a36e2 	.word	0x3f1a36e2
 80015b8:	20000378 	.word	0x20000378
 80015bc:	20000260 	.word	0x20000260
 80015c0:	20000448 	.word	0x20000448
 80015c4:	200002c4 	.word	0x200002c4
 80015c8:	200002c0 	.word	0x200002c0

080015cc <printDataTerminal>:

void printDataTerminal(void) {
 80015cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af06      	add	r7, sp, #24
	if (DHT11_Data.Error != TIMEOUT) {
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <printDataTerminal+0x68>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d026      	beq.n	800162a <printDataTerminal+0x5e>
		uart_buf_len = sprintf(uart_buf, "Temp: %.2f%cC\033[0K\r\nHumidity: %.2f%%\033[0K\r\nFan 1 speed: %.2f%%\033[J\033[H", Temperature , 186, Humidity, 100 - frequency);
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <printDataTerminal+0x6c>)
 80015de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <printDataTerminal+0x70>)
 80015e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <printDataTerminal+0x74>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	4914      	ldr	r1, [pc, #80]	; (8001644 <printDataTerminal+0x78>)
 80015f4:	f7fe fdb8 	bl	8000168 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001600:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001604:	23ba      	movs	r3, #186	; 0xba
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	4642      	mov	r2, r8
 800160a:	464b      	mov	r3, r9
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <printDataTerminal+0x7c>)
 800160e:	480f      	ldr	r0, [pc, #60]	; (800164c <printDataTerminal+0x80>)
 8001610:	f003 fdce 	bl	80051b0 <siprintf>
 8001614:	4602      	mov	r2, r0
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <printDataTerminal+0x84>)
 8001618:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <printDataTerminal+0x84>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29a      	uxth	r2, r3
 8001620:	2364      	movs	r3, #100	; 0x64
 8001622:	490a      	ldr	r1, [pc, #40]	; (800164c <printDataTerminal+0x80>)
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <printDataTerminal+0x88>)
 8001626:	f002 fdf2 	bl	800420e <HAL_UART_Transmit>
	}
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001632:	bf00      	nop
 8001634:	20000378 	.word	0x20000378
 8001638:	20000260 	.word	0x20000260
 800163c:	20000448 	.word	0x20000448
 8001640:	20000258 	.word	0x20000258
 8001644:	40590000 	.word	0x40590000
 8001648:	08007fe0 	.word	0x08007fe0
 800164c:	20000310 	.word	0x20000310
 8001650:	20000268 	.word	0x20000268
 8001654:	20000404 	.word	0x20000404

08001658 <printDataLCD>:

void printDataLCD(void) {
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af02      	add	r7, sp, #8
	if (DHT11_Data.Error != TIMEOUT) {
 800165e:	4b35      	ldr	r3, [pc, #212]	; (8001734 <printDataLCD+0xdc>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d03f      	beq.n	80016e6 <printDataLCD+0x8e>
		if (periodInput == FALSE) {
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <printDataLCD+0xe0>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d123      	bne.n	80016b6 <printDataLCD+0x5e>
			changeLCDMode = FALSE;
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <printDataLCD+0xe4>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
			sprintf(lcd_buf, "Temp: %.2f%cC", Temperature, 223);
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <printDataLCD+0xe8>)
 8001676:	cb18      	ldmia	r3, {r3, r4}
 8001678:	22df      	movs	r2, #223	; 0xdf
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	4930      	ldr	r1, [pc, #192]	; (8001744 <printDataLCD+0xec>)
 8001682:	4831      	ldr	r0, [pc, #196]	; (8001748 <printDataLCD+0xf0>)
 8001684:	f003 fd94 	bl	80051b0 <siprintf>
			lcd_goto_XY(1, 0);
 8001688:	2100      	movs	r1, #0
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fde3 	bl	8001256 <lcd_goto_XY>
			lcd_send_string(lcd_buf);
 8001690:	482d      	ldr	r0, [pc, #180]	; (8001748 <printDataLCD+0xf0>)
 8001692:	f7ff fdc5 	bl	8001220 <lcd_send_string>
			sprintf(lcd_buf, "Humidity: %.2f%%", Humidity);
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <printDataLCD+0xf4>)
 8001698:	cb18      	ldmia	r3, {r3, r4}
 800169a:	461a      	mov	r2, r3
 800169c:	4623      	mov	r3, r4
 800169e:	492c      	ldr	r1, [pc, #176]	; (8001750 <printDataLCD+0xf8>)
 80016a0:	4829      	ldr	r0, [pc, #164]	; (8001748 <printDataLCD+0xf0>)
 80016a2:	f003 fd85 	bl	80051b0 <siprintf>
			lcd_goto_XY(2, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	2002      	movs	r0, #2
 80016aa:	f7ff fdd4 	bl	8001256 <lcd_goto_XY>
			lcd_send_string(lcd_buf);
 80016ae:	4826      	ldr	r0, [pc, #152]	; (8001748 <printDataLCD+0xf0>)
 80016b0:	f7ff fdb6 	bl	8001220 <lcd_send_string>
		sprintf(lcd_buf, "                ");
		lcd_goto_XY(2, 0);
		lcd_send_string(lcd_buf);
	}

}
 80016b4:	e03b      	b.n	800172e <printDataLCD+0xd6>
			if (changeLCDMode == FALSE) {
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <printDataLCD+0xe4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d104      	bne.n	80016c8 <printDataLCD+0x70>
				lcd_clear_display();
 80016be:	f7ff fdc3 	bl	8001248 <lcd_clear_display>
				changeLCDMode = TRUE;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <printDataLCD+0xe4>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
			sprintf(lcd_buf, "Period: %u", period);
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <printDataLCD+0xfc>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4922      	ldr	r1, [pc, #136]	; (8001758 <printDataLCD+0x100>)
 80016d0:	481d      	ldr	r0, [pc, #116]	; (8001748 <printDataLCD+0xf0>)
 80016d2:	f003 fd6d 	bl	80051b0 <siprintf>
			lcd_goto_XY(1, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff fdbc 	bl	8001256 <lcd_goto_XY>
			lcd_send_string(lcd_buf);
 80016de:	481a      	ldr	r0, [pc, #104]	; (8001748 <printDataLCD+0xf0>)
 80016e0:	f7ff fd9e 	bl	8001220 <lcd_send_string>
}
 80016e4:	e023      	b.n	800172e <printDataLCD+0xd6>
		sprintf(lcd_buf, "TIME OUT        ");
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <printDataLCD+0xf0>)
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <printDataLCD+0x104>)
 80016ea:	4615      	mov	r5, r2
 80016ec:	461c      	mov	r4, r3
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	6028      	str	r0, [r5, #0]
 80016f2:	6069      	str	r1, [r5, #4]
 80016f4:	60aa      	str	r2, [r5, #8]
 80016f6:	60eb      	str	r3, [r5, #12]
 80016f8:	7823      	ldrb	r3, [r4, #0]
 80016fa:	742b      	strb	r3, [r5, #16]
		lcd_goto_XY(1, 0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fda9 	bl	8001256 <lcd_goto_XY>
		lcd_send_string(lcd_buf);
 8001704:	4810      	ldr	r0, [pc, #64]	; (8001748 <printDataLCD+0xf0>)
 8001706:	f7ff fd8b 	bl	8001220 <lcd_send_string>
		sprintf(lcd_buf, "                ");
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <printDataLCD+0xf0>)
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <printDataLCD+0x108>)
 800170e:	4615      	mov	r5, r2
 8001710:	461c      	mov	r4, r3
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	6028      	str	r0, [r5, #0]
 8001716:	6069      	str	r1, [r5, #4]
 8001718:	60aa      	str	r2, [r5, #8]
 800171a:	60eb      	str	r3, [r5, #12]
 800171c:	7823      	ldrb	r3, [r4, #0]
 800171e:	742b      	strb	r3, [r5, #16]
		lcd_goto_XY(2, 0);
 8001720:	2100      	movs	r1, #0
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff fd97 	bl	8001256 <lcd_goto_XY>
		lcd_send_string(lcd_buf);
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <printDataLCD+0xf0>)
 800172a:	f7ff fd79 	bl	8001220 <lcd_send_string>
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	20000378 	.word	0x20000378
 8001738:	20000253 	.word	0x20000253
 800173c:	200002c6 	.word	0x200002c6
 8001740:	20000260 	.word	0x20000260
 8001744:	08008024 	.word	0x08008024
 8001748:	20000220 	.word	0x20000220
 800174c:	20000448 	.word	0x20000448
 8001750:	08008034 	.word	0x08008034
 8001754:	200003ba 	.word	0x200003ba
 8001758:	08008048 	.word	0x08008048
 800175c:	08008054 	.word	0x08008054
 8001760:	08008068 	.word	0x08008068

08001764 <FSM_Temperature>:

void FSM_Temperature(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	switch (TempFSMState) {
 8001768:	4b48      	ldr	r3, [pc, #288]	; (800188c <FSM_Temperature+0x128>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d83b      	bhi.n	80017e8 <FSM_Temperature+0x84>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <FSM_Temperature+0x14>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	080017b9 	.word	0x080017b9
 8001780:	080017bf 	.word	0x080017bf
 8001784:	080017c5 	.word	0x080017c5
	case initTemp:
		heatCounter = 0;
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <FSM_Temperature+0x12c>)
 800178a:	2200      	movs	r2, #0
 800178c:	801a      	strh	r2, [r3, #0]
		turnOffLED(Heater_GPIO_Port, Heater_Pin);
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4840      	ldr	r0, [pc, #256]	; (8001894 <FSM_Temperature+0x130>)
 8001792:	f7ff fde9 	bl	8001368 <turnOffLED>
		turnOffLED(Heat_pump_GPIO_Port, Heat_pump_Pin);
 8001796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179a:	483f      	ldr	r0, [pc, #252]	; (8001898 <FSM_Temperature+0x134>)
 800179c:	f7ff fde4 	bl	8001368 <turnOffLED>
		turnOffLED(Fan_2_GPIO_Port, Fan_2_Pin);
 80017a0:	2102      	movs	r1, #2
 80017a2:	483c      	ldr	r0, [pc, #240]	; (8001894 <FSM_Temperature+0x130>)
 80017a4:	f7ff fde0 	bl	8001368 <turnOffLED>
		turnOffLED(Fan_3_GPIO_Port, Fan_3_Pin);
 80017a8:	2101      	movs	r1, #1
 80017aa:	483a      	ldr	r0, [pc, #232]	; (8001894 <FSM_Temperature+0x130>)
 80017ac:	f7ff fddc 	bl	8001368 <turnOffLED>
		TempFSMState = heater;
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <FSM_Temperature+0x128>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		break;
 80017b6:	e017      	b.n	80017e8 <FSM_Temperature+0x84>
	case heater:
		runHeater();
 80017b8:	f000 f876 	bl	80018a8 <runHeater>
		break;
 80017bc:	e014      	b.n	80017e8 <FSM_Temperature+0x84>
	case heatPump:
		runHeatPump();
 80017be:	f000 f893 	bl	80018e8 <runHeatPump>
		break;
 80017c2:	e011      	b.n	80017e8 <FSM_Temperature+0x84>
	case non:
		turnOffLED(Heater_GPIO_Port, Heater_Pin);
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	4833      	ldr	r0, [pc, #204]	; (8001894 <FSM_Temperature+0x130>)
 80017c8:	f7ff fdce 	bl	8001368 <turnOffLED>
		turnOffLED(Heat_pump_GPIO_Port, Heat_pump_Pin);
 80017cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d0:	4831      	ldr	r0, [pc, #196]	; (8001898 <FSM_Temperature+0x134>)
 80017d2:	f7ff fdc9 	bl	8001368 <turnOffLED>
		turnOffLED(Fan_2_GPIO_Port, Fan_2_Pin);
 80017d6:	2102      	movs	r1, #2
 80017d8:	482e      	ldr	r0, [pc, #184]	; (8001894 <FSM_Temperature+0x130>)
 80017da:	f7ff fdc5 	bl	8001368 <turnOffLED>
		turnOffLED(Fan_3_GPIO_Port, Fan_3_Pin);
 80017de:	2101      	movs	r1, #1
 80017e0:	482c      	ldr	r0, [pc, #176]	; (8001894 <FSM_Temperature+0x130>)
 80017e2:	f7ff fdc1 	bl	8001368 <turnOffLED>
		break;
 80017e6:	bf00      	nop
	}
	heatCounter++;
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <FSM_Temperature+0x12c>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <FSM_Temperature+0x12c>)
 80017f2:	801a      	strh	r2, [r3, #0]
	if (heatCounter >=0 && heatCounter < period * SEC_IT && Temperature < TEMPERATURE_THRESHOLD) {
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <FSM_Temperature+0x12c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <FSM_Temperature+0x138>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001804:	fb03 f301 	mul.w	r3, r3, r1
 8001808:	429a      	cmp	r2, r3
 800180a:	da0e      	bge.n	800182a <FSM_Temperature+0xc6>
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <FSM_Temperature+0x13c>)
 800180e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <FSM_Temperature+0x140>)
 8001818:	f7ff f8d0 	bl	80009bc <__aeabi_dcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <FSM_Temperature+0xc6>
		TempFSMState = heater;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <FSM_Temperature+0x128>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e02d      	b.n	8001886 <FSM_Temperature+0x122>
	} else if (heatCounter >= period * SEC_IT && heatCounter <= period * SEC_IT * 2) {
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <FSM_Temperature+0x12c>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <FSM_Temperature+0x138>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fb03 f301 	mul.w	r3, r3, r1
 800183e:	429a      	cmp	r2, r3
 8001840:	db1e      	blt.n	8001880 <FSM_Temperature+0x11c>
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <FSM_Temperature+0x12c>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <FSM_Temperature+0x138>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001852:	fb03 f301 	mul.w	r3, r3, r1
 8001856:	429a      	cmp	r2, r3
 8001858:	dc12      	bgt.n	8001880 <FSM_Temperature+0x11c>
		TempFSMState = heatPump;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <FSM_Temperature+0x128>)
 800185c:	2202      	movs	r2, #2
 800185e:	701a      	strb	r2, [r3, #0]
		if (heatCounter == period * SEC_IT * 2) {
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <FSM_Temperature+0x12c>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <FSM_Temperature+0x138>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001870:	fb03 f301 	mul.w	r3, r3, r1
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <FSM_Temperature+0x122>
			heatCounter = 0;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <FSM_Temperature+0x12c>)
 800187a:	2200      	movs	r2, #0
 800187c:	801a      	strh	r2, [r3, #0]
		if (heatCounter == period * SEC_IT * 2) {
 800187e:	e002      	b.n	8001886 <FSM_Temperature+0x122>
		}
	} else {
		TempFSMState = non;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <FSM_Temperature+0x128>)
 8001882:	2203      	movs	r2, #3
 8001884:	701a      	strb	r2, [r3, #0]
	}
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000374 	.word	0x20000374
 8001890:	20000386 	.word	0x20000386
 8001894:	40011000 	.word	0x40011000
 8001898:	40010800 	.word	0x40010800
 800189c:	200003ba 	.word	0x200003ba
 80018a0:	20000260 	.word	0x20000260
 80018a4:	403e0000 	.word	0x403e0000

080018a8 <runHeater>:

void runHeater(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	turnOnLED(Heater_GPIO_Port, Heater_Pin);
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <runHeater+0x34>)
 80018b0:	f7ff fd4a 	bl	8001348 <turnOnLED>
	turnOffLED(Heat_pump_GPIO_Port, Heat_pump_Pin);
 80018b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <runHeater+0x38>)
 80018ba:	f7ff fd55 	bl	8001368 <turnOffLED>
	turnOnLED(Fan_2_GPIO_Port, Fan_2_Pin);
 80018be:	2102      	movs	r1, #2
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <runHeater+0x34>)
 80018c2:	f7ff fd41 	bl	8001348 <turnOnLED>
	turnOffLED(Fan_3_GPIO_Port, Fan_3_Pin);
 80018c6:	2101      	movs	r1, #1
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <runHeater+0x34>)
 80018ca:	f7ff fd4d 	bl	8001368 <turnOffLED>
	heatEffect += 2;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <runHeater+0x3c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3302      	adds	r3, #2
 80018d4:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <runHeater+0x3c>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	200002c0 	.word	0x200002c0

080018e8 <runHeatPump>:

void runHeatPump(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	turnOnLED(Heat_pump_GPIO_Port, Heat_pump_Pin);
 80018ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f0:	480a      	ldr	r0, [pc, #40]	; (800191c <runHeatPump+0x34>)
 80018f2:	f7ff fd29 	bl	8001348 <turnOnLED>
	turnOffLED(Heater_GPIO_Port, Heater_Pin);
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <runHeatPump+0x38>)
 80018fa:	f7ff fd35 	bl	8001368 <turnOffLED>
	turnOnLED(Fan_3_GPIO_Port, Fan_3_Pin);
 80018fe:	2101      	movs	r1, #1
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <runHeatPump+0x38>)
 8001902:	f7ff fd21 	bl	8001348 <turnOnLED>
	turnOffLED(Fan_2_GPIO_Port, Fan_2_Pin);
 8001906:	2102      	movs	r1, #2
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <runHeatPump+0x38>)
 800190a:	f7ff fd2d 	bl	8001368 <turnOffLED>
	heatEffect--;
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <runHeatPump+0x3c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <runHeatPump+0x3c>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010800 	.word	0x40010800
 8001920:	40011000 	.word	0x40011000
 8001924:	200002c0 	.word	0x200002c0

08001928 <Fan1>:

void Fan1(void) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	af00      	add	r7, sp, #0
	frequency = 100 - ((100 * (Humidity - HUMID_THRESHOLD)) / (100 - HUMID_THRESHOLD));
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <Fan1+0xe8>)
 800192e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <Fan1+0xec>)
 8001938:	f7fe fc16 	bl	8000168 <__aeabi_dsub>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	4618      	mov	r0, r3
 8001942:	4621      	mov	r1, r4
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <Fan1+0xf0>)
 800194a:	f7fe fdc5 	bl	80004d8 <__aeabi_dmul>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4618      	mov	r0, r3
 8001954:	4621      	mov	r1, r4
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <Fan1+0xf4>)
 800195c:	f7fe fee6 	bl	800072c <__aeabi_ddiv>
 8001960:	4603      	mov	r3, r0
 8001962:	460c      	mov	r4, r1
 8001964:	461a      	mov	r2, r3
 8001966:	4623      	mov	r3, r4
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	492a      	ldr	r1, [pc, #168]	; (8001a18 <Fan1+0xf0>)
 800196e:	f7fe fbfb 	bl	8000168 <__aeabi_dsub>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <Fan1+0xf8>)
 8001978:	e9c2 3400 	strd	r3, r4, [r2]
	if (Humidity > HUMID_THRESHOLD) {
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <Fan1+0xe8>)
 800197e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <Fan1+0xec>)
 8001988:	f7ff f836 	bl	80009f8 <__aeabi_dcmpgt>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d02f      	beq.n	80019f2 <Fan1+0xca>
		if (humidityCounter == frequency * SEC_IT / 100) {
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <Fan1+0xfc>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fd34 	bl	8000404 <__aeabi_i2d>
 800199c:	4604      	mov	r4, r0
 800199e:	460d      	mov	r5, r1
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <Fan1+0xf8>)
 80019a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <Fan1+0x100>)
 80019ac:	f7fe fd94 	bl	80004d8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <Fan1+0xf0>)
 80019be:	f7fe feb5 	bl	800072c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <Fan1+0xbc>
			toggleLED(Fan_1_GPIO_Port, Fan_1_Pin);
 80019d4:	2101      	movs	r1, #1
 80019d6:	4815      	ldr	r0, [pc, #84]	; (8001a2c <Fan1+0x104>)
 80019d8:	f7ff fcd6 	bl	8001388 <toggleLED>
			humidityCounter = 0;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <Fan1+0xfc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
	} else {
		frequency = 100;
		humidityCounter = 0;
		turnOffLED(Fan_1_GPIO_Port, Fan_1_Pin);
	}
}
 80019e2:	e013      	b.n	8001a0c <Fan1+0xe4>
			humidityCounter++;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <Fan1+0xfc>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <Fan1+0xfc>)
 80019ee:	801a      	strh	r2, [r3, #0]
}
 80019f0:	e00c      	b.n	8001a0c <Fan1+0xe4>
		frequency = 100;
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <Fan1+0xf8>)
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	4c07      	ldr	r4, [pc, #28]	; (8001a18 <Fan1+0xf0>)
 80019fa:	e9c2 3400 	strd	r3, r4, [r2]
		humidityCounter = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <Fan1+0xfc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	801a      	strh	r2, [r3, #0]
		turnOffLED(Fan_1_GPIO_Port, Fan_1_Pin);
 8001a04:	2101      	movs	r1, #1
 8001a06:	4809      	ldr	r0, [pc, #36]	; (8001a2c <Fan1+0x104>)
 8001a08:	f7ff fcae 	bl	8001368 <turnOffLED>
}
 8001a0c:	bf00      	nop
 8001a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a10:	20000448 	.word	0x20000448
 8001a14:	404e0000 	.word	0x404e0000
 8001a18:	40590000 	.word	0x40590000
 8001a1c:	40440000 	.word	0x40440000
 8001a20:	20000258 	.word	0x20000258
 8001a24:	200002c4 	.word	0x200002c4
 8001a28:	408f4000 	.word	0x408f4000
 8001a2c:	40010c00 	.word	0x40010c00

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f000 fc00 	bl	8002238 <HAL_Init>

  /* USER CODE BEGIN Init */
  initialize();
 8001a38:	f7ff fc30 	bl	800129c <initialize>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3c:	f000 f850 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a40:	f000 f984 	bl	8001d4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a44:	f000 f958 	bl	8001cf8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a48:	f000 f88c 	bl	8001b64 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a4c:	f000 f906 	bl	8001c5c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a50:	f000 f8b6 	bl	8001bc0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001a54:	481a      	ldr	r0, [pc, #104]	; (8001ac0 <main+0x90>)
 8001a56:	f001 ffef 	bl	8003a38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a5a:	481a      	ldr	r0, [pc, #104]	; (8001ac4 <main+0x94>)
 8001a5c:	f001 ffec 	bl	8003a38 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8001a60:	f7ff fbb0 	bl	80011c4 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printDataLCD();
 8001a64:	f7ff fdf8 	bl	8001658 <printDataLCD>
	  if (DHT11_Data.Error == TIMEOUT) {
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <main+0x98>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d118      	bne.n	8001aa2 <main+0x72>
		  timeoutFlag = TRUE;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <main+0x9c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
		  turnOffLED(Heater_GPIO_Port, Heater_Pin);
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	4815      	ldr	r0, [pc, #84]	; (8001ad0 <main+0xa0>)
 8001a7a:	f7ff fc75 	bl	8001368 <turnOffLED>
		  turnOffLED(Heat_pump_GPIO_Port, Heat_pump_Pin);
 8001a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <main+0xa4>)
 8001a84:	f7ff fc70 	bl	8001368 <turnOffLED>
		  turnOffLED(Fan_1_GPIO_Port, Fan_1_Pin);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <main+0xa8>)
 8001a8c:	f7ff fc6c 	bl	8001368 <turnOffLED>
		  turnOffLED(Fan_2_GPIO_Port, Fan_2_Pin);
 8001a90:	2102      	movs	r1, #2
 8001a92:	480f      	ldr	r0, [pc, #60]	; (8001ad0 <main+0xa0>)
 8001a94:	f7ff fc68 	bl	8001368 <turnOffLED>
		  turnOffLED(Fan_3_GPIO_Port, Fan_3_Pin);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <main+0xa0>)
 8001a9c:	f7ff fc64 	bl	8001368 <turnOffLED>
 8001aa0:	e7e0      	b.n	8001a64 <main+0x34>
	  } else {
		  if (timeoutFlag == TRUE) {
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <main+0x9c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d1dc      	bne.n	8001a64 <main+0x34>
			  timeoutFlag = FALSE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <main+0x9c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
			  initialize();
 8001ab0:	f7ff fbf4 	bl	800129c <initialize>
			  lcd_init();
 8001ab4:	f7ff fb86 	bl	80011c4 <lcd_init>
			  TempFSMState = initTemp;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <main+0xac>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
	  printDataLCD();
 8001abe:	e7d1      	b.n	8001a64 <main+0x34>
 8001ac0:	200003bc 	.word	0x200003bc
 8001ac4:	200002c8 	.word	0x200002c8
 8001ac8:	20000378 	.word	0x20000378
 8001acc:	20000252 	.word	0x20000252
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	20000374 	.word	0x20000374

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b090      	sub	sp, #64	; 0x40
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	2228      	movs	r2, #40	; 0x28
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fd22 	bl	8004538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b06:	2301      	movs	r3, #1
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b16:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 fb1d 	bl	8003160 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b2c:	f000 f9ec 	bl	8001f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b30:	230f      	movs	r3, #15
 8001b32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2302      	movs	r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fd88 	bl	8003660 <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b56:	f000 f9d7 	bl	8001f08 <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3740      	adds	r7, #64	; 0x40
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <MX_I2C1_Init+0x54>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b70:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_I2C1_Init+0x58>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001ba2:	f000 fe9f 	bl	80028e4 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 f9ac 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000026c 	.word	0x2000026c
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	000186a0 	.word	0x000186a0

08001bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400 - 1;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001be6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001bea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001bf4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001c08:	f001 fec6 	bl	8003998 <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c12:	f000 f979 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001c24:	f002 f862 	bl	8003cec <HAL_TIM_ConfigClockSource>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c2e:	f000 f96b 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_TIM2_Init+0x98>)
 8001c40:	f002 fa28 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c4a:	f000 f95d 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200003bc 	.word	0x200003bc

08001c5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <MX_TIM3_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c80:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001c84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10 - 1;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c8e:	2209      	movs	r2, #9
 8001c90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c9e:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001ca0:	f001 fe7a 	bl	8003998 <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001caa:	f000 f92d 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001cbc:	f002 f816 	bl	8003cec <HAL_TIM_ConfigClockSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cc6:	f000 f91f 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_TIM3_Init+0x94>)
 8001cd8:	f002 f9dc 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ce2:	f000 f911 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <MX_USART2_UART_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f002 fa20 	bl	8004174 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f000 f8e5 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000404 	.word	0x20000404
 8001d48:	40004400 	.word	0x40004400

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d7e:	f043 0320 	orr.w	r3, r3, #32
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Fan_3_Pin|Fan_2_Pin|Heater_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2183      	movs	r1, #131	; 0x83
 8001dc4:	482f      	ldr	r0, [pc, #188]	; (8001e84 <MX_GPIO_Init+0x138>)
 8001dc6:	f000 fd3a 	bl	800283e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Heat_pump_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001dd0:	482d      	ldr	r0, [pc, #180]	; (8001e88 <MX_GPIO_Init+0x13c>)
 8001dd2:	f000 fd34 	bl	800283e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fan_1_GPIO_Port, Fan_1_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2101      	movs	r1, #1
 8001dda:	482c      	ldr	r0, [pc, #176]	; (8001e8c <MX_GPIO_Init+0x140>)
 8001ddc:	f000 fd2f 	bl	800283e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <MX_GPIO_Init+0x144>)
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4619      	mov	r1, r3
 8001df4:	4823      	ldr	r0, [pc, #140]	; (8001e84 <MX_GPIO_Init+0x138>)
 8001df6:	f000 fbb1 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : Fan_3_Pin Fan_2_Pin Heater_Pin */
  GPIO_InitStruct.Pin = Fan_3_Pin|Fan_2_Pin|Heater_Pin;
 8001dfa:	2383      	movs	r3, #131	; 0x83
 8001dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	4619      	mov	r1, r3
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_GPIO_Init+0x138>)
 8001e12:	f000 fba3 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Decrease_Pin Button_Period_Pin Button_Increase_Pin */
  GPIO_InitStruct.Pin = Button_Decrease_Pin|Button_Period_Pin|Button_Increase_Pin;
 8001e16:	23d0      	movs	r3, #208	; 0xd0
 8001e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4619      	mov	r1, r3
 8001e28:	4817      	ldr	r0, [pc, #92]	; (8001e88 <MX_GPIO_Init+0x13c>)
 8001e2a:	f000 fb97 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Heat_pump_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Heat_pump_Pin;
 8001e2e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4810      	ldr	r0, [pc, #64]	; (8001e88 <MX_GPIO_Init+0x13c>)
 8001e48:	f000 fb88 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : Fan_1_Pin */
  GPIO_InitStruct.Pin = Fan_1_Pin;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Fan_1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	480a      	ldr	r0, [pc, #40]	; (8001e8c <MX_GPIO_Init+0x140>)
 8001e64:	f000 fb7a 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2028      	movs	r0, #40	; 0x28
 8001e6e:	f000 fb3e 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e72:	2028      	movs	r0, #40	; 0x28
 8001e74:	f000 fb57 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	10110000 	.word	0x10110000

08001e94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 && DHT11_Data.Error != TIMEOUT) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d11a      	bne.n	8001eda <HAL_TIM_PeriodElapsedCallback+0x46>
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d016      	beq.n	8001eda <HAL_TIM_PeriodElapsedCallback+0x46>
		readButtonPeriod();
 8001eac:	f7ff fa7c 	bl	80013a8 <readButtonPeriod>
		if (periodInput == FALSE) {
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10e      	bne.n	8001ed6 <HAL_TIM_PeriodElapsedCallback+0x42>
			if (buttonPeriod == pressed) {
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x38>
				periodInput = TRUE;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
				lcd_clear_display();
 8001ec6:	f7ff f9bf 	bl	8001248 <lcd_clear_display>
 8001eca:	e006      	b.n	8001eda <HAL_TIM_PeriodElapsedCallback+0x46>
			} else {
				FSM_Temperature();
 8001ecc:	f7ff fc4a 	bl	8001764 <FSM_Temperature>
				Fan1();
 8001ed0:	f7ff fd2a 	bl	8001928 <Fan1>
 8001ed4:	e001      	b.n	8001eda <HAL_TIM_PeriodElapsedCallback+0x46>
			}
		} else {
			adjustPeriod();
 8001ed6:	f7ff faf7 	bl	80014c8 <adjustPeriod>
		}
	}
	if (htim == &htim2) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d103      	bne.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x56>
		readData();
 8001ee2:	f7ff fb2d 	bl	8001540 <readData>
		printDataTerminal();
 8001ee6:	f7ff fb71 	bl	80015cc <printDataTerminal>
	}
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200002c8 	.word	0x200002c8
 8001ef8:	20000378 	.word	0x20000378
 8001efc:	20000253 	.word	0x20000253
 8001f00:	20000451 	.word	0x20000451
 8001f04:	200003bc 	.word	0x200003bc

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <Error_Handler+0x6>

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_MspInit+0x60>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_MspInit+0x60>)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000

08001f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_I2C_MspInit+0x70>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d123      	bne.n	8001fdc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <HAL_I2C_MspInit+0x78>)
 8001fc0:	f000 facc 	bl	800255c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010c00 	.word	0x40010c00

08001ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d114      	bne.n	800202c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	201c      	movs	r0, #28
 8002020:	f000 fa65 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002024:	201c      	movs	r0, #28
 8002026:	f000 fa7e 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800202a:	e018      	b.n	800205e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d113      	bne.n	800205e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	201d      	movs	r0, #29
 8002054:	f000 fa4b 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002058:	201d      	movs	r0, #29
 800205a:	f000 fa64 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40000400 	.word	0x40000400

08002070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <HAL_UART_MspInit+0x70>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d123      	bne.n	80020d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0x74>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <HAL_UART_MspInit+0x74>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209a:	61d3      	str	r3, [r2, #28]
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_UART_MspInit+0x74>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_UART_MspInit+0x74>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_UART_MspInit+0x74>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_UART_MspInit+0x74>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020c0:	230c      	movs	r3, #12
 80020c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_UART_MspInit+0x78>)
 80020d4:	f000 fa42 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010800 	.word	0x40010800

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <NMI_Handler+0x4>

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler+0x4>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <UsageFault_Handler+0x4>

0800210a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002132:	f000 f8c7 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <TIM2_IRQHandler+0x10>)
 8002142:	f001 fccb 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200003bc 	.word	0x200003bc

08002150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <TIM3_IRQHandler+0x10>)
 8002156:	f001 fcc1 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200002c8 	.word	0x200002c8

08002164 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002168:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800216c:	f000 fb98 	bl	80028a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f002 f99e 	bl	80044e4 <__errno>
 80021a8:	4602      	mov	r2, r0
 80021aa:	230c      	movs	r3, #12
 80021ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20005000 	.word	0x20005000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	2000020c 	.word	0x2000020c
 80021dc:	20000460 	.word	0x20000460

080021e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021ee:	e003      	b.n	80021f8 <LoopCopyDataInit>

080021f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021f6:	3104      	adds	r1, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021f8:	480a      	ldr	r0, [pc, #40]	; (8002224 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002200:	d3f6      	bcc.n	80021f0 <CopyDataInit>
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002204:	e002      	b.n	800220c <LoopFillZerobss>

08002206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002208:	f842 3b04 	str.w	r3, [r2], #4

0800220c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800220e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002210:	d3f9      	bcc.n	8002206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002212:	f7ff ffe5 	bl	80021e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f002 f96b 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800221a:	f7ff fc09 	bl	8001a30 <main>
  bx lr
 800221e:	4770      	bx	lr
  ldr r3, =_sidata
 8002220:	08008368 	.word	0x08008368
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002228:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800222c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002230:	2000045c 	.word	0x2000045c

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x28>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x28>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 f945 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	2000      	movs	r0, #0
 8002250:	f000 f808 	bl	8002264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fe5c 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x54>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f95d 	bl	8002542 <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 f925 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x5c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_IncTick+0x1c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_IncTick+0x20>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_IncTick+0x20>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000008 	.word	0x20000008
 80022e4:	20000454 	.word	0x20000454

080022e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <HAL_GetTick+0x10>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000454 	.word	0x20000454

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fff0 	bl	80022e8 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_Delay+0x40>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffe0 	bl	80022e8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000008 	.word	0x20000008

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4906      	ldr	r1, [pc, #24]	; (80023d8 <__NVIC_EnableIRQ+0x34>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff90 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff2d 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff42 	bl	8002388 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff90 	bl	8002430 <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5f 	bl	80023dc <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff35 	bl	80023a4 <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	e127      	b.n	80027c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002570:	2201      	movs	r2, #1
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8116 	bne.w	80027ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b12      	cmp	r3, #18
 8002594:	d034      	beq.n	8002600 <HAL_GPIO_Init+0xa4>
 8002596:	2b12      	cmp	r3, #18
 8002598:	d80d      	bhi.n	80025b6 <HAL_GPIO_Init+0x5a>
 800259a:	2b02      	cmp	r3, #2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x9a>
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d804      	bhi.n	80025ac <HAL_GPIO_Init+0x50>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d031      	beq.n	800260a <HAL_GPIO_Init+0xae>
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d01c      	beq.n	80025e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025aa:	e048      	b.n	800263e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d043      	beq.n	8002638 <HAL_GPIO_Init+0xdc>
 80025b0:	2b11      	cmp	r3, #17
 80025b2:	d01b      	beq.n	80025ec <HAL_GPIO_Init+0x90>
          break;
 80025b4:	e043      	b.n	800263e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025b6:	4a89      	ldr	r2, [pc, #548]	; (80027dc <HAL_GPIO_Init+0x280>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d026      	beq.n	800260a <HAL_GPIO_Init+0xae>
 80025bc:	4a87      	ldr	r2, [pc, #540]	; (80027dc <HAL_GPIO_Init+0x280>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d806      	bhi.n	80025d0 <HAL_GPIO_Init+0x74>
 80025c2:	4a87      	ldr	r2, [pc, #540]	; (80027e0 <HAL_GPIO_Init+0x284>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d020      	beq.n	800260a <HAL_GPIO_Init+0xae>
 80025c8:	4a86      	ldr	r2, [pc, #536]	; (80027e4 <HAL_GPIO_Init+0x288>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_GPIO_Init+0xae>
          break;
 80025ce:	e036      	b.n	800263e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025d0:	4a85      	ldr	r2, [pc, #532]	; (80027e8 <HAL_GPIO_Init+0x28c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0xae>
 80025d6:	4a85      	ldr	r2, [pc, #532]	; (80027ec <HAL_GPIO_Init+0x290>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d016      	beq.n	800260a <HAL_GPIO_Init+0xae>
 80025dc:	4a84      	ldr	r2, [pc, #528]	; (80027f0 <HAL_GPIO_Init+0x294>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0xae>
          break;
 80025e2:	e02c      	b.n	800263e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e028      	b.n	800263e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e023      	b.n	800263e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	3308      	adds	r3, #8
 80025fc:	623b      	str	r3, [r7, #32]
          break;
 80025fe:	e01e      	b.n	800263e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	330c      	adds	r3, #12
 8002606:	623b      	str	r3, [r7, #32]
          break;
 8002608:	e019      	b.n	800263e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002612:	2304      	movs	r3, #4
 8002614:	623b      	str	r3, [r7, #32]
          break;
 8002616:	e012      	b.n	800263e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002620:	2308      	movs	r3, #8
 8002622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	611a      	str	r2, [r3, #16]
          break;
 800262a:	e008      	b.n	800263e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800262c:	2308      	movs	r3, #8
 800262e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	615a      	str	r2, [r3, #20]
          break;
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
          break;
 800263c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2bff      	cmp	r3, #255	; 0xff
 8002642:	d801      	bhi.n	8002648 <HAL_GPIO_Init+0xec>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	e001      	b.n	800264c <HAL_GPIO_Init+0xf0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	d802      	bhi.n	800265a <HAL_GPIO_Init+0xfe>
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x104>
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3b08      	subs	r3, #8
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	210f      	movs	r1, #15
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	6a39      	ldr	r1, [r7, #32]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	431a      	orrs	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8096 	beq.w	80027ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_GPIO_Init+0x298>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_GPIO_Init+0x298>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6193      	str	r3, [r2, #24]
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_GPIO_Init+0x298>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026a6:	4a54      	ldr	r2, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x29c>)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	3302      	adds	r3, #2
 80026ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x2a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x19e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x2a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x19a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_GPIO_Init+0x2a8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x196>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a48      	ldr	r2, [pc, #288]	; (8002808 <HAL_GPIO_Init+0x2ac>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x192>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x1a0>
 80026ee:	2304      	movs	r3, #4
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x1a0>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x1a0>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x1a0>
 80026fa:	2300      	movs	r3, #0
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800270c:	493a      	ldr	r1, [pc, #232]	; (80027f8 <HAL_GPIO_Init+0x29c>)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4938      	ldr	r1, [pc, #224]	; (800280c <HAL_GPIO_Init+0x2b0>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
 8002732:	e006      	b.n	8002742 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002734:	4b35      	ldr	r3, [pc, #212]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	43db      	mvns	r3, r3
 800273c:	4933      	ldr	r1, [pc, #204]	; (800280c <HAL_GPIO_Init+0x2b0>)
 800273e:	4013      	ands	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800274e:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	492e      	ldr	r1, [pc, #184]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_GPIO_Init+0x2b0>)
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	43db      	mvns	r3, r3
 8002764:	4929      	ldr	r1, [pc, #164]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002766:	4013      	ands	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	4924      	ldr	r1, [pc, #144]	; (800280c <HAL_GPIO_Init+0x2b0>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
 8002782:	e006      	b.n	8002792 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <HAL_GPIO_Init+0x2b0>)
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	43db      	mvns	r3, r3
 800278c:	491f      	ldr	r1, [pc, #124]	; (800280c <HAL_GPIO_Init+0x2b0>)
 800278e:	4013      	ands	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	491a      	ldr	r1, [pc, #104]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
 80027aa:	e006      	b.n	80027ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4915      	ldr	r1, [pc, #84]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	3301      	adds	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f aed0 	bne.w	8002570 <HAL_GPIO_Init+0x14>
  }
}
 80027d0:	bf00      	nop
 80027d2:	372c      	adds	r7, #44	; 0x2c
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	10210000 	.word	0x10210000
 80027e0:	10110000 	.word	0x10110000
 80027e4:	10120000 	.word	0x10120000
 80027e8:	10310000 	.word	0x10310000
 80027ec:	10320000 	.word	0x10320000
 80027f0:	10220000 	.word	0x10220000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40010800 	.word	0x40010800
 8002800:	40010c00 	.word	0x40010c00
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	40010400 	.word	0x40010400

08002810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e001      	b.n	8002832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	807b      	strh	r3, [r7, #2]
 800284a:	4613      	mov	r3, r2
 800284c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800284e:	787b      	ldrb	r3, [r7, #1]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002854:	887a      	ldrh	r2, [r7, #2]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800285a:	e003      	b.n	8002864 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	041a      	lsls	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	611a      	str	r2, [r3, #16]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	041a      	lsls	r2, r3, #16
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43d9      	mvns	r1, r3
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	400b      	ands	r3, r1
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f806 	bl	80028d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e11f      	b.n	8002b36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fb32 	bl	8001f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002948:	f000 ffe0 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a7b      	ldr	r2, [pc, #492]	; (8002b40 <HAL_I2C_Init+0x25c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d807      	bhi.n	8002968 <HAL_I2C_Init+0x84>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a7a      	ldr	r2, [pc, #488]	; (8002b44 <HAL_I2C_Init+0x260>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e006      	b.n	8002976 <HAL_I2C_Init+0x92>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a77      	ldr	r2, [pc, #476]	; (8002b48 <HAL_I2C_Init+0x264>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0db      	b.n	8002b36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a72      	ldr	r2, [pc, #456]	; (8002b4c <HAL_I2C_Init+0x268>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0c9b      	lsrs	r3, r3, #18
 8002988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a64      	ldr	r2, [pc, #400]	; (8002b40 <HAL_I2C_Init+0x25c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d802      	bhi.n	80029b8 <HAL_I2C_Init+0xd4>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	e009      	b.n	80029cc <HAL_I2C_Init+0xe8>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	4a63      	ldr	r2, [pc, #396]	; (8002b50 <HAL_I2C_Init+0x26c>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	3301      	adds	r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4956      	ldr	r1, [pc, #344]	; (8002b40 <HAL_I2C_Init+0x25c>)
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d80d      	bhi.n	8002a08 <HAL_I2C_Init+0x124>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e59      	subs	r1, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	bf38      	it	cc
 8002a04:	2304      	movcc	r3, #4
 8002a06:	e04f      	b.n	8002aa8 <HAL_I2C_Init+0x1c4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <HAL_I2C_Init+0x150>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e58      	subs	r0, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e012      	b.n	8002a5a <HAL_I2C_Init+0x176>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	0099      	lsls	r1, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Init+0x17e>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e022      	b.n	8002aa8 <HAL_I2C_Init+0x1c4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_I2C_Init+0x1a4>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e58      	subs	r0, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	e00f      	b.n	8002aa8 <HAL_I2C_Init+0x1c4>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	6809      	ldr	r1, [r1, #0]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6911      	ldr	r1, [r2, #16]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	000186a0 	.word	0x000186a0
 8002b44:	001e847f 	.word	0x001e847f
 8002b48:	003d08ff 	.word	0x003d08ff
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	460b      	mov	r3, r1
 8002b62:	817b      	strh	r3, [r7, #10]
 8002b64:	4613      	mov	r3, r2
 8002b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff fbbe 	bl	80022e8 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	f040 80e0 	bne.w	8002d3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2319      	movs	r3, #25
 8002b82:	2201      	movs	r2, #1
 8002b84:	4970      	ldr	r1, [pc, #448]	; (8002d48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f964 	bl	8002e54 <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0d3      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_I2C_Master_Transmit+0x50>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0cc      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d007      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2210      	movs	r2, #16
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	893a      	ldrh	r2, [r7, #8]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c0c:	8979      	ldrh	r1, [r7, #10]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f89c 	bl	8002d50 <I2C_MasterRequestWrite>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e08d      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c38:	e066      	b.n	8002d08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9de 	bl	8003000 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x188>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f9ce 	bl	8003082 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e01a      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d194      	bne.n	8002c3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	00100002 	.word	0x00100002
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d006      	beq.n	8002d7a <I2C_MasterRequestWrite+0x2a>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d003      	beq.n	8002d7a <I2C_MasterRequestWrite+0x2a>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d78:	d108      	bne.n	8002d8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e00b      	b.n	8002da4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d107      	bne.n	8002da4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f84f 	bl	8002e54 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dca:	d103      	bne.n	8002dd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e035      	b.n	8002e44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de0:	d108      	bne.n	8002df4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	e01b      	b.n	8002e2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002df4:	897b      	ldrh	r3, [r7, #10]
 8002df6:	11db      	asrs	r3, r3, #7
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f063 030f 	orn	r3, r3, #15
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <I2C_MasterRequestWrite+0xfc>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f875 	bl	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e010      	b.n	8002e44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4907      	ldr	r1, [pc, #28]	; (8002e50 <I2C_MasterRequestWrite+0x100>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f865 	bl	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	00010008 	.word	0x00010008
 8002e50:	00010002 	.word	0x00010002

08002e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e64:	e025      	b.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d021      	beq.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7ff fa3b 	bl	80022e8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e023      	b.n	8002efa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10d      	bne.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	e00c      	b.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d0b6      	beq.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f10:	e051      	b.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	d123      	bne.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e046      	b.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d021      	beq.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f9b9 	bl	80022e8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e020      	b.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10c      	bne.n	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e00b      	b.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d18d      	bne.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300c:	e02d      	b.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f878 	bl	8003104 <I2C_IsAcknowledgeFailed>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e02d      	b.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d021      	beq.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7ff f95f 	bl	80022e8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d116      	bne.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e007      	b.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d1ca      	bne.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800308e:	e02d      	b.n	80030ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f837 	bl	8003104 <I2C_IsAcknowledgeFailed>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e02d      	b.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d021      	beq.n	80030ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7ff f91e 	bl	80022e8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e007      	b.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d1ca      	bne.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d11b      	bne.n	8003154 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003124:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e26c      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8087 	beq.w	800328e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003180:	4b92      	ldr	r3, [pc, #584]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b04      	cmp	r3, #4
 800318a:	d00c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800318c:	4b8f      	ldr	r3, [pc, #572]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d112      	bne.n	80031be <HAL_RCC_OscConfig+0x5e>
 8003198:	4b8c      	ldr	r3, [pc, #560]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d10b      	bne.n	80031be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a6:	4b89      	ldr	r3, [pc, #548]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d06c      	beq.n	800328c <HAL_RCC_OscConfig+0x12c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d168      	bne.n	800328c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e246      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x76>
 80031c8:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a7f      	ldr	r2, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e02e      	b.n	8003234 <HAL_RCC_OscConfig+0xd4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x98>
 80031de:	4b7b      	ldr	r3, [pc, #492]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7a      	ldr	r2, [pc, #488]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b78      	ldr	r3, [pc, #480]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a77      	ldr	r2, [pc, #476]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e01d      	b.n	8003234 <HAL_RCC_OscConfig+0xd4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0xbc>
 8003202:	4b72      	ldr	r3, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a71      	ldr	r2, [pc, #452]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0xd4>
 800321c:	4b6b      	ldr	r3, [pc, #428]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a67      	ldr	r2, [pc, #412]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7ff f854 	bl	80022e8 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7ff f850 	bl	80022e8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1fa      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0xe4>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7ff f840 	bl	80022e8 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7ff f83c 	bl	80022e8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1e6      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x10c>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d063      	beq.n	8003362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800329a:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d11c      	bne.n	80032ec <HAL_RCC_OscConfig+0x18c>
 80032b2:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d116      	bne.n	80032ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_RCC_OscConfig+0x176>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1ba      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4939      	ldr	r1, [pc, #228]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	e03a      	b.n	8003362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe fff5 	bl	80022e8 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003302:	f7fe fff1 	bl	80022e8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e19b      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4927      	ldr	r1, [pc, #156]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
 8003334:	e015      	b.n	8003362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fe ffd4 	bl	80022e8 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003344:	f7fe ffd0 	bl	80022e8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e17a      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03a      	beq.n	80033e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d019      	beq.n	80033aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe ffb4 	bl	80022e8 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7fe ffb0 	bl	80022e8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e15a      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f000 fada 	bl	800395c <RCC_Delay>
 80033a8:	e01c      	b.n	80033e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe ff9a 	bl	80022e8 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b6:	e00f      	b.n	80033d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe ff96 	bl	80022e8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d908      	bls.n	80033d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e140      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	42420000 	.word	0x42420000
 80033d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b9e      	ldr	r3, [pc, #632]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e9      	bne.n	80033b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a6 	beq.w	800353e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b97      	ldr	r3, [pc, #604]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b94      	ldr	r3, [pc, #592]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4a93      	ldr	r2, [pc, #588]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	61d3      	str	r3, [r2, #28]
 800340e:	4b91      	ldr	r3, [pc, #580]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b8b      	ldr	r3, [pc, #556]	; (8003658 <HAL_RCC_OscConfig+0x4f8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a8a      	ldr	r2, [pc, #552]	; (8003658 <HAL_RCC_OscConfig+0x4f8>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fe ff57 	bl	80022e8 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fe ff53 	bl	80022e8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0fd      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	4b81      	ldr	r3, [pc, #516]	; (8003658 <HAL_RCC_OscConfig+0x4f8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x312>
 8003464:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a7a      	ldr	r2, [pc, #488]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6213      	str	r3, [r2, #32]
 8003470:	e02d      	b.n	80034ce <HAL_RCC_OscConfig+0x36e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x334>
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a75      	ldr	r2, [pc, #468]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6213      	str	r3, [r2, #32]
 8003486:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a72      	ldr	r2, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	e01c      	b.n	80034ce <HAL_RCC_OscConfig+0x36e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d10c      	bne.n	80034b6 <HAL_RCC_OscConfig+0x356>
 800349c:	4b6d      	ldr	r3, [pc, #436]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a6c      	ldr	r2, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a69      	ldr	r2, [pc, #420]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	e00b      	b.n	80034ce <HAL_RCC_OscConfig+0x36e>
 80034b6:	4b67      	ldr	r3, [pc, #412]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a66      	ldr	r2, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	4b64      	ldr	r3, [pc, #400]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a63      	ldr	r2, [pc, #396]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d015      	beq.n	8003502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fe ff07 	bl	80022e8 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe ff03 	bl	80022e8 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e0ab      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	4b57      	ldr	r3, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ee      	beq.n	80034de <HAL_RCC_OscConfig+0x37e>
 8003500:	e014      	b.n	800352c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe fef1 	bl	80022e8 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe feed 	bl	80022e8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e095      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ee      	bne.n	800350a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4a47      	ldr	r2, [pc, #284]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8081 	beq.w	800364a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b08      	cmp	r3, #8
 8003552:	d061      	beq.n	8003618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d146      	bne.n	80035ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_OscConfig+0x4fc>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe fec1 	bl	80022e8 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe febd 	bl	80022e8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e067      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d108      	bne.n	80035a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	492d      	ldr	r1, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a19      	ldr	r1, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	430b      	orrs	r3, r1
 80035b6:	4927      	ldr	r1, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x4fc>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe fe91 	bl	80022e8 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe fe8d 	bl	80022e8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e037      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x46a>
 80035e8:	e02f      	b.n	800364a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_RCC_OscConfig+0x4fc>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fe7a 	bl	80022e8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe fe76 	bl	80022e8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e020      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x498>
 8003616:	e018      	b.n	800364a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e013      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_OscConfig+0x4f4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	429a      	cmp	r2, r3
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	42420060 	.word	0x42420060

08003660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0d0      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d910      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 0207 	bic.w	r2, r3, #7
 800368a:	4965      	ldr	r1, [pc, #404]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0b8      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036bc:	4b59      	ldr	r3, [pc, #356]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e0:	4b50      	ldr	r3, [pc, #320]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	494d      	ldr	r1, [pc, #308]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d040      	beq.n	8003780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d115      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e073      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06b      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373e:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f023 0203 	bic.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4936      	ldr	r1, [pc, #216]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003750:	f7fe fdca 	bl	80022e8 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	e00a      	b.n	800376e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7fe fdc6 	bl	80022e8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e053      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 020c 	and.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	429a      	cmp	r2, r3
 800377e:	d1eb      	bne.n	8003758 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d210      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4922      	ldr	r1, [pc, #136]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e032      	b.n	8003816 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4916      	ldr	r1, [pc, #88]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ee:	f000 f821 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037f2:	4601      	mov	r1, r0
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003800:	5cd3      	ldrb	r3, [r2, r3]
 8003802:	fa21 f303 	lsr.w	r3, r1, r3
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x1cc>)
 8003808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1d0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fd28 	bl	8002264 <HAL_InitTick>

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40022000 	.word	0x40022000
 8003824:	40021000 	.word	0x40021000
 8003828:	08008090 	.word	0x08008090
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b490      	push	{r4, r7}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800383a:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800383c:	1d3c      	adds	r4, r7, #4
 800383e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x40>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x46>
 8003872:	e02d      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003876:	623b      	str	r3, [r7, #32]
      break;
 8003878:	e02d      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003886:	4413      	add	r3, r2
 8003888:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800388c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0c5b      	lsrs	r3, r3, #17
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038a6:	4413      	add	r3, r2
 80038a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4a0f      	ldr	r2, [pc, #60]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b2:	fb02 f203 	mul.w	r2, r2, r3
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	e004      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	623b      	str	r3, [r7, #32]
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038d2:	623b      	str	r3, [r7, #32]
      break;
 80038d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3728      	adds	r7, #40	; 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc90      	pop	{r4, r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	0800807c 	.word	0x0800807c
 80038e8:	0800808c 	.word	0x0800808c
 80038ec:	40021000 	.word	0x40021000
 80038f0:	007a1200 	.word	0x007a1200
 80038f4:	003d0900 	.word	0x003d0900

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <HAL_RCC_GetHCLKFreq+0x10>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	20000000 	.word	0x20000000

0800390c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003910:	f7ff fff2 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003914:	4601      	mov	r1, r0
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4a03      	ldr	r2, [pc, #12]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003922:	5cd3      	ldrb	r3, [r2, r3]
 8003924:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	080080a0 	.word	0x080080a0

08003934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003938:	f7ff ffde 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 800393c:	4601      	mov	r1, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0adb      	lsrs	r3, r3, #11
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4a03      	ldr	r2, [pc, #12]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	080080a0 	.word	0x080080a0

0800395c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <RCC_Delay+0x34>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <RCC_Delay+0x38>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a5b      	lsrs	r3, r3, #9
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003978:	bf00      	nop
  }
  while (Delay --);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	60fa      	str	r2, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f9      	bne.n	8003978 <RCC_Delay+0x1c>
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000000 	.word	0x20000000
 8003994:	10624dd3 	.word	0x10624dd3

08003998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e041      	b.n	8003a2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fb16 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f000 fa64 	bl	8003ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e03a      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_TIM_Base_Start_IT+0x98>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x58>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d009      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x58>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x58>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d010      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	e007      	b.n	8003ac4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9a4 	bl	8003e6c <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f997 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f9a6 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f97a 	bl	8003e6c <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f96d 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f97c 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f950 	bl	8003e6c <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f943 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f952 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f926 	bl	8003e6c <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f919 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f928 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe f91a 	bl	8001e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa6b 	bl	8004162 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8ec 	bl	8003e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0220 	mvn.w	r2, #32
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa36 	bl	8004150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x18>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0a6      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x166>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d067      	beq.n	8003e0c <HAL_TIM_ConfigClockSource+0x120>
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d80b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x6c>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d073      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0x140>
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d802      	bhi.n	8003d4e <HAL_TIM_ConfigClockSource+0x62>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d06f      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d4c:	e078      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d06c      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0x140>
 8003d52:	2b30      	cmp	r3, #48	; 0x30
 8003d54:	d06a      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d56:	e073      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d00d      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0x8c>
 8003d5c:	2b70      	cmp	r3, #112	; 0x70
 8003d5e:	d804      	bhi.n	8003d6a <HAL_TIM_ConfigClockSource+0x7e>
 8003d60:	2b50      	cmp	r3, #80	; 0x50
 8003d62:	d033      	beq.n	8003dcc <HAL_TIM_ConfigClockSource+0xe0>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d041      	beq.n	8003dec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d68:	e06a      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	d066      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x152>
 8003d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d74:	d017      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d76:	e063      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f000 f965 	bl	8004056 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
      break;
 8003da4:	e04c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f000 f94e 	bl	8004056 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc8:	609a      	str	r2, [r3, #8]
      break;
 8003dca:	e039      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f000 f8c5 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2150      	movs	r1, #80	; 0x50
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f91c 	bl	8004022 <TIM_ITRx_SetConfig>
      break;
 8003dea:	e029      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f000 f8e3 	bl	8003fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2160      	movs	r1, #96	; 0x60
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f90c 	bl	8004022 <TIM_ITRx_SetConfig>
      break;
 8003e0a:	e019      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f000 f8a5 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f8fc 	bl	8004022 <TIM_ITRx_SetConfig>
      break;
 8003e2a:	e009      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f000 f8f3 	bl	8004022 <TIM_ITRx_SetConfig>
        break;
 8003e3c:	e000      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
	...

08003ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <TIM_Base_SetConfig+0xb8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x30>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x30>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <TIM_Base_SetConfig+0xbc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x30>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <TIM_Base_SetConfig+0xc0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <TIM_Base_SetConfig+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0x62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0x62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <TIM_Base_SetConfig+0xbc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0x62>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <TIM_Base_SetConfig+0xc0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <TIM_Base_SetConfig+0xb8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d103      	bne.n	8003f4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	615a      	str	r2, [r3, #20]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 0210 	bic.w	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	031b      	lsls	r3, r3, #12
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	f043 0307 	orr.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004070:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	021a      	lsls	r2, r3, #8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	431a      	orrs	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	609a      	str	r2, [r3, #8]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e046      	b.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d009      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10c      	bne.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800

08004150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03f      	b.n	8004206 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd ff68 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f905 	bl	80043c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08a      	sub	sp, #40	; 0x28
 8004212:	af02      	add	r7, sp, #8
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	d17c      	bne.n	8004328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_UART_Transmit+0x2c>
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e075      	b.n	800432a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_UART_Transmit+0x3e>
 8004248:	2302      	movs	r3, #2
 800424a:	e06e      	b.n	800432a <HAL_UART_Transmit+0x11c>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2221      	movs	r2, #33	; 0x21
 800425e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004262:	f7fe f841 	bl	80022e8 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d108      	bne.n	8004290 <HAL_UART_Transmit+0x82>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e003      	b.n	8004298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80042a0:	e02a      	b.n	80042f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f840 	bl	8004332 <UART_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e036      	b.n	800432a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	3302      	adds	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e007      	b.n	80042ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1cf      	bne.n	80042a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f810 	bl	8004332 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e006      	b.n	800432a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4613      	mov	r3, r2
 8004340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	e02c      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d028      	beq.n	800439e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x30>
 8004352:	f7fd ffc9 	bl	80022e8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	429a      	cmp	r2, r3
 8004360:	d21d      	bcs.n	800439e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004370:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e00f      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d0c3      	beq.n	8004344 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004402:	f023 030c 	bic.w	r3, r3, #12
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	430b      	orrs	r3, r1
 800440e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <UART_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7ff fa80 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	e002      	b.n	800443e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7ff fa68 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 800443c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	0119      	lsls	r1, r3, #4
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <UART_SetConfig+0x118>)
 8004476:	fba3 0302 	umull	r0, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004494:	4419      	add	r1, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <UART_SetConfig+0x118>)
 80044ae:	fba3 0302 	umull	r0, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	fb00 f303 	mul.w	r3, r0, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	; 0x32
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <UART_SetConfig+0x118>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	440a      	add	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40013800 	.word	0x40013800
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	2500      	movs	r5, #0
 80044f4:	4e0c      	ldr	r6, [pc, #48]	; (8004528 <__libc_init_array+0x38>)
 80044f6:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f8:	1ba4      	subs	r4, r4, r6
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	42a5      	cmp	r5, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	f003 fd60 	bl	8007fc4 <_init>
 8004504:	2500      	movs	r5, #0
 8004506:	4e0a      	ldr	r6, [pc, #40]	; (8004530 <__libc_init_array+0x40>)
 8004508:	4c0a      	ldr	r4, [pc, #40]	; (8004534 <__libc_init_array+0x44>)
 800450a:	1ba4      	subs	r4, r4, r6
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	42a5      	cmp	r5, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004518:	4798      	blx	r3
 800451a:	3501      	adds	r5, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004522:	4798      	blx	r3
 8004524:	3501      	adds	r5, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08008360 	.word	0x08008360
 800452c:	08008360 	.word	0x08008360
 8004530:	08008360 	.word	0x08008360
 8004534:	08008364 	.word	0x08008364

08004538 <memset>:
 8004538:	4603      	mov	r3, r0
 800453a:	4402      	add	r2, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	d100      	bne.n	8004542 <memset+0xa>
 8004540:	4770      	bx	lr
 8004542:	f803 1b01 	strb.w	r1, [r3], #1
 8004546:	e7f9      	b.n	800453c <memset+0x4>

08004548 <__cvt>:
 8004548:	2b00      	cmp	r3, #0
 800454a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800454e:	461e      	mov	r6, r3
 8004550:	bfbb      	ittet	lt
 8004552:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004556:	461e      	movlt	r6, r3
 8004558:	2300      	movge	r3, #0
 800455a:	232d      	movlt	r3, #45	; 0x2d
 800455c:	b088      	sub	sp, #32
 800455e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004560:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004564:	f027 0720 	bic.w	r7, r7, #32
 8004568:	2f46      	cmp	r7, #70	; 0x46
 800456a:	4614      	mov	r4, r2
 800456c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800456e:	700b      	strb	r3, [r1, #0]
 8004570:	d004      	beq.n	800457c <__cvt+0x34>
 8004572:	2f45      	cmp	r7, #69	; 0x45
 8004574:	d100      	bne.n	8004578 <__cvt+0x30>
 8004576:	3501      	adds	r5, #1
 8004578:	2302      	movs	r3, #2
 800457a:	e000      	b.n	800457e <__cvt+0x36>
 800457c:	2303      	movs	r3, #3
 800457e:	aa07      	add	r2, sp, #28
 8004580:	9204      	str	r2, [sp, #16]
 8004582:	aa06      	add	r2, sp, #24
 8004584:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004588:	e9cd 3500 	strd	r3, r5, [sp]
 800458c:	4622      	mov	r2, r4
 800458e:	4633      	mov	r3, r6
 8004590:	f001 fd7e 	bl	8006090 <_dtoa_r>
 8004594:	2f47      	cmp	r7, #71	; 0x47
 8004596:	4680      	mov	r8, r0
 8004598:	d102      	bne.n	80045a0 <__cvt+0x58>
 800459a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800459c:	07db      	lsls	r3, r3, #31
 800459e:	d526      	bpl.n	80045ee <__cvt+0xa6>
 80045a0:	2f46      	cmp	r7, #70	; 0x46
 80045a2:	eb08 0905 	add.w	r9, r8, r5
 80045a6:	d111      	bne.n	80045cc <__cvt+0x84>
 80045a8:	f898 3000 	ldrb.w	r3, [r8]
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d10a      	bne.n	80045c6 <__cvt+0x7e>
 80045b0:	2200      	movs	r2, #0
 80045b2:	2300      	movs	r3, #0
 80045b4:	4620      	mov	r0, r4
 80045b6:	4631      	mov	r1, r6
 80045b8:	f7fc f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80045bc:	b918      	cbnz	r0, 80045c6 <__cvt+0x7e>
 80045be:	f1c5 0501 	rsb	r5, r5, #1
 80045c2:	f8ca 5000 	str.w	r5, [sl]
 80045c6:	f8da 3000 	ldr.w	r3, [sl]
 80045ca:	4499      	add	r9, r3
 80045cc:	2200      	movs	r2, #0
 80045ce:	2300      	movs	r3, #0
 80045d0:	4620      	mov	r0, r4
 80045d2:	4631      	mov	r1, r6
 80045d4:	f7fc f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80045d8:	b938      	cbnz	r0, 80045ea <__cvt+0xa2>
 80045da:	2230      	movs	r2, #48	; 0x30
 80045dc:	9b07      	ldr	r3, [sp, #28]
 80045de:	454b      	cmp	r3, r9
 80045e0:	d205      	bcs.n	80045ee <__cvt+0xa6>
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	9107      	str	r1, [sp, #28]
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e7f8      	b.n	80045dc <__cvt+0x94>
 80045ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80045ee:	4640      	mov	r0, r8
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045f4:	eba3 0308 	sub.w	r3, r3, r8
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	b008      	add	sp, #32
 80045fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004600 <__exponent>:
 8004600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004602:	2900      	cmp	r1, #0
 8004604:	bfb4      	ite	lt
 8004606:	232d      	movlt	r3, #45	; 0x2d
 8004608:	232b      	movge	r3, #43	; 0x2b
 800460a:	4604      	mov	r4, r0
 800460c:	bfb8      	it	lt
 800460e:	4249      	neglt	r1, r1
 8004610:	2909      	cmp	r1, #9
 8004612:	f804 2b02 	strb.w	r2, [r4], #2
 8004616:	7043      	strb	r3, [r0, #1]
 8004618:	dd21      	ble.n	800465e <__exponent+0x5e>
 800461a:	f10d 0307 	add.w	r3, sp, #7
 800461e:	461f      	mov	r7, r3
 8004620:	260a      	movs	r6, #10
 8004622:	fb91 f5f6 	sdiv	r5, r1, r6
 8004626:	fb06 1115 	mls	r1, r6, r5, r1
 800462a:	2d09      	cmp	r5, #9
 800462c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004630:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004634:	f103 32ff 	add.w	r2, r3, #4294967295
 8004638:	4629      	mov	r1, r5
 800463a:	dc09      	bgt.n	8004650 <__exponent+0x50>
 800463c:	3130      	adds	r1, #48	; 0x30
 800463e:	3b02      	subs	r3, #2
 8004640:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004644:	42bb      	cmp	r3, r7
 8004646:	4622      	mov	r2, r4
 8004648:	d304      	bcc.n	8004654 <__exponent+0x54>
 800464a:	1a10      	subs	r0, r2, r0
 800464c:	b003      	add	sp, #12
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004650:	4613      	mov	r3, r2
 8004652:	e7e6      	b.n	8004622 <__exponent+0x22>
 8004654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004658:	f804 2b01 	strb.w	r2, [r4], #1
 800465c:	e7f2      	b.n	8004644 <__exponent+0x44>
 800465e:	2330      	movs	r3, #48	; 0x30
 8004660:	4419      	add	r1, r3
 8004662:	7083      	strb	r3, [r0, #2]
 8004664:	1d02      	adds	r2, r0, #4
 8004666:	70c1      	strb	r1, [r0, #3]
 8004668:	e7ef      	b.n	800464a <__exponent+0x4a>
	...

0800466c <_printf_float>:
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b091      	sub	sp, #68	; 0x44
 8004672:	460c      	mov	r4, r1
 8004674:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004676:	4693      	mov	fp, r2
 8004678:	461e      	mov	r6, r3
 800467a:	4605      	mov	r5, r0
 800467c:	f002 fdea 	bl	8007254 <_localeconv_r>
 8004680:	6803      	ldr	r3, [r0, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	9309      	str	r3, [sp, #36]	; 0x24
 8004686:	f7fb fd63 	bl	8000150 <strlen>
 800468a:	2300      	movs	r3, #0
 800468c:	930e      	str	r3, [sp, #56]	; 0x38
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	900a      	str	r0, [sp, #40]	; 0x28
 8004692:	3307      	adds	r3, #7
 8004694:	f023 0307 	bic.w	r3, r3, #7
 8004698:	f103 0208 	add.w	r2, r3, #8
 800469c:	f894 8018 	ldrb.w	r8, [r4, #24]
 80046a0:	f8d4 a000 	ldr.w	sl, [r4]
 80046a4:	603a      	str	r2, [r7, #0]
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046ae:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80046b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	4ba6      	ldr	r3, [pc, #664]	; (8004958 <_printf_float+0x2ec>)
 80046be:	4638      	mov	r0, r7
 80046c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046c2:	f7fc f9a3 	bl	8000a0c <__aeabi_dcmpun>
 80046c6:	bb68      	cbnz	r0, 8004724 <_printf_float+0xb8>
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	4ba2      	ldr	r3, [pc, #648]	; (8004958 <_printf_float+0x2ec>)
 80046ce:	4638      	mov	r0, r7
 80046d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046d2:	f7fc f97d 	bl	80009d0 <__aeabi_dcmple>
 80046d6:	bb28      	cbnz	r0, 8004724 <_printf_float+0xb8>
 80046d8:	2200      	movs	r2, #0
 80046da:	2300      	movs	r3, #0
 80046dc:	4638      	mov	r0, r7
 80046de:	4649      	mov	r1, r9
 80046e0:	f7fc f96c 	bl	80009bc <__aeabi_dcmplt>
 80046e4:	b110      	cbz	r0, 80046ec <_printf_float+0x80>
 80046e6:	232d      	movs	r3, #45	; 0x2d
 80046e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ec:	4f9b      	ldr	r7, [pc, #620]	; (800495c <_printf_float+0x2f0>)
 80046ee:	4b9c      	ldr	r3, [pc, #624]	; (8004960 <_printf_float+0x2f4>)
 80046f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046f4:	bf98      	it	ls
 80046f6:	461f      	movls	r7, r3
 80046f8:	2303      	movs	r3, #3
 80046fa:	f04f 0900 	mov.w	r9, #0
 80046fe:	6123      	str	r3, [r4, #16]
 8004700:	f02a 0304 	bic.w	r3, sl, #4
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	9600      	str	r6, [sp, #0]
 8004708:	465b      	mov	r3, fp
 800470a:	aa0f      	add	r2, sp, #60	; 0x3c
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f9e2 	bl	8004ad8 <_printf_common>
 8004714:	3001      	adds	r0, #1
 8004716:	f040 8090 	bne.w	800483a <_printf_float+0x1ce>
 800471a:	f04f 30ff 	mov.w	r0, #4294967295
 800471e:	b011      	add	sp, #68	; 0x44
 8004720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004724:	463a      	mov	r2, r7
 8004726:	464b      	mov	r3, r9
 8004728:	4638      	mov	r0, r7
 800472a:	4649      	mov	r1, r9
 800472c:	f7fc f96e 	bl	8000a0c <__aeabi_dcmpun>
 8004730:	b110      	cbz	r0, 8004738 <_printf_float+0xcc>
 8004732:	4f8c      	ldr	r7, [pc, #560]	; (8004964 <_printf_float+0x2f8>)
 8004734:	4b8c      	ldr	r3, [pc, #560]	; (8004968 <_printf_float+0x2fc>)
 8004736:	e7db      	b.n	80046f0 <_printf_float+0x84>
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	a80d      	add	r0, sp, #52	; 0x34
 8004742:	a90e      	add	r1, sp, #56	; 0x38
 8004744:	d140      	bne.n	80047c8 <_printf_float+0x15c>
 8004746:	2306      	movs	r3, #6
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	f04f 0c00 	mov.w	ip, #0
 800474e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004752:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	6022      	str	r2, [r4, #0]
 800475a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	463a      	mov	r2, r7
 8004762:	464b      	mov	r3, r9
 8004764:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004768:	4628      	mov	r0, r5
 800476a:	f7ff feed 	bl	8004548 <__cvt>
 800476e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004772:	2b47      	cmp	r3, #71	; 0x47
 8004774:	4607      	mov	r7, r0
 8004776:	d109      	bne.n	800478c <_printf_float+0x120>
 8004778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800477a:	1cd8      	adds	r0, r3, #3
 800477c:	db02      	blt.n	8004784 <_printf_float+0x118>
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	4293      	cmp	r3, r2
 8004782:	dd47      	ble.n	8004814 <_printf_float+0x1a8>
 8004784:	f1a8 0802 	sub.w	r8, r8, #2
 8004788:	fa5f f888 	uxtb.w	r8, r8
 800478c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004790:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004792:	d824      	bhi.n	80047de <_printf_float+0x172>
 8004794:	3901      	subs	r1, #1
 8004796:	4642      	mov	r2, r8
 8004798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800479c:	910d      	str	r1, [sp, #52]	; 0x34
 800479e:	f7ff ff2f 	bl	8004600 <__exponent>
 80047a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047a4:	4681      	mov	r9, r0
 80047a6:	1813      	adds	r3, r2, r0
 80047a8:	2a01      	cmp	r2, #1
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	dc02      	bgt.n	80047b4 <_printf_float+0x148>
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	07d1      	lsls	r1, r2, #31
 80047b2:	d501      	bpl.n	80047b8 <_printf_float+0x14c>
 80047b4:	3301      	adds	r3, #1
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0a2      	beq.n	8004706 <_printf_float+0x9a>
 80047c0:	232d      	movs	r3, #45	; 0x2d
 80047c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c6:	e79e      	b.n	8004706 <_printf_float+0x9a>
 80047c8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80047cc:	f000 816e 	beq.w	8004aac <_printf_float+0x440>
 80047d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047d4:	d1b9      	bne.n	800474a <_printf_float+0xde>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1b7      	bne.n	800474a <_printf_float+0xde>
 80047da:	2301      	movs	r3, #1
 80047dc:	e7b4      	b.n	8004748 <_printf_float+0xdc>
 80047de:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80047e2:	d119      	bne.n	8004818 <_printf_float+0x1ac>
 80047e4:	2900      	cmp	r1, #0
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	dd0c      	ble.n	8004804 <_printf_float+0x198>
 80047ea:	6121      	str	r1, [r4, #16]
 80047ec:	b913      	cbnz	r3, 80047f4 <_printf_float+0x188>
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	07d2      	lsls	r2, r2, #31
 80047f2:	d502      	bpl.n	80047fa <_printf_float+0x18e>
 80047f4:	3301      	adds	r3, #1
 80047f6:	440b      	add	r3, r1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047fc:	f04f 0900 	mov.w	r9, #0
 8004800:	65a3      	str	r3, [r4, #88]	; 0x58
 8004802:	e7d9      	b.n	80047b8 <_printf_float+0x14c>
 8004804:	b913      	cbnz	r3, 800480c <_printf_float+0x1a0>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	07d0      	lsls	r0, r2, #31
 800480a:	d501      	bpl.n	8004810 <_printf_float+0x1a4>
 800480c:	3302      	adds	r3, #2
 800480e:	e7f3      	b.n	80047f8 <_printf_float+0x18c>
 8004810:	2301      	movs	r3, #1
 8004812:	e7f1      	b.n	80047f8 <_printf_float+0x18c>
 8004814:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004818:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800481c:	4293      	cmp	r3, r2
 800481e:	db05      	blt.n	800482c <_printf_float+0x1c0>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	07d1      	lsls	r1, r2, #31
 8004826:	d5e8      	bpl.n	80047fa <_printf_float+0x18e>
 8004828:	3301      	adds	r3, #1
 800482a:	e7e5      	b.n	80047f8 <_printf_float+0x18c>
 800482c:	2b00      	cmp	r3, #0
 800482e:	bfcc      	ite	gt
 8004830:	2301      	movgt	r3, #1
 8004832:	f1c3 0302 	rsble	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	e7de      	b.n	80047f8 <_printf_float+0x18c>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	055a      	lsls	r2, r3, #21
 800483e:	d407      	bmi.n	8004850 <_printf_float+0x1e4>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	463a      	mov	r2, r7
 8004844:	4659      	mov	r1, fp
 8004846:	4628      	mov	r0, r5
 8004848:	47b0      	blx	r6
 800484a:	3001      	adds	r0, #1
 800484c:	d129      	bne.n	80048a2 <_printf_float+0x236>
 800484e:	e764      	b.n	800471a <_printf_float+0xae>
 8004850:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004854:	f240 80d7 	bls.w	8004a06 <_printf_float+0x39a>
 8004858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	f7fc f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8004864:	b388      	cbz	r0, 80048ca <_printf_float+0x25e>
 8004866:	2301      	movs	r3, #1
 8004868:	4a40      	ldr	r2, [pc, #256]	; (800496c <_printf_float+0x300>)
 800486a:	4659      	mov	r1, fp
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	3001      	adds	r0, #1
 8004872:	f43f af52 	beq.w	800471a <_printf_float+0xae>
 8004876:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800487a:	429a      	cmp	r2, r3
 800487c:	db02      	blt.n	8004884 <_printf_float+0x218>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	07d8      	lsls	r0, r3, #31
 8004882:	d50e      	bpl.n	80048a2 <_printf_float+0x236>
 8004884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004888:	4659      	mov	r1, fp
 800488a:	4628      	mov	r0, r5
 800488c:	47b0      	blx	r6
 800488e:	3001      	adds	r0, #1
 8004890:	f43f af43 	beq.w	800471a <_printf_float+0xae>
 8004894:	2700      	movs	r7, #0
 8004896:	f104 081a 	add.w	r8, r4, #26
 800489a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800489c:	3b01      	subs	r3, #1
 800489e:	42bb      	cmp	r3, r7
 80048a0:	dc09      	bgt.n	80048b6 <_printf_float+0x24a>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	079f      	lsls	r7, r3, #30
 80048a6:	f100 80fd 	bmi.w	8004aa4 <_printf_float+0x438>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e733      	b.n	800471e <_printf_float+0xb2>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4642      	mov	r2, r8
 80048ba:	4659      	mov	r1, fp
 80048bc:	4628      	mov	r0, r5
 80048be:	47b0      	blx	r6
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f af2a 	beq.w	800471a <_printf_float+0xae>
 80048c6:	3701      	adds	r7, #1
 80048c8:	e7e7      	b.n	800489a <_printf_float+0x22e>
 80048ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dc2b      	bgt.n	8004928 <_printf_float+0x2bc>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4a26      	ldr	r2, [pc, #152]	; (800496c <_printf_float+0x300>)
 80048d4:	4659      	mov	r1, fp
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b0      	blx	r6
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f af1d 	beq.w	800471a <_printf_float+0xae>
 80048e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048e2:	b923      	cbnz	r3, 80048ee <_printf_float+0x282>
 80048e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048e6:	b913      	cbnz	r3, 80048ee <_printf_float+0x282>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07d9      	lsls	r1, r3, #31
 80048ec:	d5d9      	bpl.n	80048a2 <_printf_float+0x236>
 80048ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f2:	4659      	mov	r1, fp
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b0      	blx	r6
 80048f8:	3001      	adds	r0, #1
 80048fa:	f43f af0e 	beq.w	800471a <_printf_float+0xae>
 80048fe:	f04f 0800 	mov.w	r8, #0
 8004902:	f104 091a 	add.w	r9, r4, #26
 8004906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004908:	425b      	negs	r3, r3
 800490a:	4543      	cmp	r3, r8
 800490c:	dc01      	bgt.n	8004912 <_printf_float+0x2a6>
 800490e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004910:	e797      	b.n	8004842 <_printf_float+0x1d6>
 8004912:	2301      	movs	r3, #1
 8004914:	464a      	mov	r2, r9
 8004916:	4659      	mov	r1, fp
 8004918:	4628      	mov	r0, r5
 800491a:	47b0      	blx	r6
 800491c:	3001      	adds	r0, #1
 800491e:	f43f aefc 	beq.w	800471a <_printf_float+0xae>
 8004922:	f108 0801 	add.w	r8, r8, #1
 8004926:	e7ee      	b.n	8004906 <_printf_float+0x29a>
 8004928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800492a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800492c:	429a      	cmp	r2, r3
 800492e:	bfa8      	it	ge
 8004930:	461a      	movge	r2, r3
 8004932:	2a00      	cmp	r2, #0
 8004934:	4690      	mov	r8, r2
 8004936:	dd07      	ble.n	8004948 <_printf_float+0x2dc>
 8004938:	4613      	mov	r3, r2
 800493a:	4659      	mov	r1, fp
 800493c:	463a      	mov	r2, r7
 800493e:	4628      	mov	r0, r5
 8004940:	47b0      	blx	r6
 8004942:	3001      	adds	r0, #1
 8004944:	f43f aee9 	beq.w	800471a <_printf_float+0xae>
 8004948:	f104 031a 	add.w	r3, r4, #26
 800494c:	f04f 0a00 	mov.w	sl, #0
 8004950:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004954:	930b      	str	r3, [sp, #44]	; 0x2c
 8004956:	e015      	b.n	8004984 <_printf_float+0x318>
 8004958:	7fefffff 	.word	0x7fefffff
 800495c:	080080ac 	.word	0x080080ac
 8004960:	080080a8 	.word	0x080080a8
 8004964:	080080b4 	.word	0x080080b4
 8004968:	080080b0 	.word	0x080080b0
 800496c:	080080b8 	.word	0x080080b8
 8004970:	2301      	movs	r3, #1
 8004972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004974:	4659      	mov	r1, fp
 8004976:	4628      	mov	r0, r5
 8004978:	47b0      	blx	r6
 800497a:	3001      	adds	r0, #1
 800497c:	f43f aecd 	beq.w	800471a <_printf_float+0xae>
 8004980:	f10a 0a01 	add.w	sl, sl, #1
 8004984:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004988:	eba9 0308 	sub.w	r3, r9, r8
 800498c:	4553      	cmp	r3, sl
 800498e:	dcef      	bgt.n	8004970 <_printf_float+0x304>
 8004990:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004994:	429a      	cmp	r2, r3
 8004996:	444f      	add	r7, r9
 8004998:	db14      	blt.n	80049c4 <_printf_float+0x358>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	07da      	lsls	r2, r3, #31
 800499e:	d411      	bmi.n	80049c4 <_printf_float+0x358>
 80049a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049a4:	eba3 0209 	sub.w	r2, r3, r9
 80049a8:	eba3 0901 	sub.w	r9, r3, r1
 80049ac:	4591      	cmp	r9, r2
 80049ae:	bfa8      	it	ge
 80049b0:	4691      	movge	r9, r2
 80049b2:	f1b9 0f00 	cmp.w	r9, #0
 80049b6:	dc0d      	bgt.n	80049d4 <_printf_float+0x368>
 80049b8:	2700      	movs	r7, #0
 80049ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049be:	f104 081a 	add.w	r8, r4, #26
 80049c2:	e018      	b.n	80049f6 <_printf_float+0x38a>
 80049c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c8:	4659      	mov	r1, fp
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b0      	blx	r6
 80049ce:	3001      	adds	r0, #1
 80049d0:	d1e6      	bne.n	80049a0 <_printf_float+0x334>
 80049d2:	e6a2      	b.n	800471a <_printf_float+0xae>
 80049d4:	464b      	mov	r3, r9
 80049d6:	463a      	mov	r2, r7
 80049d8:	4659      	mov	r1, fp
 80049da:	4628      	mov	r0, r5
 80049dc:	47b0      	blx	r6
 80049de:	3001      	adds	r0, #1
 80049e0:	d1ea      	bne.n	80049b8 <_printf_float+0x34c>
 80049e2:	e69a      	b.n	800471a <_printf_float+0xae>
 80049e4:	2301      	movs	r3, #1
 80049e6:	4642      	mov	r2, r8
 80049e8:	4659      	mov	r1, fp
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b0      	blx	r6
 80049ee:	3001      	adds	r0, #1
 80049f0:	f43f ae93 	beq.w	800471a <_printf_float+0xae>
 80049f4:	3701      	adds	r7, #1
 80049f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	eba3 0309 	sub.w	r3, r3, r9
 8004a00:	42bb      	cmp	r3, r7
 8004a02:	dcef      	bgt.n	80049e4 <_printf_float+0x378>
 8004a04:	e74d      	b.n	80048a2 <_printf_float+0x236>
 8004a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a08:	2a01      	cmp	r2, #1
 8004a0a:	dc01      	bgt.n	8004a10 <_printf_float+0x3a4>
 8004a0c:	07db      	lsls	r3, r3, #31
 8004a0e:	d538      	bpl.n	8004a82 <_printf_float+0x416>
 8004a10:	2301      	movs	r3, #1
 8004a12:	463a      	mov	r2, r7
 8004a14:	4659      	mov	r1, fp
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b0      	blx	r6
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f ae7d 	beq.w	800471a <_printf_float+0xae>
 8004a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a24:	4659      	mov	r1, fp
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b0      	blx	r6
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f107 0701 	add.w	r7, r7, #1
 8004a30:	f43f ae73 	beq.w	800471a <_printf_float+0xae>
 8004a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004a40:	2300      	movs	r3, #0
 8004a42:	f7fb ffb1 	bl	80009a8 <__aeabi_dcmpeq>
 8004a46:	b9c0      	cbnz	r0, 8004a7a <_printf_float+0x40e>
 8004a48:	4643      	mov	r3, r8
 8004a4a:	463a      	mov	r2, r7
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b0      	blx	r6
 8004a52:	3001      	adds	r0, #1
 8004a54:	d10d      	bne.n	8004a72 <_printf_float+0x406>
 8004a56:	e660      	b.n	800471a <_printf_float+0xae>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	4659      	mov	r1, fp
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b0      	blx	r6
 8004a62:	3001      	adds	r0, #1
 8004a64:	f43f ae59 	beq.w	800471a <_printf_float+0xae>
 8004a68:	3701      	adds	r7, #1
 8004a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	42bb      	cmp	r3, r7
 8004a70:	dcf2      	bgt.n	8004a58 <_printf_float+0x3ec>
 8004a72:	464b      	mov	r3, r9
 8004a74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a78:	e6e4      	b.n	8004844 <_printf_float+0x1d8>
 8004a7a:	2700      	movs	r7, #0
 8004a7c:	f104 081a 	add.w	r8, r4, #26
 8004a80:	e7f3      	b.n	8004a6a <_printf_float+0x3fe>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e7e1      	b.n	8004a4a <_printf_float+0x3de>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4642      	mov	r2, r8
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b0      	blx	r6
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f ae42 	beq.w	800471a <_printf_float+0xae>
 8004a96:	3701      	adds	r7, #1
 8004a98:	68e3      	ldr	r3, [r4, #12]
 8004a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	42bb      	cmp	r3, r7
 8004aa0:	dcf1      	bgt.n	8004a86 <_printf_float+0x41a>
 8004aa2:	e702      	b.n	80048aa <_printf_float+0x23e>
 8004aa4:	2700      	movs	r7, #0
 8004aa6:	f104 0819 	add.w	r8, r4, #25
 8004aaa:	e7f5      	b.n	8004a98 <_printf_float+0x42c>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f43f ae94 	beq.w	80047da <_printf_float+0x16e>
 8004ab2:	f04f 0c00 	mov.w	ip, #0
 8004ab6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004aba:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004abe:	6022      	str	r2, [r4, #0]
 8004ac0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004ac4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	463a      	mov	r2, r7
 8004acc:	464b      	mov	r3, r9
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f7ff fd3a 	bl	8004548 <__cvt>
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	e64f      	b.n	8004778 <_printf_float+0x10c>

08004ad8 <_printf_common>:
 8004ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004adc:	4691      	mov	r9, r2
 8004ade:	461f      	mov	r7, r3
 8004ae0:	688a      	ldr	r2, [r1, #8]
 8004ae2:	690b      	ldr	r3, [r1, #16]
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfb8      	it	lt
 8004aea:	4613      	movlt	r3, r2
 8004aec:	f8c9 3000 	str.w	r3, [r9]
 8004af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af4:	460c      	mov	r4, r1
 8004af6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004afa:	b112      	cbz	r2, 8004b02 <_printf_common+0x2a>
 8004afc:	3301      	adds	r3, #1
 8004afe:	f8c9 3000 	str.w	r3, [r9]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	0699      	lsls	r1, r3, #26
 8004b06:	bf42      	ittt	mi
 8004b08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b0c:	3302      	addmi	r3, #2
 8004b0e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	f015 0506 	ands.w	r5, r5, #6
 8004b18:	d107      	bne.n	8004b2a <_printf_common+0x52>
 8004b1a:	f104 0a19 	add.w	sl, r4, #25
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	f8d9 2000 	ldr.w	r2, [r9]
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	42ab      	cmp	r3, r5
 8004b28:	dc29      	bgt.n	8004b7e <_printf_common+0xa6>
 8004b2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	3300      	adds	r3, #0
 8004b32:	bf18      	it	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	0692      	lsls	r2, r2, #26
 8004b38:	d42e      	bmi.n	8004b98 <_printf_common+0xc0>
 8004b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b3e:	4639      	mov	r1, r7
 8004b40:	4630      	mov	r0, r6
 8004b42:	47c0      	blx	r8
 8004b44:	3001      	adds	r0, #1
 8004b46:	d021      	beq.n	8004b8c <_printf_common+0xb4>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	68e5      	ldr	r5, [r4, #12]
 8004b4c:	f003 0306 	and.w	r3, r3, #6
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	bf18      	it	ne
 8004b54:	2500      	movne	r5, #0
 8004b56:	f8d9 2000 	ldr.w	r2, [r9]
 8004b5a:	f04f 0900 	mov.w	r9, #0
 8004b5e:	bf08      	it	eq
 8004b60:	1aad      	subeq	r5, r5, r2
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	bf08      	it	eq
 8004b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	bfc4      	itt	gt
 8004b70:	1a9b      	subgt	r3, r3, r2
 8004b72:	18ed      	addgt	r5, r5, r3
 8004b74:	341a      	adds	r4, #26
 8004b76:	454d      	cmp	r5, r9
 8004b78:	d11a      	bne.n	8004bb0 <_printf_common+0xd8>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e008      	b.n	8004b90 <_printf_common+0xb8>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4652      	mov	r2, sl
 8004b82:	4639      	mov	r1, r7
 8004b84:	4630      	mov	r0, r6
 8004b86:	47c0      	blx	r8
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d103      	bne.n	8004b94 <_printf_common+0xbc>
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	3501      	adds	r5, #1
 8004b96:	e7c2      	b.n	8004b1e <_printf_common+0x46>
 8004b98:	2030      	movs	r0, #48	; 0x30
 8004b9a:	18e1      	adds	r1, r4, r3
 8004b9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ba6:	4422      	add	r2, r4
 8004ba8:	3302      	adds	r3, #2
 8004baa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bae:	e7c4      	b.n	8004b3a <_printf_common+0x62>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d0e6      	beq.n	8004b8c <_printf_common+0xb4>
 8004bbe:	f109 0901 	add.w	r9, r9, #1
 8004bc2:	e7d8      	b.n	8004b76 <_printf_common+0x9e>

08004bc4 <_printf_i>:
 8004bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bcc:	460c      	mov	r4, r1
 8004bce:	7e09      	ldrb	r1, [r1, #24]
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	296e      	cmp	r1, #110	; 0x6e
 8004bd4:	4617      	mov	r7, r2
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	4698      	mov	r8, r3
 8004bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bdc:	f000 80b3 	beq.w	8004d46 <_printf_i+0x182>
 8004be0:	d822      	bhi.n	8004c28 <_printf_i+0x64>
 8004be2:	2963      	cmp	r1, #99	; 0x63
 8004be4:	d036      	beq.n	8004c54 <_printf_i+0x90>
 8004be6:	d80a      	bhi.n	8004bfe <_printf_i+0x3a>
 8004be8:	2900      	cmp	r1, #0
 8004bea:	f000 80b9 	beq.w	8004d60 <_printf_i+0x19c>
 8004bee:	2958      	cmp	r1, #88	; 0x58
 8004bf0:	f000 8083 	beq.w	8004cfa <_printf_i+0x136>
 8004bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bfc:	e032      	b.n	8004c64 <_printf_i+0xa0>
 8004bfe:	2964      	cmp	r1, #100	; 0x64
 8004c00:	d001      	beq.n	8004c06 <_printf_i+0x42>
 8004c02:	2969      	cmp	r1, #105	; 0x69
 8004c04:	d1f6      	bne.n	8004bf4 <_printf_i+0x30>
 8004c06:	6820      	ldr	r0, [r4, #0]
 8004c08:	6813      	ldr	r3, [r2, #0]
 8004c0a:	0605      	lsls	r5, r0, #24
 8004c0c:	f103 0104 	add.w	r1, r3, #4
 8004c10:	d52a      	bpl.n	8004c68 <_printf_i+0xa4>
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da03      	bge.n	8004c22 <_printf_i+0x5e>
 8004c1a:	222d      	movs	r2, #45	; 0x2d
 8004c1c:	425b      	negs	r3, r3
 8004c1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c22:	486f      	ldr	r0, [pc, #444]	; (8004de0 <_printf_i+0x21c>)
 8004c24:	220a      	movs	r2, #10
 8004c26:	e039      	b.n	8004c9c <_printf_i+0xd8>
 8004c28:	2973      	cmp	r1, #115	; 0x73
 8004c2a:	f000 809d 	beq.w	8004d68 <_printf_i+0x1a4>
 8004c2e:	d808      	bhi.n	8004c42 <_printf_i+0x7e>
 8004c30:	296f      	cmp	r1, #111	; 0x6f
 8004c32:	d020      	beq.n	8004c76 <_printf_i+0xb2>
 8004c34:	2970      	cmp	r1, #112	; 0x70
 8004c36:	d1dd      	bne.n	8004bf4 <_printf_i+0x30>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	f043 0320 	orr.w	r3, r3, #32
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	e003      	b.n	8004c4a <_printf_i+0x86>
 8004c42:	2975      	cmp	r1, #117	; 0x75
 8004c44:	d017      	beq.n	8004c76 <_printf_i+0xb2>
 8004c46:	2978      	cmp	r1, #120	; 0x78
 8004c48:	d1d4      	bne.n	8004bf4 <_printf_i+0x30>
 8004c4a:	2378      	movs	r3, #120	; 0x78
 8004c4c:	4865      	ldr	r0, [pc, #404]	; (8004de4 <_printf_i+0x220>)
 8004c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c52:	e055      	b.n	8004d00 <_printf_i+0x13c>
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c5a:	1d19      	adds	r1, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6011      	str	r1, [r2, #0]
 8004c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c64:	2301      	movs	r3, #1
 8004c66:	e08c      	b.n	8004d82 <_printf_i+0x1be>
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c6e:	6011      	str	r1, [r2, #0]
 8004c70:	bf18      	it	ne
 8004c72:	b21b      	sxthne	r3, r3
 8004c74:	e7cf      	b.n	8004c16 <_printf_i+0x52>
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	1d18      	adds	r0, r3, #4
 8004c7c:	6010      	str	r0, [r2, #0]
 8004c7e:	0628      	lsls	r0, r5, #24
 8004c80:	d501      	bpl.n	8004c86 <_printf_i+0xc2>
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <_printf_i+0xc8>
 8004c86:	0668      	lsls	r0, r5, #25
 8004c88:	d5fb      	bpl.n	8004c82 <_printf_i+0xbe>
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	296f      	cmp	r1, #111	; 0x6f
 8004c8e:	bf14      	ite	ne
 8004c90:	220a      	movne	r2, #10
 8004c92:	2208      	moveq	r2, #8
 8004c94:	4852      	ldr	r0, [pc, #328]	; (8004de0 <_printf_i+0x21c>)
 8004c96:	2100      	movs	r1, #0
 8004c98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c9c:	6865      	ldr	r5, [r4, #4]
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	60a5      	str	r5, [r4, #8]
 8004ca2:	f2c0 8095 	blt.w	8004dd0 <_printf_i+0x20c>
 8004ca6:	6821      	ldr	r1, [r4, #0]
 8004ca8:	f021 0104 	bic.w	r1, r1, #4
 8004cac:	6021      	str	r1, [r4, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d13d      	bne.n	8004d2e <_printf_i+0x16a>
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	f040 808e 	bne.w	8004dd4 <_printf_i+0x210>
 8004cb8:	4665      	mov	r5, ip
 8004cba:	2a08      	cmp	r2, #8
 8004cbc:	d10b      	bne.n	8004cd6 <_printf_i+0x112>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	07db      	lsls	r3, r3, #31
 8004cc2:	d508      	bpl.n	8004cd6 <_printf_i+0x112>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	bfde      	ittt	le
 8004ccc:	2330      	movle	r3, #48	; 0x30
 8004cce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cd6:	ebac 0305 	sub.w	r3, ip, r5
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	f8cd 8000 	str.w	r8, [sp]
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	aa03      	add	r2, sp, #12
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff fef6 	bl	8004ad8 <_printf_common>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d14d      	bne.n	8004d8c <_printf_i+0x1c8>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	b005      	add	sp, #20
 8004cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	4839      	ldr	r0, [pc, #228]	; (8004de0 <_printf_i+0x21c>)
 8004cfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d00:	6813      	ldr	r3, [r2, #0]
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	1d1d      	adds	r5, r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6015      	str	r5, [r2, #0]
 8004d0a:	060a      	lsls	r2, r1, #24
 8004d0c:	d50b      	bpl.n	8004d26 <_printf_i+0x162>
 8004d0e:	07ca      	lsls	r2, r1, #31
 8004d10:	bf44      	itt	mi
 8004d12:	f041 0120 	orrmi.w	r1, r1, #32
 8004d16:	6021      	strmi	r1, [r4, #0]
 8004d18:	b91b      	cbnz	r3, 8004d22 <_printf_i+0x15e>
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	f022 0220 	bic.w	r2, r2, #32
 8004d20:	6022      	str	r2, [r4, #0]
 8004d22:	2210      	movs	r2, #16
 8004d24:	e7b7      	b.n	8004c96 <_printf_i+0xd2>
 8004d26:	064d      	lsls	r5, r1, #25
 8004d28:	bf48      	it	mi
 8004d2a:	b29b      	uxthmi	r3, r3
 8004d2c:	e7ef      	b.n	8004d0e <_printf_i+0x14a>
 8004d2e:	4665      	mov	r5, ip
 8004d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d34:	fb02 3311 	mls	r3, r2, r1, r3
 8004d38:	5cc3      	ldrb	r3, [r0, r3]
 8004d3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d3e:	460b      	mov	r3, r1
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d1f5      	bne.n	8004d30 <_printf_i+0x16c>
 8004d44:	e7b9      	b.n	8004cba <_printf_i+0xf6>
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	6825      	ldr	r5, [r4, #0]
 8004d4a:	1d18      	adds	r0, r3, #4
 8004d4c:	6961      	ldr	r1, [r4, #20]
 8004d4e:	6010      	str	r0, [r2, #0]
 8004d50:	0628      	lsls	r0, r5, #24
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	d501      	bpl.n	8004d5a <_printf_i+0x196>
 8004d56:	6019      	str	r1, [r3, #0]
 8004d58:	e002      	b.n	8004d60 <_printf_i+0x19c>
 8004d5a:	066a      	lsls	r2, r5, #25
 8004d5c:	d5fb      	bpl.n	8004d56 <_printf_i+0x192>
 8004d5e:	8019      	strh	r1, [r3, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	4665      	mov	r5, ip
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	e7b9      	b.n	8004cdc <_printf_i+0x118>
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	1d19      	adds	r1, r3, #4
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	681d      	ldr	r5, [r3, #0]
 8004d70:	6862      	ldr	r2, [r4, #4]
 8004d72:	2100      	movs	r1, #0
 8004d74:	4628      	mov	r0, r5
 8004d76:	f002 fa95 	bl	80072a4 <memchr>
 8004d7a:	b108      	cbz	r0, 8004d80 <_printf_i+0x1bc>
 8004d7c:	1b40      	subs	r0, r0, r5
 8004d7e:	6060      	str	r0, [r4, #4]
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	6123      	str	r3, [r4, #16]
 8004d84:	2300      	movs	r3, #0
 8004d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8a:	e7a7      	b.n	8004cdc <_printf_i+0x118>
 8004d8c:	6923      	ldr	r3, [r4, #16]
 8004d8e:	462a      	mov	r2, r5
 8004d90:	4639      	mov	r1, r7
 8004d92:	4630      	mov	r0, r6
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d0aa      	beq.n	8004cf0 <_printf_i+0x12c>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	079b      	lsls	r3, r3, #30
 8004d9e:	d413      	bmi.n	8004dc8 <_printf_i+0x204>
 8004da0:	68e0      	ldr	r0, [r4, #12]
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	4298      	cmp	r0, r3
 8004da6:	bfb8      	it	lt
 8004da8:	4618      	movlt	r0, r3
 8004daa:	e7a3      	b.n	8004cf4 <_printf_i+0x130>
 8004dac:	2301      	movs	r3, #1
 8004dae:	464a      	mov	r2, r9
 8004db0:	4639      	mov	r1, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	47c0      	blx	r8
 8004db6:	3001      	adds	r0, #1
 8004db8:	d09a      	beq.n	8004cf0 <_printf_i+0x12c>
 8004dba:	3501      	adds	r5, #1
 8004dbc:	68e3      	ldr	r3, [r4, #12]
 8004dbe:	9a03      	ldr	r2, [sp, #12]
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	42ab      	cmp	r3, r5
 8004dc4:	dcf2      	bgt.n	8004dac <_printf_i+0x1e8>
 8004dc6:	e7eb      	b.n	8004da0 <_printf_i+0x1dc>
 8004dc8:	2500      	movs	r5, #0
 8004dca:	f104 0919 	add.w	r9, r4, #25
 8004dce:	e7f5      	b.n	8004dbc <_printf_i+0x1f8>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ac      	bne.n	8004d2e <_printf_i+0x16a>
 8004dd4:	7803      	ldrb	r3, [r0, #0]
 8004dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dde:	e76c      	b.n	8004cba <_printf_i+0xf6>
 8004de0:	080080ba 	.word	0x080080ba
 8004de4:	080080cb 	.word	0x080080cb

08004de8 <_scanf_float>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	469a      	mov	sl, r3
 8004dee:	688b      	ldr	r3, [r1, #8]
 8004df0:	4616      	mov	r6, r2
 8004df2:	1e5a      	subs	r2, r3, #1
 8004df4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004df8:	bf88      	it	hi
 8004dfa:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004dfe:	b087      	sub	sp, #28
 8004e00:	bf85      	ittet	hi
 8004e02:	189b      	addhi	r3, r3, r2
 8004e04:	9301      	strhi	r3, [sp, #4]
 8004e06:	2300      	movls	r3, #0
 8004e08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e0c:	4688      	mov	r8, r1
 8004e0e:	f04f 0b00 	mov.w	fp, #0
 8004e12:	bf8c      	ite	hi
 8004e14:	608b      	strhi	r3, [r1, #8]
 8004e16:	9301      	strls	r3, [sp, #4]
 8004e18:	680b      	ldr	r3, [r1, #0]
 8004e1a:	4607      	mov	r7, r0
 8004e1c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e20:	f848 3b1c 	str.w	r3, [r8], #28
 8004e24:	460c      	mov	r4, r1
 8004e26:	4645      	mov	r5, r8
 8004e28:	465a      	mov	r2, fp
 8004e2a:	46d9      	mov	r9, fp
 8004e2c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004e30:	f8cd b008 	str.w	fp, [sp, #8]
 8004e34:	68a1      	ldr	r1, [r4, #8]
 8004e36:	b181      	cbz	r1, 8004e5a <_scanf_float+0x72>
 8004e38:	6833      	ldr	r3, [r6, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b49      	cmp	r3, #73	; 0x49
 8004e3e:	d071      	beq.n	8004f24 <_scanf_float+0x13c>
 8004e40:	d84d      	bhi.n	8004ede <_scanf_float+0xf6>
 8004e42:	2b39      	cmp	r3, #57	; 0x39
 8004e44:	d840      	bhi.n	8004ec8 <_scanf_float+0xe0>
 8004e46:	2b31      	cmp	r3, #49	; 0x31
 8004e48:	f080 8088 	bcs.w	8004f5c <_scanf_float+0x174>
 8004e4c:	2b2d      	cmp	r3, #45	; 0x2d
 8004e4e:	f000 8090 	beq.w	8004f72 <_scanf_float+0x18a>
 8004e52:	d815      	bhi.n	8004e80 <_scanf_float+0x98>
 8004e54:	2b2b      	cmp	r3, #43	; 0x2b
 8004e56:	f000 808c 	beq.w	8004f72 <_scanf_float+0x18a>
 8004e5a:	f1b9 0f00 	cmp.w	r9, #0
 8004e5e:	d003      	beq.n	8004e68 <_scanf_float+0x80>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	3a01      	subs	r2, #1
 8004e6a:	2a01      	cmp	r2, #1
 8004e6c:	f200 80ea 	bhi.w	8005044 <_scanf_float+0x25c>
 8004e70:	4545      	cmp	r5, r8
 8004e72:	f200 80dc 	bhi.w	800502e <_scanf_float+0x246>
 8004e76:	2601      	movs	r6, #1
 8004e78:	4630      	mov	r0, r6
 8004e7a:	b007      	add	sp, #28
 8004e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e80:	2b2e      	cmp	r3, #46	; 0x2e
 8004e82:	f000 809f 	beq.w	8004fc4 <_scanf_float+0x1dc>
 8004e86:	2b30      	cmp	r3, #48	; 0x30
 8004e88:	d1e7      	bne.n	8004e5a <_scanf_float+0x72>
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004e90:	d064      	beq.n	8004f5c <_scanf_float+0x174>
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004e98:	6020      	str	r0, [r4, #0]
 8004e9a:	f109 0901 	add.w	r9, r9, #1
 8004e9e:	b11b      	cbz	r3, 8004ea8 <_scanf_float+0xc0>
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	3101      	adds	r1, #1
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	60a1      	str	r1, [r4, #8]
 8004ea8:	68a3      	ldr	r3, [r4, #8]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60a3      	str	r3, [r4, #8]
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	6123      	str	r3, [r4, #16]
 8004eb4:	6873      	ldr	r3, [r6, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	6073      	str	r3, [r6, #4]
 8004ebc:	f340 80ac 	ble.w	8005018 <_scanf_float+0x230>
 8004ec0:	6833      	ldr	r3, [r6, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	e7b5      	b.n	8004e34 <_scanf_float+0x4c>
 8004ec8:	2b45      	cmp	r3, #69	; 0x45
 8004eca:	f000 8085 	beq.w	8004fd8 <_scanf_float+0x1f0>
 8004ece:	2b46      	cmp	r3, #70	; 0x46
 8004ed0:	d06a      	beq.n	8004fa8 <_scanf_float+0x1c0>
 8004ed2:	2b41      	cmp	r3, #65	; 0x41
 8004ed4:	d1c1      	bne.n	8004e5a <_scanf_float+0x72>
 8004ed6:	2a01      	cmp	r2, #1
 8004ed8:	d1bf      	bne.n	8004e5a <_scanf_float+0x72>
 8004eda:	2202      	movs	r2, #2
 8004edc:	e046      	b.n	8004f6c <_scanf_float+0x184>
 8004ede:	2b65      	cmp	r3, #101	; 0x65
 8004ee0:	d07a      	beq.n	8004fd8 <_scanf_float+0x1f0>
 8004ee2:	d818      	bhi.n	8004f16 <_scanf_float+0x12e>
 8004ee4:	2b54      	cmp	r3, #84	; 0x54
 8004ee6:	d066      	beq.n	8004fb6 <_scanf_float+0x1ce>
 8004ee8:	d811      	bhi.n	8004f0e <_scanf_float+0x126>
 8004eea:	2b4e      	cmp	r3, #78	; 0x4e
 8004eec:	d1b5      	bne.n	8004e5a <_scanf_float+0x72>
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	d146      	bne.n	8004f80 <_scanf_float+0x198>
 8004ef2:	f1b9 0f00 	cmp.w	r9, #0
 8004ef6:	d145      	bne.n	8004f84 <_scanf_float+0x19c>
 8004ef8:	6821      	ldr	r1, [r4, #0]
 8004efa:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004efe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004f02:	d13f      	bne.n	8004f84 <_scanf_float+0x19c>
 8004f04:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f08:	6021      	str	r1, [r4, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	e02e      	b.n	8004f6c <_scanf_float+0x184>
 8004f0e:	2b59      	cmp	r3, #89	; 0x59
 8004f10:	d01e      	beq.n	8004f50 <_scanf_float+0x168>
 8004f12:	2b61      	cmp	r3, #97	; 0x61
 8004f14:	e7de      	b.n	8004ed4 <_scanf_float+0xec>
 8004f16:	2b6e      	cmp	r3, #110	; 0x6e
 8004f18:	d0e9      	beq.n	8004eee <_scanf_float+0x106>
 8004f1a:	d815      	bhi.n	8004f48 <_scanf_float+0x160>
 8004f1c:	2b66      	cmp	r3, #102	; 0x66
 8004f1e:	d043      	beq.n	8004fa8 <_scanf_float+0x1c0>
 8004f20:	2b69      	cmp	r3, #105	; 0x69
 8004f22:	d19a      	bne.n	8004e5a <_scanf_float+0x72>
 8004f24:	f1bb 0f00 	cmp.w	fp, #0
 8004f28:	d138      	bne.n	8004f9c <_scanf_float+0x1b4>
 8004f2a:	f1b9 0f00 	cmp.w	r9, #0
 8004f2e:	d197      	bne.n	8004e60 <_scanf_float+0x78>
 8004f30:	6821      	ldr	r1, [r4, #0]
 8004f32:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004f36:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004f3a:	d195      	bne.n	8004e68 <_scanf_float+0x80>
 8004f3c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f40:	6021      	str	r1, [r4, #0]
 8004f42:	f04f 0b01 	mov.w	fp, #1
 8004f46:	e011      	b.n	8004f6c <_scanf_float+0x184>
 8004f48:	2b74      	cmp	r3, #116	; 0x74
 8004f4a:	d034      	beq.n	8004fb6 <_scanf_float+0x1ce>
 8004f4c:	2b79      	cmp	r3, #121	; 0x79
 8004f4e:	d184      	bne.n	8004e5a <_scanf_float+0x72>
 8004f50:	f1bb 0f07 	cmp.w	fp, #7
 8004f54:	d181      	bne.n	8004e5a <_scanf_float+0x72>
 8004f56:	f04f 0b08 	mov.w	fp, #8
 8004f5a:	e007      	b.n	8004f6c <_scanf_float+0x184>
 8004f5c:	eb12 0f0b 	cmn.w	r2, fp
 8004f60:	f47f af7b 	bne.w	8004e5a <_scanf_float+0x72>
 8004f64:	6821      	ldr	r1, [r4, #0]
 8004f66:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004f6a:	6021      	str	r1, [r4, #0]
 8004f6c:	702b      	strb	r3, [r5, #0]
 8004f6e:	3501      	adds	r5, #1
 8004f70:	e79a      	b.n	8004ea8 <_scanf_float+0xc0>
 8004f72:	6821      	ldr	r1, [r4, #0]
 8004f74:	0608      	lsls	r0, r1, #24
 8004f76:	f57f af70 	bpl.w	8004e5a <_scanf_float+0x72>
 8004f7a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f7e:	e7f4      	b.n	8004f6a <_scanf_float+0x182>
 8004f80:	2a02      	cmp	r2, #2
 8004f82:	d047      	beq.n	8005014 <_scanf_float+0x22c>
 8004f84:	f1bb 0f01 	cmp.w	fp, #1
 8004f88:	d003      	beq.n	8004f92 <_scanf_float+0x1aa>
 8004f8a:	f1bb 0f04 	cmp.w	fp, #4
 8004f8e:	f47f af64 	bne.w	8004e5a <_scanf_float+0x72>
 8004f92:	f10b 0b01 	add.w	fp, fp, #1
 8004f96:	fa5f fb8b 	uxtb.w	fp, fp
 8004f9a:	e7e7      	b.n	8004f6c <_scanf_float+0x184>
 8004f9c:	f1bb 0f03 	cmp.w	fp, #3
 8004fa0:	d0f7      	beq.n	8004f92 <_scanf_float+0x1aa>
 8004fa2:	f1bb 0f05 	cmp.w	fp, #5
 8004fa6:	e7f2      	b.n	8004f8e <_scanf_float+0x1a6>
 8004fa8:	f1bb 0f02 	cmp.w	fp, #2
 8004fac:	f47f af55 	bne.w	8004e5a <_scanf_float+0x72>
 8004fb0:	f04f 0b03 	mov.w	fp, #3
 8004fb4:	e7da      	b.n	8004f6c <_scanf_float+0x184>
 8004fb6:	f1bb 0f06 	cmp.w	fp, #6
 8004fba:	f47f af4e 	bne.w	8004e5a <_scanf_float+0x72>
 8004fbe:	f04f 0b07 	mov.w	fp, #7
 8004fc2:	e7d3      	b.n	8004f6c <_scanf_float+0x184>
 8004fc4:	6821      	ldr	r1, [r4, #0]
 8004fc6:	0588      	lsls	r0, r1, #22
 8004fc8:	f57f af47 	bpl.w	8004e5a <_scanf_float+0x72>
 8004fcc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004fd0:	6021      	str	r1, [r4, #0]
 8004fd2:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fd6:	e7c9      	b.n	8004f6c <_scanf_float+0x184>
 8004fd8:	6821      	ldr	r1, [r4, #0]
 8004fda:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004fde:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004fe2:	d006      	beq.n	8004ff2 <_scanf_float+0x20a>
 8004fe4:	0548      	lsls	r0, r1, #21
 8004fe6:	f57f af38 	bpl.w	8004e5a <_scanf_float+0x72>
 8004fea:	f1b9 0f00 	cmp.w	r9, #0
 8004fee:	f43f af3b 	beq.w	8004e68 <_scanf_float+0x80>
 8004ff2:	0588      	lsls	r0, r1, #22
 8004ff4:	bf58      	it	pl
 8004ff6:	9802      	ldrpl	r0, [sp, #8]
 8004ff8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004ffc:	bf58      	it	pl
 8004ffe:	eba9 0000 	subpl.w	r0, r9, r0
 8005002:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005006:	bf58      	it	pl
 8005008:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800500c:	6021      	str	r1, [r4, #0]
 800500e:	f04f 0900 	mov.w	r9, #0
 8005012:	e7ab      	b.n	8004f6c <_scanf_float+0x184>
 8005014:	2203      	movs	r2, #3
 8005016:	e7a9      	b.n	8004f6c <_scanf_float+0x184>
 8005018:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800501c:	4631      	mov	r1, r6
 800501e:	4638      	mov	r0, r7
 8005020:	9205      	str	r2, [sp, #20]
 8005022:	4798      	blx	r3
 8005024:	9a05      	ldr	r2, [sp, #20]
 8005026:	2800      	cmp	r0, #0
 8005028:	f43f af04 	beq.w	8004e34 <_scanf_float+0x4c>
 800502c:	e715      	b.n	8004e5a <_scanf_float+0x72>
 800502e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005032:	4632      	mov	r2, r6
 8005034:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005038:	4638      	mov	r0, r7
 800503a:	4798      	blx	r3
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	3b01      	subs	r3, #1
 8005040:	6123      	str	r3, [r4, #16]
 8005042:	e715      	b.n	8004e70 <_scanf_float+0x88>
 8005044:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005048:	2b06      	cmp	r3, #6
 800504a:	d80a      	bhi.n	8005062 <_scanf_float+0x27a>
 800504c:	f1bb 0f02 	cmp.w	fp, #2
 8005050:	d967      	bls.n	8005122 <_scanf_float+0x33a>
 8005052:	f1ab 0b03 	sub.w	fp, fp, #3
 8005056:	fa5f fb8b 	uxtb.w	fp, fp
 800505a:	eba5 0b0b 	sub.w	fp, r5, fp
 800505e:	455d      	cmp	r5, fp
 8005060:	d14a      	bne.n	80050f8 <_scanf_float+0x310>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	05da      	lsls	r2, r3, #23
 8005066:	d51f      	bpl.n	80050a8 <_scanf_float+0x2c0>
 8005068:	055b      	lsls	r3, r3, #21
 800506a:	d467      	bmi.n	800513c <_scanf_float+0x354>
 800506c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005070:	6923      	ldr	r3, [r4, #16]
 8005072:	2965      	cmp	r1, #101	; 0x65
 8005074:	f103 33ff 	add.w	r3, r3, #4294967295
 8005078:	f105 3bff 	add.w	fp, r5, #4294967295
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	d00d      	beq.n	800509c <_scanf_float+0x2b4>
 8005080:	2945      	cmp	r1, #69	; 0x45
 8005082:	d00b      	beq.n	800509c <_scanf_float+0x2b4>
 8005084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005088:	4632      	mov	r2, r6
 800508a:	4638      	mov	r0, r7
 800508c:	4798      	blx	r3
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005094:	3b01      	subs	r3, #1
 8005096:	f1a5 0b02 	sub.w	fp, r5, #2
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050a0:	4632      	mov	r2, r6
 80050a2:	4638      	mov	r0, r7
 80050a4:	4798      	blx	r3
 80050a6:	465d      	mov	r5, fp
 80050a8:	6826      	ldr	r6, [r4, #0]
 80050aa:	f016 0610 	ands.w	r6, r6, #16
 80050ae:	d176      	bne.n	800519e <_scanf_float+0x3b6>
 80050b0:	702e      	strb	r6, [r5, #0]
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d141      	bne.n	8005142 <_scanf_float+0x35a>
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	eba9 0303 	sub.w	r3, r9, r3
 80050c4:	425a      	negs	r2, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d148      	bne.n	800515c <_scanf_float+0x374>
 80050ca:	4641      	mov	r1, r8
 80050cc:	2200      	movs	r2, #0
 80050ce:	4638      	mov	r0, r7
 80050d0:	f000 feb2 	bl	8005e38 <_strtod_r>
 80050d4:	6825      	ldr	r5, [r4, #0]
 80050d6:	4680      	mov	r8, r0
 80050d8:	f015 0f02 	tst.w	r5, #2
 80050dc:	4689      	mov	r9, r1
 80050de:	f8da 3000 	ldr.w	r3, [sl]
 80050e2:	d046      	beq.n	8005172 <_scanf_float+0x38a>
 80050e4:	1d1a      	adds	r2, r3, #4
 80050e6:	f8ca 2000 	str.w	r2, [sl]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	e9c3 8900 	strd	r8, r9, [r3]
 80050f0:	68e3      	ldr	r3, [r4, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60e3      	str	r3, [r4, #12]
 80050f6:	e6bf      	b.n	8004e78 <_scanf_float+0x90>
 80050f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050fc:	4632      	mov	r2, r6
 80050fe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005102:	4638      	mov	r0, r7
 8005104:	4798      	blx	r3
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	3b01      	subs	r3, #1
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	e7a7      	b.n	800505e <_scanf_float+0x276>
 800510e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005112:	4632      	mov	r2, r6
 8005114:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005118:	4638      	mov	r0, r7
 800511a:	4798      	blx	r3
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	3b01      	subs	r3, #1
 8005120:	6123      	str	r3, [r4, #16]
 8005122:	4545      	cmp	r5, r8
 8005124:	d8f3      	bhi.n	800510e <_scanf_float+0x326>
 8005126:	e6a6      	b.n	8004e76 <_scanf_float+0x8e>
 8005128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800512c:	4632      	mov	r2, r6
 800512e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005132:	4638      	mov	r0, r7
 8005134:	4798      	blx	r3
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	3b01      	subs	r3, #1
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	4545      	cmp	r5, r8
 800513e:	d8f3      	bhi.n	8005128 <_scanf_float+0x340>
 8005140:	e699      	b.n	8004e76 <_scanf_float+0x8e>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0c0      	beq.n	80050ca <_scanf_float+0x2e2>
 8005148:	9904      	ldr	r1, [sp, #16]
 800514a:	230a      	movs	r3, #10
 800514c:	4632      	mov	r2, r6
 800514e:	3101      	adds	r1, #1
 8005150:	4638      	mov	r0, r7
 8005152:	f000 fefd 	bl	8005f50 <_strtol_r>
 8005156:	9b03      	ldr	r3, [sp, #12]
 8005158:	9d04      	ldr	r5, [sp, #16]
 800515a:	1ac2      	subs	r2, r0, r3
 800515c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005160:	429d      	cmp	r5, r3
 8005162:	bf28      	it	cs
 8005164:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005168:	490e      	ldr	r1, [pc, #56]	; (80051a4 <_scanf_float+0x3bc>)
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f820 	bl	80051b0 <siprintf>
 8005170:	e7ab      	b.n	80050ca <_scanf_float+0x2e2>
 8005172:	1d1f      	adds	r7, r3, #4
 8005174:	f015 0504 	ands.w	r5, r5, #4
 8005178:	f8ca 7000 	str.w	r7, [sl]
 800517c:	d1b5      	bne.n	80050ea <_scanf_float+0x302>
 800517e:	681f      	ldr	r7, [r3, #0]
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	f7fb fc42 	bl	8000a0c <__aeabi_dcmpun>
 8005188:	b120      	cbz	r0, 8005194 <_scanf_float+0x3ac>
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f80c 	bl	80051a8 <nanf>
 8005190:	6038      	str	r0, [r7, #0]
 8005192:	e7ad      	b.n	80050f0 <_scanf_float+0x308>
 8005194:	4640      	mov	r0, r8
 8005196:	4649      	mov	r1, r9
 8005198:	f7fb fc96 	bl	8000ac8 <__aeabi_d2f>
 800519c:	e7f8      	b.n	8005190 <_scanf_float+0x3a8>
 800519e:	2600      	movs	r6, #0
 80051a0:	e66a      	b.n	8004e78 <_scanf_float+0x90>
 80051a2:	bf00      	nop
 80051a4:	080080dc 	.word	0x080080dc

080051a8 <nanf>:
 80051a8:	4800      	ldr	r0, [pc, #0]	; (80051ac <nanf+0x4>)
 80051aa:	4770      	bx	lr
 80051ac:	7fc00000 	.word	0x7fc00000

080051b0 <siprintf>:
 80051b0:	b40e      	push	{r1, r2, r3}
 80051b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051b6:	b500      	push	{lr}
 80051b8:	b09c      	sub	sp, #112	; 0x70
 80051ba:	ab1d      	add	r3, sp, #116	; 0x74
 80051bc:	9002      	str	r0, [sp, #8]
 80051be:	9006      	str	r0, [sp, #24]
 80051c0:	9107      	str	r1, [sp, #28]
 80051c2:	9104      	str	r1, [sp, #16]
 80051c4:	4808      	ldr	r0, [pc, #32]	; (80051e8 <siprintf+0x38>)
 80051c6:	4909      	ldr	r1, [pc, #36]	; (80051ec <siprintf+0x3c>)
 80051c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051cc:	9105      	str	r1, [sp, #20]
 80051ce:	6800      	ldr	r0, [r0, #0]
 80051d0:	a902      	add	r1, sp, #8
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	f002 fd86 	bl	8007ce4 <_svfiprintf_r>
 80051d8:	2200      	movs	r2, #0
 80051da:	9b02      	ldr	r3, [sp, #8]
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	b01c      	add	sp, #112	; 0x70
 80051e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e4:	b003      	add	sp, #12
 80051e6:	4770      	bx	lr
 80051e8:	2000000c 	.word	0x2000000c
 80051ec:	ffff0208 	.word	0xffff0208

080051f0 <sulp>:
 80051f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	460f      	mov	r7, r1
 80051f6:	4690      	mov	r8, r2
 80051f8:	f002 fb38 	bl	800786c <__ulp>
 80051fc:	4604      	mov	r4, r0
 80051fe:	460d      	mov	r5, r1
 8005200:	f1b8 0f00 	cmp.w	r8, #0
 8005204:	d011      	beq.n	800522a <sulp+0x3a>
 8005206:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800520a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800520e:	2b00      	cmp	r3, #0
 8005210:	dd0b      	ble.n	800522a <sulp+0x3a>
 8005212:	2400      	movs	r4, #0
 8005214:	051b      	lsls	r3, r3, #20
 8005216:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800521a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	f7fb f959 	bl	80004d8 <__aeabi_dmul>
 8005226:	4604      	mov	r4, r0
 8005228:	460d      	mov	r5, r1
 800522a:	4620      	mov	r0, r4
 800522c:	4629      	mov	r1, r5
 800522e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005232:	0000      	movs	r0, r0
 8005234:	0000      	movs	r0, r0
	...

08005238 <_strtod_l>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	461f      	mov	r7, r3
 800523e:	2300      	movs	r3, #0
 8005240:	b0a1      	sub	sp, #132	; 0x84
 8005242:	4683      	mov	fp, r0
 8005244:	4638      	mov	r0, r7
 8005246:	460e      	mov	r6, r1
 8005248:	9217      	str	r2, [sp, #92]	; 0x5c
 800524a:	931c      	str	r3, [sp, #112]	; 0x70
 800524c:	f001 ffff 	bl	800724e <__localeconv_l>
 8005250:	4680      	mov	r8, r0
 8005252:	6800      	ldr	r0, [r0, #0]
 8005254:	f7fa ff7c 	bl	8000150 <strlen>
 8005258:	f04f 0900 	mov.w	r9, #0
 800525c:	4604      	mov	r4, r0
 800525e:	f04f 0a00 	mov.w	sl, #0
 8005262:	961b      	str	r6, [sp, #108]	; 0x6c
 8005264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	2a0d      	cmp	r2, #13
 800526a:	d832      	bhi.n	80052d2 <_strtod_l+0x9a>
 800526c:	2a09      	cmp	r2, #9
 800526e:	d236      	bcs.n	80052de <_strtod_l+0xa6>
 8005270:	2a00      	cmp	r2, #0
 8005272:	d03e      	beq.n	80052f2 <_strtod_l+0xba>
 8005274:	2300      	movs	r3, #0
 8005276:	930d      	str	r3, [sp, #52]	; 0x34
 8005278:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800527a:	782b      	ldrb	r3, [r5, #0]
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	f040 80ac 	bne.w	80053da <_strtod_l+0x1a2>
 8005282:	786b      	ldrb	r3, [r5, #1]
 8005284:	2b58      	cmp	r3, #88	; 0x58
 8005286:	d001      	beq.n	800528c <_strtod_l+0x54>
 8005288:	2b78      	cmp	r3, #120	; 0x78
 800528a:	d167      	bne.n	800535c <_strtod_l+0x124>
 800528c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800528e:	9702      	str	r7, [sp, #8]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	ab1c      	add	r3, sp, #112	; 0x70
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4a89      	ldr	r2, [pc, #548]	; (80054bc <_strtod_l+0x284>)
 8005298:	ab1d      	add	r3, sp, #116	; 0x74
 800529a:	a91b      	add	r1, sp, #108	; 0x6c
 800529c:	4658      	mov	r0, fp
 800529e:	f001 fcfb 	bl	8006c98 <__gethex>
 80052a2:	f010 0407 	ands.w	r4, r0, #7
 80052a6:	4606      	mov	r6, r0
 80052a8:	d005      	beq.n	80052b6 <_strtod_l+0x7e>
 80052aa:	2c06      	cmp	r4, #6
 80052ac:	d12b      	bne.n	8005306 <_strtod_l+0xce>
 80052ae:	2300      	movs	r3, #0
 80052b0:	3501      	adds	r5, #1
 80052b2:	951b      	str	r5, [sp, #108]	; 0x6c
 80052b4:	930d      	str	r3, [sp, #52]	; 0x34
 80052b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 85a6 	bne.w	8005e0a <_strtod_l+0xbd2>
 80052be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052c0:	b1e3      	cbz	r3, 80052fc <_strtod_l+0xc4>
 80052c2:	464a      	mov	r2, r9
 80052c4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	b021      	add	sp, #132	; 0x84
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	2a2b      	cmp	r2, #43	; 0x2b
 80052d4:	d015      	beq.n	8005302 <_strtod_l+0xca>
 80052d6:	2a2d      	cmp	r2, #45	; 0x2d
 80052d8:	d004      	beq.n	80052e4 <_strtod_l+0xac>
 80052da:	2a20      	cmp	r2, #32
 80052dc:	d1ca      	bne.n	8005274 <_strtod_l+0x3c>
 80052de:	3301      	adds	r3, #1
 80052e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80052e2:	e7bf      	b.n	8005264 <_strtod_l+0x2c>
 80052e4:	2201      	movs	r2, #1
 80052e6:	920d      	str	r2, [sp, #52]	; 0x34
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1c2      	bne.n	8005278 <_strtod_l+0x40>
 80052f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 8585 	bne.w	8005e06 <_strtod_l+0xbce>
 80052fc:	464a      	mov	r2, r9
 80052fe:	4653      	mov	r3, sl
 8005300:	e7e2      	b.n	80052c8 <_strtod_l+0x90>
 8005302:	2200      	movs	r2, #0
 8005304:	e7ef      	b.n	80052e6 <_strtod_l+0xae>
 8005306:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005308:	b13a      	cbz	r2, 800531a <_strtod_l+0xe2>
 800530a:	2135      	movs	r1, #53	; 0x35
 800530c:	a81e      	add	r0, sp, #120	; 0x78
 800530e:	f002 fba0 	bl	8007a52 <__copybits>
 8005312:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005314:	4658      	mov	r0, fp
 8005316:	f002 f812 	bl	800733e <_Bfree>
 800531a:	3c01      	subs	r4, #1
 800531c:	2c04      	cmp	r4, #4
 800531e:	d806      	bhi.n	800532e <_strtod_l+0xf6>
 8005320:	e8df f004 	tbb	[pc, r4]
 8005324:	1714030a 	.word	0x1714030a
 8005328:	0a          	.byte	0x0a
 8005329:	00          	.byte	0x00
 800532a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800532e:	0731      	lsls	r1, r6, #28
 8005330:	d5c1      	bpl.n	80052b6 <_strtod_l+0x7e>
 8005332:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005336:	e7be      	b.n	80052b6 <_strtod_l+0x7e>
 8005338:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800533a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800533e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005346:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800534a:	e7f0      	b.n	800532e <_strtod_l+0xf6>
 800534c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80054c0 <_strtod_l+0x288>
 8005350:	e7ed      	b.n	800532e <_strtod_l+0xf6>
 8005352:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005356:	f04f 39ff 	mov.w	r9, #4294967295
 800535a:	e7e8      	b.n	800532e <_strtod_l+0xf6>
 800535c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	921b      	str	r2, [sp, #108]	; 0x6c
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b30      	cmp	r3, #48	; 0x30
 8005366:	d0f9      	beq.n	800535c <_strtod_l+0x124>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0a4      	beq.n	80052b6 <_strtod_l+0x7e>
 800536c:	2301      	movs	r3, #1
 800536e:	2500      	movs	r5, #0
 8005370:	220a      	movs	r2, #10
 8005372:	9307      	str	r3, [sp, #28]
 8005374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005376:	9506      	str	r5, [sp, #24]
 8005378:	9308      	str	r3, [sp, #32]
 800537a:	9504      	str	r5, [sp, #16]
 800537c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800537e:	7807      	ldrb	r7, [r0, #0]
 8005380:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005384:	b2d9      	uxtb	r1, r3
 8005386:	2909      	cmp	r1, #9
 8005388:	d929      	bls.n	80053de <_strtod_l+0x1a6>
 800538a:	4622      	mov	r2, r4
 800538c:	f8d8 1000 	ldr.w	r1, [r8]
 8005390:	f002 fdb0 	bl	8007ef4 <strncmp>
 8005394:	2800      	cmp	r0, #0
 8005396:	d031      	beq.n	80053fc <_strtod_l+0x1c4>
 8005398:	2000      	movs	r0, #0
 800539a:	463b      	mov	r3, r7
 800539c:	4602      	mov	r2, r0
 800539e:	9c04      	ldr	r4, [sp, #16]
 80053a0:	9005      	str	r0, [sp, #20]
 80053a2:	2b65      	cmp	r3, #101	; 0x65
 80053a4:	d001      	beq.n	80053aa <_strtod_l+0x172>
 80053a6:	2b45      	cmp	r3, #69	; 0x45
 80053a8:	d114      	bne.n	80053d4 <_strtod_l+0x19c>
 80053aa:	b924      	cbnz	r4, 80053b6 <_strtod_l+0x17e>
 80053ac:	b910      	cbnz	r0, 80053b4 <_strtod_l+0x17c>
 80053ae:	9b07      	ldr	r3, [sp, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d09e      	beq.n	80052f2 <_strtod_l+0xba>
 80053b4:	2400      	movs	r4, #0
 80053b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80053b8:	1c73      	adds	r3, r6, #1
 80053ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80053bc:	7873      	ldrb	r3, [r6, #1]
 80053be:	2b2b      	cmp	r3, #43	; 0x2b
 80053c0:	d078      	beq.n	80054b4 <_strtod_l+0x27c>
 80053c2:	2b2d      	cmp	r3, #45	; 0x2d
 80053c4:	d070      	beq.n	80054a8 <_strtod_l+0x270>
 80053c6:	f04f 0c00 	mov.w	ip, #0
 80053ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80053ce:	2f09      	cmp	r7, #9
 80053d0:	d97c      	bls.n	80054cc <_strtod_l+0x294>
 80053d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80053d4:	f04f 0e00 	mov.w	lr, #0
 80053d8:	e09a      	b.n	8005510 <_strtod_l+0x2d8>
 80053da:	2300      	movs	r3, #0
 80053dc:	e7c7      	b.n	800536e <_strtod_l+0x136>
 80053de:	9904      	ldr	r1, [sp, #16]
 80053e0:	3001      	adds	r0, #1
 80053e2:	2908      	cmp	r1, #8
 80053e4:	bfd7      	itett	le
 80053e6:	9906      	ldrle	r1, [sp, #24]
 80053e8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80053ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80053f0:	9306      	strle	r3, [sp, #24]
 80053f2:	9b04      	ldr	r3, [sp, #16]
 80053f4:	901b      	str	r0, [sp, #108]	; 0x6c
 80053f6:	3301      	adds	r3, #1
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	e7bf      	b.n	800537c <_strtod_l+0x144>
 80053fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053fe:	191a      	adds	r2, r3, r4
 8005400:	921b      	str	r2, [sp, #108]	; 0x6c
 8005402:	9a04      	ldr	r2, [sp, #16]
 8005404:	5d1b      	ldrb	r3, [r3, r4]
 8005406:	2a00      	cmp	r2, #0
 8005408:	d037      	beq.n	800547a <_strtod_l+0x242>
 800540a:	4602      	mov	r2, r0
 800540c:	9c04      	ldr	r4, [sp, #16]
 800540e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005412:	2909      	cmp	r1, #9
 8005414:	d913      	bls.n	800543e <_strtod_l+0x206>
 8005416:	2101      	movs	r1, #1
 8005418:	9105      	str	r1, [sp, #20]
 800541a:	e7c2      	b.n	80053a2 <_strtod_l+0x16a>
 800541c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800541e:	3001      	adds	r0, #1
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	921b      	str	r2, [sp, #108]	; 0x6c
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b30      	cmp	r3, #48	; 0x30
 8005428:	d0f8      	beq.n	800541c <_strtod_l+0x1e4>
 800542a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800542e:	2a08      	cmp	r2, #8
 8005430:	f200 84f0 	bhi.w	8005e14 <_strtod_l+0xbdc>
 8005434:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005436:	9208      	str	r2, [sp, #32]
 8005438:	4602      	mov	r2, r0
 800543a:	2000      	movs	r0, #0
 800543c:	4604      	mov	r4, r0
 800543e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005442:	f100 0101 	add.w	r1, r0, #1
 8005446:	d012      	beq.n	800546e <_strtod_l+0x236>
 8005448:	440a      	add	r2, r1
 800544a:	270a      	movs	r7, #10
 800544c:	4621      	mov	r1, r4
 800544e:	eb00 0c04 	add.w	ip, r0, r4
 8005452:	458c      	cmp	ip, r1
 8005454:	d113      	bne.n	800547e <_strtod_l+0x246>
 8005456:	1821      	adds	r1, r4, r0
 8005458:	2908      	cmp	r1, #8
 800545a:	f104 0401 	add.w	r4, r4, #1
 800545e:	4404      	add	r4, r0
 8005460:	dc19      	bgt.n	8005496 <_strtod_l+0x25e>
 8005462:	210a      	movs	r1, #10
 8005464:	9b06      	ldr	r3, [sp, #24]
 8005466:	fb01 e303 	mla	r3, r1, r3, lr
 800546a:	9306      	str	r3, [sp, #24]
 800546c:	2100      	movs	r1, #0
 800546e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005470:	1c58      	adds	r0, r3, #1
 8005472:	901b      	str	r0, [sp, #108]	; 0x6c
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	4608      	mov	r0, r1
 8005478:	e7c9      	b.n	800540e <_strtod_l+0x1d6>
 800547a:	9804      	ldr	r0, [sp, #16]
 800547c:	e7d3      	b.n	8005426 <_strtod_l+0x1ee>
 800547e:	2908      	cmp	r1, #8
 8005480:	f101 0101 	add.w	r1, r1, #1
 8005484:	dc03      	bgt.n	800548e <_strtod_l+0x256>
 8005486:	9b06      	ldr	r3, [sp, #24]
 8005488:	437b      	muls	r3, r7
 800548a:	9306      	str	r3, [sp, #24]
 800548c:	e7e1      	b.n	8005452 <_strtod_l+0x21a>
 800548e:	2910      	cmp	r1, #16
 8005490:	bfd8      	it	le
 8005492:	437d      	mulle	r5, r7
 8005494:	e7dd      	b.n	8005452 <_strtod_l+0x21a>
 8005496:	2c10      	cmp	r4, #16
 8005498:	bfdc      	itt	le
 800549a:	210a      	movle	r1, #10
 800549c:	fb01 e505 	mlale	r5, r1, r5, lr
 80054a0:	e7e4      	b.n	800546c <_strtod_l+0x234>
 80054a2:	2301      	movs	r3, #1
 80054a4:	9305      	str	r3, [sp, #20]
 80054a6:	e781      	b.n	80053ac <_strtod_l+0x174>
 80054a8:	f04f 0c01 	mov.w	ip, #1
 80054ac:	1cb3      	adds	r3, r6, #2
 80054ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80054b0:	78b3      	ldrb	r3, [r6, #2]
 80054b2:	e78a      	b.n	80053ca <_strtod_l+0x192>
 80054b4:	f04f 0c00 	mov.w	ip, #0
 80054b8:	e7f8      	b.n	80054ac <_strtod_l+0x274>
 80054ba:	bf00      	nop
 80054bc:	080080e4 	.word	0x080080e4
 80054c0:	7ff00000 	.word	0x7ff00000
 80054c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054c6:	1c5f      	adds	r7, r3, #1
 80054c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b30      	cmp	r3, #48	; 0x30
 80054ce:	d0f9      	beq.n	80054c4 <_strtod_l+0x28c>
 80054d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80054d4:	2f08      	cmp	r7, #8
 80054d6:	f63f af7d 	bhi.w	80053d4 <_strtod_l+0x19c>
 80054da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80054de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054e0:	9309      	str	r3, [sp, #36]	; 0x24
 80054e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054e4:	1c5f      	adds	r7, r3, #1
 80054e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80054ee:	f1b8 0f09 	cmp.w	r8, #9
 80054f2:	d937      	bls.n	8005564 <_strtod_l+0x32c>
 80054f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054f6:	1a7f      	subs	r7, r7, r1
 80054f8:	2f08      	cmp	r7, #8
 80054fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80054fe:	dc37      	bgt.n	8005570 <_strtod_l+0x338>
 8005500:	45be      	cmp	lr, r7
 8005502:	bfa8      	it	ge
 8005504:	46be      	movge	lr, r7
 8005506:	f1bc 0f00 	cmp.w	ip, #0
 800550a:	d001      	beq.n	8005510 <_strtod_l+0x2d8>
 800550c:	f1ce 0e00 	rsb	lr, lr, #0
 8005510:	2c00      	cmp	r4, #0
 8005512:	d151      	bne.n	80055b8 <_strtod_l+0x380>
 8005514:	2800      	cmp	r0, #0
 8005516:	f47f aece 	bne.w	80052b6 <_strtod_l+0x7e>
 800551a:	9a07      	ldr	r2, [sp, #28]
 800551c:	2a00      	cmp	r2, #0
 800551e:	f47f aeca 	bne.w	80052b6 <_strtod_l+0x7e>
 8005522:	9a05      	ldr	r2, [sp, #20]
 8005524:	2a00      	cmp	r2, #0
 8005526:	f47f aee4 	bne.w	80052f2 <_strtod_l+0xba>
 800552a:	2b4e      	cmp	r3, #78	; 0x4e
 800552c:	d027      	beq.n	800557e <_strtod_l+0x346>
 800552e:	dc21      	bgt.n	8005574 <_strtod_l+0x33c>
 8005530:	2b49      	cmp	r3, #73	; 0x49
 8005532:	f47f aede 	bne.w	80052f2 <_strtod_l+0xba>
 8005536:	49a4      	ldr	r1, [pc, #656]	; (80057c8 <_strtod_l+0x590>)
 8005538:	a81b      	add	r0, sp, #108	; 0x6c
 800553a:	f001 fde1 	bl	8007100 <__match>
 800553e:	2800      	cmp	r0, #0
 8005540:	f43f aed7 	beq.w	80052f2 <_strtod_l+0xba>
 8005544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005546:	49a1      	ldr	r1, [pc, #644]	; (80057cc <_strtod_l+0x594>)
 8005548:	3b01      	subs	r3, #1
 800554a:	a81b      	add	r0, sp, #108	; 0x6c
 800554c:	931b      	str	r3, [sp, #108]	; 0x6c
 800554e:	f001 fdd7 	bl	8007100 <__match>
 8005552:	b910      	cbnz	r0, 800555a <_strtod_l+0x322>
 8005554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005556:	3301      	adds	r3, #1
 8005558:	931b      	str	r3, [sp, #108]	; 0x6c
 800555a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80057e0 <_strtod_l+0x5a8>
 800555e:	f04f 0900 	mov.w	r9, #0
 8005562:	e6a8      	b.n	80052b6 <_strtod_l+0x7e>
 8005564:	210a      	movs	r1, #10
 8005566:	fb01 3e0e 	mla	lr, r1, lr, r3
 800556a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800556e:	e7b8      	b.n	80054e2 <_strtod_l+0x2aa>
 8005570:	46be      	mov	lr, r7
 8005572:	e7c8      	b.n	8005506 <_strtod_l+0x2ce>
 8005574:	2b69      	cmp	r3, #105	; 0x69
 8005576:	d0de      	beq.n	8005536 <_strtod_l+0x2fe>
 8005578:	2b6e      	cmp	r3, #110	; 0x6e
 800557a:	f47f aeba 	bne.w	80052f2 <_strtod_l+0xba>
 800557e:	4994      	ldr	r1, [pc, #592]	; (80057d0 <_strtod_l+0x598>)
 8005580:	a81b      	add	r0, sp, #108	; 0x6c
 8005582:	f001 fdbd 	bl	8007100 <__match>
 8005586:	2800      	cmp	r0, #0
 8005588:	f43f aeb3 	beq.w	80052f2 <_strtod_l+0xba>
 800558c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b28      	cmp	r3, #40	; 0x28
 8005592:	d10e      	bne.n	80055b2 <_strtod_l+0x37a>
 8005594:	aa1e      	add	r2, sp, #120	; 0x78
 8005596:	498f      	ldr	r1, [pc, #572]	; (80057d4 <_strtod_l+0x59c>)
 8005598:	a81b      	add	r0, sp, #108	; 0x6c
 800559a:	f001 fdc5 	bl	8007128 <__hexnan>
 800559e:	2805      	cmp	r0, #5
 80055a0:	d107      	bne.n	80055b2 <_strtod_l+0x37a>
 80055a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80055a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80055ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80055b0:	e681      	b.n	80052b6 <_strtod_l+0x7e>
 80055b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80057e8 <_strtod_l+0x5b0>
 80055b6:	e7d2      	b.n	800555e <_strtod_l+0x326>
 80055b8:	ebae 0302 	sub.w	r3, lr, r2
 80055bc:	9307      	str	r3, [sp, #28]
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	9806      	ldr	r0, [sp, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf08      	it	eq
 80055c6:	4623      	moveq	r3, r4
 80055c8:	2c10      	cmp	r4, #16
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	46a0      	mov	r8, r4
 80055ce:	bfa8      	it	ge
 80055d0:	f04f 0810 	movge.w	r8, #16
 80055d4:	f7fa ff06 	bl	80003e4 <__aeabi_ui2d>
 80055d8:	2c09      	cmp	r4, #9
 80055da:	4681      	mov	r9, r0
 80055dc:	468a      	mov	sl, r1
 80055de:	dc13      	bgt.n	8005608 <_strtod_l+0x3d0>
 80055e0:	9b07      	ldr	r3, [sp, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f43f ae67 	beq.w	80052b6 <_strtod_l+0x7e>
 80055e8:	9b07      	ldr	r3, [sp, #28]
 80055ea:	dd7e      	ble.n	80056ea <_strtod_l+0x4b2>
 80055ec:	2b16      	cmp	r3, #22
 80055ee:	dc65      	bgt.n	80056bc <_strtod_l+0x484>
 80055f0:	4a79      	ldr	r2, [pc, #484]	; (80057d8 <_strtod_l+0x5a0>)
 80055f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80055f6:	464a      	mov	r2, r9
 80055f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80055fc:	4653      	mov	r3, sl
 80055fe:	f7fa ff6b 	bl	80004d8 <__aeabi_dmul>
 8005602:	4681      	mov	r9, r0
 8005604:	468a      	mov	sl, r1
 8005606:	e656      	b.n	80052b6 <_strtod_l+0x7e>
 8005608:	4b73      	ldr	r3, [pc, #460]	; (80057d8 <_strtod_l+0x5a0>)
 800560a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800560e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005612:	f7fa ff61 	bl	80004d8 <__aeabi_dmul>
 8005616:	4606      	mov	r6, r0
 8005618:	4628      	mov	r0, r5
 800561a:	460f      	mov	r7, r1
 800561c:	f7fa fee2 	bl	80003e4 <__aeabi_ui2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4630      	mov	r0, r6
 8005626:	4639      	mov	r1, r7
 8005628:	f7fa fda0 	bl	800016c <__adddf3>
 800562c:	2c0f      	cmp	r4, #15
 800562e:	4681      	mov	r9, r0
 8005630:	468a      	mov	sl, r1
 8005632:	ddd5      	ble.n	80055e0 <_strtod_l+0x3a8>
 8005634:	9b07      	ldr	r3, [sp, #28]
 8005636:	eba4 0808 	sub.w	r8, r4, r8
 800563a:	4498      	add	r8, r3
 800563c:	f1b8 0f00 	cmp.w	r8, #0
 8005640:	f340 809a 	ble.w	8005778 <_strtod_l+0x540>
 8005644:	f018 030f 	ands.w	r3, r8, #15
 8005648:	d00a      	beq.n	8005660 <_strtod_l+0x428>
 800564a:	4963      	ldr	r1, [pc, #396]	; (80057d8 <_strtod_l+0x5a0>)
 800564c:	464a      	mov	r2, r9
 800564e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005656:	4653      	mov	r3, sl
 8005658:	f7fa ff3e 	bl	80004d8 <__aeabi_dmul>
 800565c:	4681      	mov	r9, r0
 800565e:	468a      	mov	sl, r1
 8005660:	f038 080f 	bics.w	r8, r8, #15
 8005664:	d077      	beq.n	8005756 <_strtod_l+0x51e>
 8005666:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800566a:	dd4b      	ble.n	8005704 <_strtod_l+0x4cc>
 800566c:	f04f 0800 	mov.w	r8, #0
 8005670:	f8cd 8010 	str.w	r8, [sp, #16]
 8005674:	f8cd 8020 	str.w	r8, [sp, #32]
 8005678:	f8cd 8018 	str.w	r8, [sp, #24]
 800567c:	2322      	movs	r3, #34	; 0x22
 800567e:	f04f 0900 	mov.w	r9, #0
 8005682:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80057e0 <_strtod_l+0x5a8>
 8005686:	f8cb 3000 	str.w	r3, [fp]
 800568a:	9b08      	ldr	r3, [sp, #32]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f43f ae12 	beq.w	80052b6 <_strtod_l+0x7e>
 8005692:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005694:	4658      	mov	r0, fp
 8005696:	f001 fe52 	bl	800733e <_Bfree>
 800569a:	9906      	ldr	r1, [sp, #24]
 800569c:	4658      	mov	r0, fp
 800569e:	f001 fe4e 	bl	800733e <_Bfree>
 80056a2:	9904      	ldr	r1, [sp, #16]
 80056a4:	4658      	mov	r0, fp
 80056a6:	f001 fe4a 	bl	800733e <_Bfree>
 80056aa:	9908      	ldr	r1, [sp, #32]
 80056ac:	4658      	mov	r0, fp
 80056ae:	f001 fe46 	bl	800733e <_Bfree>
 80056b2:	4641      	mov	r1, r8
 80056b4:	4658      	mov	r0, fp
 80056b6:	f001 fe42 	bl	800733e <_Bfree>
 80056ba:	e5fc      	b.n	80052b6 <_strtod_l+0x7e>
 80056bc:	9a07      	ldr	r2, [sp, #28]
 80056be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80056c2:	4293      	cmp	r3, r2
 80056c4:	dbb6      	blt.n	8005634 <_strtod_l+0x3fc>
 80056c6:	4d44      	ldr	r5, [pc, #272]	; (80057d8 <_strtod_l+0x5a0>)
 80056c8:	f1c4 040f 	rsb	r4, r4, #15
 80056cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80056d0:	464a      	mov	r2, r9
 80056d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056d6:	4653      	mov	r3, sl
 80056d8:	f7fa fefe 	bl	80004d8 <__aeabi_dmul>
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	1b1c      	subs	r4, r3, r4
 80056e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80056e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056e8:	e789      	b.n	80055fe <_strtod_l+0x3c6>
 80056ea:	f113 0f16 	cmn.w	r3, #22
 80056ee:	dba1      	blt.n	8005634 <_strtod_l+0x3fc>
 80056f0:	4a39      	ldr	r2, [pc, #228]	; (80057d8 <_strtod_l+0x5a0>)
 80056f2:	4648      	mov	r0, r9
 80056f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80056f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80056fc:	4651      	mov	r1, sl
 80056fe:	f7fb f815 	bl	800072c <__aeabi_ddiv>
 8005702:	e77e      	b.n	8005602 <_strtod_l+0x3ca>
 8005704:	2300      	movs	r3, #0
 8005706:	4648      	mov	r0, r9
 8005708:	4651      	mov	r1, sl
 800570a:	461d      	mov	r5, r3
 800570c:	4e33      	ldr	r6, [pc, #204]	; (80057dc <_strtod_l+0x5a4>)
 800570e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005712:	f1b8 0f01 	cmp.w	r8, #1
 8005716:	dc21      	bgt.n	800575c <_strtod_l+0x524>
 8005718:	b10b      	cbz	r3, 800571e <_strtod_l+0x4e6>
 800571a:	4681      	mov	r9, r0
 800571c:	468a      	mov	sl, r1
 800571e:	4b2f      	ldr	r3, [pc, #188]	; (80057dc <_strtod_l+0x5a4>)
 8005720:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005724:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005728:	464a      	mov	r2, r9
 800572a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800572e:	4653      	mov	r3, sl
 8005730:	f7fa fed2 	bl	80004d8 <__aeabi_dmul>
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <_strtod_l+0x5a8>)
 8005736:	460a      	mov	r2, r1
 8005738:	400b      	ands	r3, r1
 800573a:	492a      	ldr	r1, [pc, #168]	; (80057e4 <_strtod_l+0x5ac>)
 800573c:	4681      	mov	r9, r0
 800573e:	428b      	cmp	r3, r1
 8005740:	d894      	bhi.n	800566c <_strtod_l+0x434>
 8005742:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005746:	428b      	cmp	r3, r1
 8005748:	bf86      	itte	hi
 800574a:	f04f 39ff 	movhi.w	r9, #4294967295
 800574e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80057ec <_strtod_l+0x5b4>
 8005752:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005756:	2300      	movs	r3, #0
 8005758:	9305      	str	r3, [sp, #20]
 800575a:	e07b      	b.n	8005854 <_strtod_l+0x61c>
 800575c:	f018 0f01 	tst.w	r8, #1
 8005760:	d006      	beq.n	8005770 <_strtod_l+0x538>
 8005762:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fa feb5 	bl	80004d8 <__aeabi_dmul>
 800576e:	2301      	movs	r3, #1
 8005770:	3501      	adds	r5, #1
 8005772:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005776:	e7cc      	b.n	8005712 <_strtod_l+0x4da>
 8005778:	d0ed      	beq.n	8005756 <_strtod_l+0x51e>
 800577a:	f1c8 0800 	rsb	r8, r8, #0
 800577e:	f018 020f 	ands.w	r2, r8, #15
 8005782:	d00a      	beq.n	800579a <_strtod_l+0x562>
 8005784:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <_strtod_l+0x5a0>)
 8005786:	4648      	mov	r0, r9
 8005788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800578c:	4651      	mov	r1, sl
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa ffcb 	bl	800072c <__aeabi_ddiv>
 8005796:	4681      	mov	r9, r0
 8005798:	468a      	mov	sl, r1
 800579a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800579e:	d0da      	beq.n	8005756 <_strtod_l+0x51e>
 80057a0:	f1b8 0f1f 	cmp.w	r8, #31
 80057a4:	dd24      	ble.n	80057f0 <_strtod_l+0x5b8>
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80057ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80057b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b6:	2322      	movs	r3, #34	; 0x22
 80057b8:	f04f 0900 	mov.w	r9, #0
 80057bc:	f04f 0a00 	mov.w	sl, #0
 80057c0:	f8cb 3000 	str.w	r3, [fp]
 80057c4:	e761      	b.n	800568a <_strtod_l+0x452>
 80057c6:	bf00      	nop
 80057c8:	080080ad 	.word	0x080080ad
 80057cc:	0800813b 	.word	0x0800813b
 80057d0:	080080b5 	.word	0x080080b5
 80057d4:	080080f8 	.word	0x080080f8
 80057d8:	08008178 	.word	0x08008178
 80057dc:	08008150 	.word	0x08008150
 80057e0:	7ff00000 	.word	0x7ff00000
 80057e4:	7ca00000 	.word	0x7ca00000
 80057e8:	fff80000 	.word	0xfff80000
 80057ec:	7fefffff 	.word	0x7fefffff
 80057f0:	f018 0310 	ands.w	r3, r8, #16
 80057f4:	bf18      	it	ne
 80057f6:	236a      	movne	r3, #106	; 0x6a
 80057f8:	4648      	mov	r0, r9
 80057fa:	9305      	str	r3, [sp, #20]
 80057fc:	4651      	mov	r1, sl
 80057fe:	2300      	movs	r3, #0
 8005800:	4da1      	ldr	r5, [pc, #644]	; (8005a88 <_strtod_l+0x850>)
 8005802:	f1b8 0f00 	cmp.w	r8, #0
 8005806:	f300 8113 	bgt.w	8005a30 <_strtod_l+0x7f8>
 800580a:	b10b      	cbz	r3, 8005810 <_strtod_l+0x5d8>
 800580c:	4681      	mov	r9, r0
 800580e:	468a      	mov	sl, r1
 8005810:	9b05      	ldr	r3, [sp, #20]
 8005812:	b1bb      	cbz	r3, 8005844 <_strtod_l+0x60c>
 8005814:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800581c:	2b00      	cmp	r3, #0
 800581e:	4651      	mov	r1, sl
 8005820:	dd10      	ble.n	8005844 <_strtod_l+0x60c>
 8005822:	2b1f      	cmp	r3, #31
 8005824:	f340 8110 	ble.w	8005a48 <_strtod_l+0x810>
 8005828:	2b34      	cmp	r3, #52	; 0x34
 800582a:	bfd8      	it	le
 800582c:	f04f 32ff 	movle.w	r2, #4294967295
 8005830:	f04f 0900 	mov.w	r9, #0
 8005834:	bfcf      	iteee	gt
 8005836:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800583a:	3b20      	suble	r3, #32
 800583c:	fa02 f303 	lslle.w	r3, r2, r3
 8005840:	ea03 0a01 	andle.w	sl, r3, r1
 8005844:	2200      	movs	r2, #0
 8005846:	2300      	movs	r3, #0
 8005848:	4648      	mov	r0, r9
 800584a:	4651      	mov	r1, sl
 800584c:	f7fb f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 8005850:	2800      	cmp	r0, #0
 8005852:	d1a8      	bne.n	80057a6 <_strtod_l+0x56e>
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	9a04      	ldr	r2, [sp, #16]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	9908      	ldr	r1, [sp, #32]
 800585c:	4623      	mov	r3, r4
 800585e:	4658      	mov	r0, fp
 8005860:	f001 fdbf 	bl	80073e2 <__s2b>
 8005864:	9008      	str	r0, [sp, #32]
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f af00 	beq.w	800566c <_strtod_l+0x434>
 800586c:	9a07      	ldr	r2, [sp, #28]
 800586e:	9b07      	ldr	r3, [sp, #28]
 8005870:	2a00      	cmp	r2, #0
 8005872:	f1c3 0300 	rsb	r3, r3, #0
 8005876:	bfa8      	it	ge
 8005878:	2300      	movge	r3, #0
 800587a:	f04f 0800 	mov.w	r8, #0
 800587e:	930e      	str	r3, [sp, #56]	; 0x38
 8005880:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005884:	9316      	str	r3, [sp, #88]	; 0x58
 8005886:	f8cd 8010 	str.w	r8, [sp, #16]
 800588a:	9b08      	ldr	r3, [sp, #32]
 800588c:	4658      	mov	r0, fp
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	f001 fd21 	bl	80072d6 <_Balloc>
 8005894:	9006      	str	r0, [sp, #24]
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f aef0 	beq.w	800567c <_strtod_l+0x444>
 800589c:	9b08      	ldr	r3, [sp, #32]
 800589e:	300c      	adds	r0, #12
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	f103 010c 	add.w	r1, r3, #12
 80058a6:	3202      	adds	r2, #2
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	f001 fd09 	bl	80072c0 <memcpy>
 80058ae:	ab1e      	add	r3, sp, #120	; 0x78
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	ab1d      	add	r3, sp, #116	; 0x74
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	464a      	mov	r2, r9
 80058b8:	4653      	mov	r3, sl
 80058ba:	4658      	mov	r0, fp
 80058bc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80058c0:	f002 f84a 	bl	8007958 <__d2b>
 80058c4:	901c      	str	r0, [sp, #112]	; 0x70
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f43f aed8 	beq.w	800567c <_strtod_l+0x444>
 80058cc:	2101      	movs	r1, #1
 80058ce:	4658      	mov	r0, fp
 80058d0:	f001 fe13 	bl	80074fa <__i2b>
 80058d4:	9004      	str	r0, [sp, #16]
 80058d6:	4603      	mov	r3, r0
 80058d8:	2800      	cmp	r0, #0
 80058da:	f43f aecf 	beq.w	800567c <_strtod_l+0x444>
 80058de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80058e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058e2:	2d00      	cmp	r5, #0
 80058e4:	bfab      	itete	ge
 80058e6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80058e8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80058ea:	18ee      	addge	r6, r5, r3
 80058ec:	1b5c      	sublt	r4, r3, r5
 80058ee:	9b05      	ldr	r3, [sp, #20]
 80058f0:	bfa8      	it	ge
 80058f2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80058f4:	eba5 0503 	sub.w	r5, r5, r3
 80058f8:	4415      	add	r5, r2
 80058fa:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <_strtod_l+0x854>)
 80058fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8005900:	bfb8      	it	lt
 8005902:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005904:	429d      	cmp	r5, r3
 8005906:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800590a:	f280 80af 	bge.w	8005a6c <_strtod_l+0x834>
 800590e:	1b5b      	subs	r3, r3, r5
 8005910:	2b1f      	cmp	r3, #31
 8005912:	eba2 0203 	sub.w	r2, r2, r3
 8005916:	f04f 0701 	mov.w	r7, #1
 800591a:	f300 809c 	bgt.w	8005a56 <_strtod_l+0x81e>
 800591e:	2500      	movs	r5, #0
 8005920:	fa07 f303 	lsl.w	r3, r7, r3
 8005924:	930f      	str	r3, [sp, #60]	; 0x3c
 8005926:	18b7      	adds	r7, r6, r2
 8005928:	9b05      	ldr	r3, [sp, #20]
 800592a:	42be      	cmp	r6, r7
 800592c:	4414      	add	r4, r2
 800592e:	441c      	add	r4, r3
 8005930:	4633      	mov	r3, r6
 8005932:	bfa8      	it	ge
 8005934:	463b      	movge	r3, r7
 8005936:	42a3      	cmp	r3, r4
 8005938:	bfa8      	it	ge
 800593a:	4623      	movge	r3, r4
 800593c:	2b00      	cmp	r3, #0
 800593e:	bfc2      	ittt	gt
 8005940:	1aff      	subgt	r7, r7, r3
 8005942:	1ae4      	subgt	r4, r4, r3
 8005944:	1af6      	subgt	r6, r6, r3
 8005946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005948:	b1bb      	cbz	r3, 800597a <_strtod_l+0x742>
 800594a:	461a      	mov	r2, r3
 800594c:	9904      	ldr	r1, [sp, #16]
 800594e:	4658      	mov	r0, fp
 8005950:	f001 fe72 	bl	8007638 <__pow5mult>
 8005954:	9004      	str	r0, [sp, #16]
 8005956:	2800      	cmp	r0, #0
 8005958:	f43f ae90 	beq.w	800567c <_strtod_l+0x444>
 800595c:	4601      	mov	r1, r0
 800595e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005960:	4658      	mov	r0, fp
 8005962:	f001 fdd3 	bl	800750c <__multiply>
 8005966:	9009      	str	r0, [sp, #36]	; 0x24
 8005968:	2800      	cmp	r0, #0
 800596a:	f43f ae87 	beq.w	800567c <_strtod_l+0x444>
 800596e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005970:	4658      	mov	r0, fp
 8005972:	f001 fce4 	bl	800733e <_Bfree>
 8005976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005978:	931c      	str	r3, [sp, #112]	; 0x70
 800597a:	2f00      	cmp	r7, #0
 800597c:	dc7a      	bgt.n	8005a74 <_strtod_l+0x83c>
 800597e:	9b07      	ldr	r3, [sp, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	dd08      	ble.n	8005996 <_strtod_l+0x75e>
 8005984:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005986:	9906      	ldr	r1, [sp, #24]
 8005988:	4658      	mov	r0, fp
 800598a:	f001 fe55 	bl	8007638 <__pow5mult>
 800598e:	9006      	str	r0, [sp, #24]
 8005990:	2800      	cmp	r0, #0
 8005992:	f43f ae73 	beq.w	800567c <_strtod_l+0x444>
 8005996:	2c00      	cmp	r4, #0
 8005998:	dd08      	ble.n	80059ac <_strtod_l+0x774>
 800599a:	4622      	mov	r2, r4
 800599c:	9906      	ldr	r1, [sp, #24]
 800599e:	4658      	mov	r0, fp
 80059a0:	f001 fe98 	bl	80076d4 <__lshift>
 80059a4:	9006      	str	r0, [sp, #24]
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f43f ae68 	beq.w	800567c <_strtod_l+0x444>
 80059ac:	2e00      	cmp	r6, #0
 80059ae:	dd08      	ble.n	80059c2 <_strtod_l+0x78a>
 80059b0:	4632      	mov	r2, r6
 80059b2:	9904      	ldr	r1, [sp, #16]
 80059b4:	4658      	mov	r0, fp
 80059b6:	f001 fe8d 	bl	80076d4 <__lshift>
 80059ba:	9004      	str	r0, [sp, #16]
 80059bc:	2800      	cmp	r0, #0
 80059be:	f43f ae5d 	beq.w	800567c <_strtod_l+0x444>
 80059c2:	9a06      	ldr	r2, [sp, #24]
 80059c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059c6:	4658      	mov	r0, fp
 80059c8:	f001 fef2 	bl	80077b0 <__mdiff>
 80059cc:	4680      	mov	r8, r0
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f43f ae54 	beq.w	800567c <_strtod_l+0x444>
 80059d4:	2400      	movs	r4, #0
 80059d6:	68c3      	ldr	r3, [r0, #12]
 80059d8:	9904      	ldr	r1, [sp, #16]
 80059da:	60c4      	str	r4, [r0, #12]
 80059dc:	930c      	str	r3, [sp, #48]	; 0x30
 80059de:	f001 fecd 	bl	800777c <__mcmp>
 80059e2:	42a0      	cmp	r0, r4
 80059e4:	da54      	bge.n	8005a90 <_strtod_l+0x858>
 80059e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059e8:	b9f3      	cbnz	r3, 8005a28 <_strtod_l+0x7f0>
 80059ea:	f1b9 0f00 	cmp.w	r9, #0
 80059ee:	d11b      	bne.n	8005a28 <_strtod_l+0x7f0>
 80059f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80059f4:	b9c3      	cbnz	r3, 8005a28 <_strtod_l+0x7f0>
 80059f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059fa:	0d1b      	lsrs	r3, r3, #20
 80059fc:	051b      	lsls	r3, r3, #20
 80059fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a02:	d911      	bls.n	8005a28 <_strtod_l+0x7f0>
 8005a04:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005a08:	b91b      	cbnz	r3, 8005a12 <_strtod_l+0x7da>
 8005a0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	dd0a      	ble.n	8005a28 <_strtod_l+0x7f0>
 8005a12:	4641      	mov	r1, r8
 8005a14:	2201      	movs	r2, #1
 8005a16:	4658      	mov	r0, fp
 8005a18:	f001 fe5c 	bl	80076d4 <__lshift>
 8005a1c:	9904      	ldr	r1, [sp, #16]
 8005a1e:	4680      	mov	r8, r0
 8005a20:	f001 feac 	bl	800777c <__mcmp>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	dc68      	bgt.n	8005afa <_strtod_l+0x8c2>
 8005a28:	9b05      	ldr	r3, [sp, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d172      	bne.n	8005b14 <_strtod_l+0x8dc>
 8005a2e:	e630      	b.n	8005692 <_strtod_l+0x45a>
 8005a30:	f018 0f01 	tst.w	r8, #1
 8005a34:	d004      	beq.n	8005a40 <_strtod_l+0x808>
 8005a36:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a3a:	f7fa fd4d 	bl	80004d8 <__aeabi_dmul>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a44:	3508      	adds	r5, #8
 8005a46:	e6dc      	b.n	8005802 <_strtod_l+0x5ca>
 8005a48:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	ea03 0909 	and.w	r9, r3, r9
 8005a54:	e6f6      	b.n	8005844 <_strtod_l+0x60c>
 8005a56:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a5a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a5e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a62:	35e2      	adds	r5, #226	; 0xe2
 8005a64:	fa07 f505 	lsl.w	r5, r7, r5
 8005a68:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a6a:	e75c      	b.n	8005926 <_strtod_l+0x6ee>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	2500      	movs	r5, #0
 8005a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a72:	e758      	b.n	8005926 <_strtod_l+0x6ee>
 8005a74:	463a      	mov	r2, r7
 8005a76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a78:	4658      	mov	r0, fp
 8005a7a:	f001 fe2b 	bl	80076d4 <__lshift>
 8005a7e:	901c      	str	r0, [sp, #112]	; 0x70
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f47f af7c 	bne.w	800597e <_strtod_l+0x746>
 8005a86:	e5f9      	b.n	800567c <_strtod_l+0x444>
 8005a88:	08008110 	.word	0x08008110
 8005a8c:	fffffc02 	.word	0xfffffc02
 8005a90:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005a94:	f040 8089 	bne.w	8005baa <_strtod_l+0x972>
 8005a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a9a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005a9e:	b342      	cbz	r2, 8005af2 <_strtod_l+0x8ba>
 8005aa0:	4aaf      	ldr	r2, [pc, #700]	; (8005d60 <_strtod_l+0xb28>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d156      	bne.n	8005b54 <_strtod_l+0x91c>
 8005aa6:	9b05      	ldr	r3, [sp, #20]
 8005aa8:	4648      	mov	r0, r9
 8005aaa:	b1eb      	cbz	r3, 8005ae8 <_strtod_l+0x8b0>
 8005aac:	4653      	mov	r3, sl
 8005aae:	4aad      	ldr	r2, [pc, #692]	; (8005d64 <_strtod_l+0xb2c>)
 8005ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005aba:	d818      	bhi.n	8005aee <_strtod_l+0x8b6>
 8005abc:	0d12      	lsrs	r2, r2, #20
 8005abe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac6:	4298      	cmp	r0, r3
 8005ac8:	d144      	bne.n	8005b54 <_strtod_l+0x91c>
 8005aca:	4ba7      	ldr	r3, [pc, #668]	; (8005d68 <_strtod_l+0xb30>)
 8005acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d102      	bne.n	8005ad8 <_strtod_l+0x8a0>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f add2 	beq.w	800567c <_strtod_l+0x444>
 8005ad8:	4ba2      	ldr	r3, [pc, #648]	; (8005d64 <_strtod_l+0xb2c>)
 8005ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005adc:	f04f 0900 	mov.w	r9, #0
 8005ae0:	401a      	ands	r2, r3
 8005ae2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005ae6:	e79f      	b.n	8005a28 <_strtod_l+0x7f0>
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	e7eb      	b.n	8005ac6 <_strtod_l+0x88e>
 8005aee:	460b      	mov	r3, r1
 8005af0:	e7e9      	b.n	8005ac6 <_strtod_l+0x88e>
 8005af2:	bb7b      	cbnz	r3, 8005b54 <_strtod_l+0x91c>
 8005af4:	f1b9 0f00 	cmp.w	r9, #0
 8005af8:	d12c      	bne.n	8005b54 <_strtod_l+0x91c>
 8005afa:	9905      	ldr	r1, [sp, #20]
 8005afc:	4653      	mov	r3, sl
 8005afe:	4a99      	ldr	r2, [pc, #612]	; (8005d64 <_strtod_l+0xb2c>)
 8005b00:	b1f1      	cbz	r1, 8005b40 <_strtod_l+0x908>
 8005b02:	ea02 010a 	and.w	r1, r2, sl
 8005b06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005b0a:	dc19      	bgt.n	8005b40 <_strtod_l+0x908>
 8005b0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b10:	f77f ae51 	ble.w	80057b6 <_strtod_l+0x57e>
 8005b14:	2300      	movs	r3, #0
 8005b16:	4a95      	ldr	r2, [pc, #596]	; (8005d6c <_strtod_l+0xb34>)
 8005b18:	4648      	mov	r0, r9
 8005b1a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005b1e:	4651      	mov	r1, sl
 8005b20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b24:	f7fa fcd8 	bl	80004d8 <__aeabi_dmul>
 8005b28:	4681      	mov	r9, r0
 8005b2a:	468a      	mov	sl, r1
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	f47f adb0 	bne.w	8005692 <_strtod_l+0x45a>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f47f adad 	bne.w	8005692 <_strtod_l+0x45a>
 8005b38:	2322      	movs	r3, #34	; 0x22
 8005b3a:	f8cb 3000 	str.w	r3, [fp]
 8005b3e:	e5a8      	b.n	8005692 <_strtod_l+0x45a>
 8005b40:	4013      	ands	r3, r2
 8005b42:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b46:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005b4a:	f04f 39ff 	mov.w	r9, #4294967295
 8005b4e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005b52:	e769      	b.n	8005a28 <_strtod_l+0x7f0>
 8005b54:	b19d      	cbz	r5, 8005b7e <_strtod_l+0x946>
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	421d      	tst	r5, r3
 8005b5a:	f43f af65 	beq.w	8005a28 <_strtod_l+0x7f0>
 8005b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b60:	9a05      	ldr	r2, [sp, #20]
 8005b62:	4648      	mov	r0, r9
 8005b64:	4651      	mov	r1, sl
 8005b66:	b173      	cbz	r3, 8005b86 <_strtod_l+0x94e>
 8005b68:	f7ff fb42 	bl	80051f0 <sulp>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b74:	f7fa fafa 	bl	800016c <__adddf3>
 8005b78:	4681      	mov	r9, r0
 8005b7a:	468a      	mov	sl, r1
 8005b7c:	e754      	b.n	8005a28 <_strtod_l+0x7f0>
 8005b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b80:	ea13 0f09 	tst.w	r3, r9
 8005b84:	e7e9      	b.n	8005b5a <_strtod_l+0x922>
 8005b86:	f7ff fb33 	bl	80051f0 <sulp>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b92:	f7fa fae9 	bl	8000168 <__aeabi_dsub>
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4681      	mov	r9, r0
 8005b9c:	468a      	mov	sl, r1
 8005b9e:	f7fa ff03 	bl	80009a8 <__aeabi_dcmpeq>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f47f ae07 	bne.w	80057b6 <_strtod_l+0x57e>
 8005ba8:	e73e      	b.n	8005a28 <_strtod_l+0x7f0>
 8005baa:	9904      	ldr	r1, [sp, #16]
 8005bac:	4640      	mov	r0, r8
 8005bae:	f001 ff22 	bl	80079f6 <__ratio>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bb8:	4606      	mov	r6, r0
 8005bba:	460f      	mov	r7, r1
 8005bbc:	f7fa ff08 	bl	80009d0 <__aeabi_dcmple>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d075      	beq.n	8005cb0 <_strtod_l+0xa78>
 8005bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d047      	beq.n	8005c5a <_strtod_l+0xa22>
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4f68      	ldr	r7, [pc, #416]	; (8005d70 <_strtod_l+0xb38>)
 8005bce:	4d68      	ldr	r5, [pc, #416]	; (8005d70 <_strtod_l+0xb38>)
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	0d1b      	lsrs	r3, r3, #20
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bde:	4b65      	ldr	r3, [pc, #404]	; (8005d74 <_strtod_l+0xb3c>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	f040 80cf 	bne.w	8005d84 <_strtod_l+0xb4c>
 8005be6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	4648      	mov	r0, r9
 8005bf2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	f001 fe38 	bl	800786c <__ulp>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	f7fa fc68 	bl	80004d8 <__aeabi_dmul>
 8005c08:	464a      	mov	r2, r9
 8005c0a:	4653      	mov	r3, sl
 8005c0c:	f7fa faae 	bl	800016c <__adddf3>
 8005c10:	460b      	mov	r3, r1
 8005c12:	4954      	ldr	r1, [pc, #336]	; (8005d64 <_strtod_l+0xb2c>)
 8005c14:	4a58      	ldr	r2, [pc, #352]	; (8005d78 <_strtod_l+0xb40>)
 8005c16:	4019      	ands	r1, r3
 8005c18:	4291      	cmp	r1, r2
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	d95e      	bls.n	8005cdc <_strtod_l+0xaa4>
 8005c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <_strtod_l+0x9f8>
 8005c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f43f ad26 	beq.w	800567c <_strtod_l+0x444>
 8005c30:	f04f 39ff 	mov.w	r9, #4294967295
 8005c34:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005d68 <_strtod_l+0xb30>
 8005c38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f001 fb7f 	bl	800733e <_Bfree>
 8005c40:	9906      	ldr	r1, [sp, #24]
 8005c42:	4658      	mov	r0, fp
 8005c44:	f001 fb7b 	bl	800733e <_Bfree>
 8005c48:	9904      	ldr	r1, [sp, #16]
 8005c4a:	4658      	mov	r0, fp
 8005c4c:	f001 fb77 	bl	800733e <_Bfree>
 8005c50:	4641      	mov	r1, r8
 8005c52:	4658      	mov	r0, fp
 8005c54:	f001 fb73 	bl	800733e <_Bfree>
 8005c58:	e617      	b.n	800588a <_strtod_l+0x652>
 8005c5a:	f1b9 0f00 	cmp.w	r9, #0
 8005c5e:	d119      	bne.n	8005c94 <_strtod_l+0xa5c>
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c66:	b9e3      	cbnz	r3, 8005ca2 <_strtod_l+0xa6a>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <_strtod_l+0xb38>)
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fea4 	bl	80009bc <__aeabi_dcmplt>
 8005c74:	b9c8      	cbnz	r0, 8005caa <_strtod_l+0xa72>
 8005c76:	2200      	movs	r2, #0
 8005c78:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <_strtod_l+0xb44>)
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7fa fc2b 	bl	80004d8 <__aeabi_dmul>
 8005c82:	4604      	mov	r4, r0
 8005c84:	460d      	mov	r5, r1
 8005c86:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c8a:	9418      	str	r4, [sp, #96]	; 0x60
 8005c8c:	9319      	str	r3, [sp, #100]	; 0x64
 8005c8e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005c92:	e79d      	b.n	8005bd0 <_strtod_l+0x998>
 8005c94:	f1b9 0f01 	cmp.w	r9, #1
 8005c98:	d103      	bne.n	8005ca2 <_strtod_l+0xa6a>
 8005c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f43f ad8a 	beq.w	80057b6 <_strtod_l+0x57e>
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	4f36      	ldr	r7, [pc, #216]	; (8005d80 <_strtod_l+0xb48>)
 8005ca6:	2400      	movs	r4, #0
 8005ca8:	e791      	b.n	8005bce <_strtod_l+0x996>
 8005caa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005cac:	4d33      	ldr	r5, [pc, #204]	; (8005d7c <_strtod_l+0xb44>)
 8005cae:	e7ea      	b.n	8005c86 <_strtod_l+0xa4e>
 8005cb0:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <_strtod_l+0xb44>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	f7fa fc0e 	bl	80004d8 <__aeabi_dmul>
 8005cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	b933      	cbnz	r3, 8005cd2 <_strtod_l+0xa9a>
 8005cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cc8:	9010      	str	r0, [sp, #64]	; 0x40
 8005cca:	9311      	str	r3, [sp, #68]	; 0x44
 8005ccc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cd0:	e77e      	b.n	8005bd0 <_strtod_l+0x998>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005cda:	e7f7      	b.n	8005ccc <_strtod_l+0xa94>
 8005cdc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005ce0:	9b05      	ldr	r3, [sp, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1a8      	bne.n	8005c38 <_strtod_l+0xa00>
 8005ce6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005cea:	0d1b      	lsrs	r3, r3, #20
 8005cec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cee:	051b      	lsls	r3, r3, #20
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	4656      	mov	r6, sl
 8005cf4:	d1a0      	bne.n	8005c38 <_strtod_l+0xa00>
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7fa fe9d 	bl	8000a38 <__aeabi_d2iz>
 8005cfe:	f7fa fb81 	bl	8000404 <__aeabi_i2d>
 8005d02:	460b      	mov	r3, r1
 8005d04:	4602      	mov	r2, r0
 8005d06:	4629      	mov	r1, r5
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7fa fa2d 	bl	8000168 <__aeabi_dsub>
 8005d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d10:	4604      	mov	r4, r0
 8005d12:	460d      	mov	r5, r1
 8005d14:	b933      	cbnz	r3, 8005d24 <_strtod_l+0xaec>
 8005d16:	f1b9 0f00 	cmp.w	r9, #0
 8005d1a:	d103      	bne.n	8005d24 <_strtod_l+0xaec>
 8005d1c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	d06a      	beq.n	8005dfa <_strtod_l+0xbc2>
 8005d24:	a30a      	add	r3, pc, #40	; (adr r3, 8005d50 <_strtod_l+0xb18>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa fe45 	bl	80009bc <__aeabi_dcmplt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f47f acad 	bne.w	8005692 <_strtod_l+0x45a>
 8005d38:	a307      	add	r3, pc, #28	; (adr r3, 8005d58 <_strtod_l+0xb20>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fe59 	bl	80009f8 <__aeabi_dcmpgt>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f43f af76 	beq.w	8005c38 <_strtod_l+0xa00>
 8005d4c:	e4a1      	b.n	8005692 <_strtod_l+0x45a>
 8005d4e:	bf00      	nop
 8005d50:	94a03595 	.word	0x94a03595
 8005d54:	3fdfffff 	.word	0x3fdfffff
 8005d58:	35afe535 	.word	0x35afe535
 8005d5c:	3fe00000 	.word	0x3fe00000
 8005d60:	000fffff 	.word	0x000fffff
 8005d64:	7ff00000 	.word	0x7ff00000
 8005d68:	7fefffff 	.word	0x7fefffff
 8005d6c:	39500000 	.word	0x39500000
 8005d70:	3ff00000 	.word	0x3ff00000
 8005d74:	7fe00000 	.word	0x7fe00000
 8005d78:	7c9fffff 	.word	0x7c9fffff
 8005d7c:	3fe00000 	.word	0x3fe00000
 8005d80:	bff00000 	.word	0xbff00000
 8005d84:	9b05      	ldr	r3, [sp, #20]
 8005d86:	b313      	cbz	r3, 8005dce <_strtod_l+0xb96>
 8005d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d8e:	d81e      	bhi.n	8005dce <_strtod_l+0xb96>
 8005d90:	a325      	add	r3, pc, #148	; (adr r3, 8005e28 <_strtod_l+0xbf0>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fe19 	bl	80009d0 <__aeabi_dcmple>
 8005d9e:	b190      	cbz	r0, 8005dc6 <_strtod_l+0xb8e>
 8005da0:	4629      	mov	r1, r5
 8005da2:	4620      	mov	r0, r4
 8005da4:	f7fa fe70 	bl	8000a88 <__aeabi_d2uiz>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	bf08      	it	eq
 8005dac:	2001      	moveq	r0, #1
 8005dae:	f7fa fb19 	bl	80003e4 <__aeabi_ui2d>
 8005db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	b9d3      	cbnz	r3, 8005df0 <_strtod_l+0xbb8>
 8005dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dbe:	9012      	str	r0, [sp, #72]	; 0x48
 8005dc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dc2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dc8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005dcc:	1a9f      	subs	r7, r3, r2
 8005dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dd2:	f001 fd4b 	bl	800786c <__ulp>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fb7b 	bl	80004d8 <__aeabi_dmul>
 8005de2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005de6:	f7fa f9c1 	bl	800016c <__adddf3>
 8005dea:	4681      	mov	r9, r0
 8005dec:	468a      	mov	sl, r1
 8005dee:	e777      	b.n	8005ce0 <_strtod_l+0xaa8>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005df8:	e7e3      	b.n	8005dc2 <_strtod_l+0xb8a>
 8005dfa:	a30d      	add	r3, pc, #52	; (adr r3, 8005e30 <_strtod_l+0xbf8>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa fddc 	bl	80009bc <__aeabi_dcmplt>
 8005e04:	e79f      	b.n	8005d46 <_strtod_l+0xb0e>
 8005e06:	2300      	movs	r3, #0
 8005e08:	930d      	str	r3, [sp, #52]	; 0x34
 8005e0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	f7ff ba55 	b.w	80052be <_strtod_l+0x86>
 8005e14:	2b65      	cmp	r3, #101	; 0x65
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f43f ab42 	beq.w	80054a2 <_strtod_l+0x26a>
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4614      	mov	r4, r2
 8005e22:	9105      	str	r1, [sp, #20]
 8005e24:	f7ff babf 	b.w	80053a6 <_strtod_l+0x16e>
 8005e28:	ffc00000 	.word	0xffc00000
 8005e2c:	41dfffff 	.word	0x41dfffff
 8005e30:	94a03595 	.word	0x94a03595
 8005e34:	3fcfffff 	.word	0x3fcfffff

08005e38 <_strtod_r>:
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <_strtod_r+0x18>)
 8005e3a:	b410      	push	{r4}
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4c05      	ldr	r4, [pc, #20]	; (8005e54 <_strtod_r+0x1c>)
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bf08      	it	eq
 8005e46:	4623      	moveq	r3, r4
 8005e48:	bc10      	pop	{r4}
 8005e4a:	f7ff b9f5 	b.w	8005238 <_strtod_l>
 8005e4e:	bf00      	nop
 8005e50:	2000000c 	.word	0x2000000c
 8005e54:	20000070 	.word	0x20000070

08005e58 <_strtol_l.isra.0>:
 8005e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	4692      	mov	sl, r2
 8005e62:	461e      	mov	r6, r3
 8005e64:	460f      	mov	r7, r1
 8005e66:	463d      	mov	r5, r7
 8005e68:	9808      	ldr	r0, [sp, #32]
 8005e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e6e:	f001 f9eb 	bl	8007248 <__locale_ctype_ptr_l>
 8005e72:	4420      	add	r0, r4
 8005e74:	7843      	ldrb	r3, [r0, #1]
 8005e76:	f013 0308 	ands.w	r3, r3, #8
 8005e7a:	d132      	bne.n	8005ee2 <_strtol_l.isra.0+0x8a>
 8005e7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005e7e:	d132      	bne.n	8005ee6 <_strtol_l.isra.0+0x8e>
 8005e80:	2201      	movs	r2, #1
 8005e82:	787c      	ldrb	r4, [r7, #1]
 8005e84:	1cbd      	adds	r5, r7, #2
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	d05d      	beq.n	8005f46 <_strtol_l.isra.0+0xee>
 8005e8a:	2e10      	cmp	r6, #16
 8005e8c:	d109      	bne.n	8005ea2 <_strtol_l.isra.0+0x4a>
 8005e8e:	2c30      	cmp	r4, #48	; 0x30
 8005e90:	d107      	bne.n	8005ea2 <_strtol_l.isra.0+0x4a>
 8005e92:	782b      	ldrb	r3, [r5, #0]
 8005e94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e98:	2b58      	cmp	r3, #88	; 0x58
 8005e9a:	d14f      	bne.n	8005f3c <_strtol_l.isra.0+0xe4>
 8005e9c:	2610      	movs	r6, #16
 8005e9e:	786c      	ldrb	r4, [r5, #1]
 8005ea0:	3502      	adds	r5, #2
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	bf14      	ite	ne
 8005ea6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005eaa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005eae:	2700      	movs	r7, #0
 8005eb0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005eba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005ebe:	2b09      	cmp	r3, #9
 8005ec0:	d817      	bhi.n	8005ef2 <_strtol_l.isra.0+0x9a>
 8005ec2:	461c      	mov	r4, r3
 8005ec4:	42a6      	cmp	r6, r4
 8005ec6:	dd23      	ble.n	8005f10 <_strtol_l.isra.0+0xb8>
 8005ec8:	1c7b      	adds	r3, r7, #1
 8005eca:	d007      	beq.n	8005edc <_strtol_l.isra.0+0x84>
 8005ecc:	4584      	cmp	ip, r0
 8005ece:	d31c      	bcc.n	8005f0a <_strtol_l.isra.0+0xb2>
 8005ed0:	d101      	bne.n	8005ed6 <_strtol_l.isra.0+0x7e>
 8005ed2:	45a6      	cmp	lr, r4
 8005ed4:	db19      	blt.n	8005f0a <_strtol_l.isra.0+0xb2>
 8005ed6:	2701      	movs	r7, #1
 8005ed8:	fb00 4006 	mla	r0, r0, r6, r4
 8005edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ee0:	e7eb      	b.n	8005eba <_strtol_l.isra.0+0x62>
 8005ee2:	462f      	mov	r7, r5
 8005ee4:	e7bf      	b.n	8005e66 <_strtol_l.isra.0+0xe>
 8005ee6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ee8:	bf04      	itt	eq
 8005eea:	1cbd      	addeq	r5, r7, #2
 8005eec:	787c      	ldrbeq	r4, [r7, #1]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	e7c9      	b.n	8005e86 <_strtol_l.isra.0+0x2e>
 8005ef2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005ef6:	2b19      	cmp	r3, #25
 8005ef8:	d801      	bhi.n	8005efe <_strtol_l.isra.0+0xa6>
 8005efa:	3c37      	subs	r4, #55	; 0x37
 8005efc:	e7e2      	b.n	8005ec4 <_strtol_l.isra.0+0x6c>
 8005efe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005f02:	2b19      	cmp	r3, #25
 8005f04:	d804      	bhi.n	8005f10 <_strtol_l.isra.0+0xb8>
 8005f06:	3c57      	subs	r4, #87	; 0x57
 8005f08:	e7dc      	b.n	8005ec4 <_strtol_l.isra.0+0x6c>
 8005f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005f0e:	e7e5      	b.n	8005edc <_strtol_l.isra.0+0x84>
 8005f10:	1c7b      	adds	r3, r7, #1
 8005f12:	d108      	bne.n	8005f26 <_strtol_l.isra.0+0xce>
 8005f14:	2322      	movs	r3, #34	; 0x22
 8005f16:	4608      	mov	r0, r1
 8005f18:	f8c8 3000 	str.w	r3, [r8]
 8005f1c:	f1ba 0f00 	cmp.w	sl, #0
 8005f20:	d107      	bne.n	8005f32 <_strtol_l.isra.0+0xda>
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f26:	b102      	cbz	r2, 8005f2a <_strtol_l.isra.0+0xd2>
 8005f28:	4240      	negs	r0, r0
 8005f2a:	f1ba 0f00 	cmp.w	sl, #0
 8005f2e:	d0f8      	beq.n	8005f22 <_strtol_l.isra.0+0xca>
 8005f30:	b10f      	cbz	r7, 8005f36 <_strtol_l.isra.0+0xde>
 8005f32:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f36:	f8ca 9000 	str.w	r9, [sl]
 8005f3a:	e7f2      	b.n	8005f22 <_strtol_l.isra.0+0xca>
 8005f3c:	2430      	movs	r4, #48	; 0x30
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	d1af      	bne.n	8005ea2 <_strtol_l.isra.0+0x4a>
 8005f42:	2608      	movs	r6, #8
 8005f44:	e7ad      	b.n	8005ea2 <_strtol_l.isra.0+0x4a>
 8005f46:	2c30      	cmp	r4, #48	; 0x30
 8005f48:	d0a3      	beq.n	8005e92 <_strtol_l.isra.0+0x3a>
 8005f4a:	260a      	movs	r6, #10
 8005f4c:	e7a9      	b.n	8005ea2 <_strtol_l.isra.0+0x4a>
	...

08005f50 <_strtol_r>:
 8005f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f52:	4c06      	ldr	r4, [pc, #24]	; (8005f6c <_strtol_r+0x1c>)
 8005f54:	4d06      	ldr	r5, [pc, #24]	; (8005f70 <_strtol_r+0x20>)
 8005f56:	6824      	ldr	r4, [r4, #0]
 8005f58:	6a24      	ldr	r4, [r4, #32]
 8005f5a:	2c00      	cmp	r4, #0
 8005f5c:	bf08      	it	eq
 8005f5e:	462c      	moveq	r4, r5
 8005f60:	9400      	str	r4, [sp, #0]
 8005f62:	f7ff ff79 	bl	8005e58 <_strtol_l.isra.0>
 8005f66:	b003      	add	sp, #12
 8005f68:	bd30      	pop	{r4, r5, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000000c 	.word	0x2000000c
 8005f70:	20000070 	.word	0x20000070

08005f74 <quorem>:
 8005f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	6903      	ldr	r3, [r0, #16]
 8005f7a:	690c      	ldr	r4, [r1, #16]
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	f2c0 8084 	blt.w	800608c <quorem+0x118>
 8005f84:	3c01      	subs	r4, #1
 8005f86:	f101 0714 	add.w	r7, r1, #20
 8005f8a:	f100 0614 	add.w	r6, r0, #20
 8005f8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f96:	3501      	adds	r5, #1
 8005f98:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005fa0:	eb06 030c 	add.w	r3, r6, ip
 8005fa4:	eb07 090c 	add.w	r9, r7, ip
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	b39d      	cbz	r5, 8006014 <quorem+0xa0>
 8005fac:	f04f 0a00 	mov.w	sl, #0
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	46b6      	mov	lr, r6
 8005fb4:	46d3      	mov	fp, sl
 8005fb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fba:	b293      	uxth	r3, r2
 8005fbc:	fb05 a303 	mla	r3, r5, r3, sl
 8005fc0:	0c12      	lsrs	r2, r2, #16
 8005fc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fc6:	fb05 a202 	mla	r2, r5, r2, sl
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ebab 0303 	sub.w	r3, fp, r3
 8005fd0:	f8de b000 	ldr.w	fp, [lr]
 8005fd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fd8:	fa1f fb8b 	uxth.w	fp, fp
 8005fdc:	445b      	add	r3, fp
 8005fde:	fa1f fb82 	uxth.w	fp, r2
 8005fe2:	f8de 2000 	ldr.w	r2, [lr]
 8005fe6:	4581      	cmp	r9, r0
 8005fe8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ff6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ffa:	f84e 3b04 	str.w	r3, [lr], #4
 8005ffe:	d2da      	bcs.n	8005fb6 <quorem+0x42>
 8006000:	f856 300c 	ldr.w	r3, [r6, ip]
 8006004:	b933      	cbnz	r3, 8006014 <quorem+0xa0>
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	3b04      	subs	r3, #4
 800600a:	429e      	cmp	r6, r3
 800600c:	461a      	mov	r2, r3
 800600e:	d331      	bcc.n	8006074 <quorem+0x100>
 8006010:	f8c8 4010 	str.w	r4, [r8, #16]
 8006014:	4640      	mov	r0, r8
 8006016:	f001 fbb1 	bl	800777c <__mcmp>
 800601a:	2800      	cmp	r0, #0
 800601c:	db26      	blt.n	800606c <quorem+0xf8>
 800601e:	4630      	mov	r0, r6
 8006020:	f04f 0c00 	mov.w	ip, #0
 8006024:	3501      	adds	r5, #1
 8006026:	f857 1b04 	ldr.w	r1, [r7], #4
 800602a:	f8d0 e000 	ldr.w	lr, [r0]
 800602e:	b28b      	uxth	r3, r1
 8006030:	ebac 0303 	sub.w	r3, ip, r3
 8006034:	fa1f f28e 	uxth.w	r2, lr
 8006038:	4413      	add	r3, r2
 800603a:	0c0a      	lsrs	r2, r1, #16
 800603c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006044:	b29b      	uxth	r3, r3
 8006046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800604a:	45b9      	cmp	r9, r7
 800604c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006050:	f840 3b04 	str.w	r3, [r0], #4
 8006054:	d2e7      	bcs.n	8006026 <quorem+0xb2>
 8006056:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800605a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800605e:	b92a      	cbnz	r2, 800606c <quorem+0xf8>
 8006060:	3b04      	subs	r3, #4
 8006062:	429e      	cmp	r6, r3
 8006064:	461a      	mov	r2, r3
 8006066:	d30b      	bcc.n	8006080 <quorem+0x10c>
 8006068:	f8c8 4010 	str.w	r4, [r8, #16]
 800606c:	4628      	mov	r0, r5
 800606e:	b003      	add	sp, #12
 8006070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	3b04      	subs	r3, #4
 8006078:	2a00      	cmp	r2, #0
 800607a:	d1c9      	bne.n	8006010 <quorem+0x9c>
 800607c:	3c01      	subs	r4, #1
 800607e:	e7c4      	b.n	800600a <quorem+0x96>
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	3b04      	subs	r3, #4
 8006084:	2a00      	cmp	r2, #0
 8006086:	d1ef      	bne.n	8006068 <quorem+0xf4>
 8006088:	3c01      	subs	r4, #1
 800608a:	e7ea      	b.n	8006062 <quorem+0xee>
 800608c:	2000      	movs	r0, #0
 800608e:	e7ee      	b.n	800606e <quorem+0xfa>

08006090 <_dtoa_r>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	461f      	mov	r7, r3
 8006098:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800609a:	b095      	sub	sp, #84	; 0x54
 800609c:	4604      	mov	r4, r0
 800609e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80060a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060a6:	b93d      	cbnz	r5, 80060b8 <_dtoa_r+0x28>
 80060a8:	2010      	movs	r0, #16
 80060aa:	f001 f8e1 	bl	8007270 <malloc>
 80060ae:	6260      	str	r0, [r4, #36]	; 0x24
 80060b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060b4:	6005      	str	r5, [r0, #0]
 80060b6:	60c5      	str	r5, [r0, #12]
 80060b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	b151      	cbz	r1, 80060d4 <_dtoa_r+0x44>
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	2301      	movs	r3, #1
 80060c2:	4093      	lsls	r3, r2
 80060c4:	604a      	str	r2, [r1, #4]
 80060c6:	608b      	str	r3, [r1, #8]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 f938 	bl	800733e <_Bfree>
 80060ce:	2200      	movs	r2, #0
 80060d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	1e3b      	subs	r3, r7, #0
 80060d6:	bfaf      	iteee	ge
 80060d8:	2300      	movge	r3, #0
 80060da:	2201      	movlt	r2, #1
 80060dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	9303      	strlt	r3, [sp, #12]
 80060e2:	bfac      	ite	ge
 80060e4:	f8c8 3000 	strge.w	r3, [r8]
 80060e8:	f8c8 2000 	strlt.w	r2, [r8]
 80060ec:	4bae      	ldr	r3, [pc, #696]	; (80063a8 <_dtoa_r+0x318>)
 80060ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060f2:	ea33 0308 	bics.w	r3, r3, r8
 80060f6:	d11b      	bne.n	8006130 <_dtoa_r+0xa0>
 80060f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80060fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	b923      	cbnz	r3, 800610e <_dtoa_r+0x7e>
 8006104:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006108:	2800      	cmp	r0, #0
 800610a:	f000 8545 	beq.w	8006b98 <_dtoa_r+0xb08>
 800610e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006110:	b953      	cbnz	r3, 8006128 <_dtoa_r+0x98>
 8006112:	4ba6      	ldr	r3, [pc, #664]	; (80063ac <_dtoa_r+0x31c>)
 8006114:	e021      	b.n	800615a <_dtoa_r+0xca>
 8006116:	4ba6      	ldr	r3, [pc, #664]	; (80063b0 <_dtoa_r+0x320>)
 8006118:	9306      	str	r3, [sp, #24]
 800611a:	3308      	adds	r3, #8
 800611c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	9806      	ldr	r0, [sp, #24]
 8006122:	b015      	add	sp, #84	; 0x54
 8006124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006128:	4ba0      	ldr	r3, [pc, #640]	; (80063ac <_dtoa_r+0x31c>)
 800612a:	9306      	str	r3, [sp, #24]
 800612c:	3303      	adds	r3, #3
 800612e:	e7f5      	b.n	800611c <_dtoa_r+0x8c>
 8006130:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	4630      	mov	r0, r6
 800613a:	4639      	mov	r1, r7
 800613c:	f7fa fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8006140:	4682      	mov	sl, r0
 8006142:	b160      	cbz	r0, 800615e <_dtoa_r+0xce>
 8006144:	2301      	movs	r3, #1
 8006146:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8520 	beq.w	8006b92 <_dtoa_r+0xb02>
 8006152:	4b98      	ldr	r3, [pc, #608]	; (80063b4 <_dtoa_r+0x324>)
 8006154:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	3b01      	subs	r3, #1
 800615a:	9306      	str	r3, [sp, #24]
 800615c:	e7e0      	b.n	8006120 <_dtoa_r+0x90>
 800615e:	ab12      	add	r3, sp, #72	; 0x48
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	ab13      	add	r3, sp, #76	; 0x4c
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	4632      	mov	r2, r6
 8006168:	463b      	mov	r3, r7
 800616a:	4620      	mov	r0, r4
 800616c:	f001 fbf4 	bl	8007958 <__d2b>
 8006170:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006174:	4683      	mov	fp, r0
 8006176:	2d00      	cmp	r5, #0
 8006178:	d07d      	beq.n	8006276 <_dtoa_r+0x1e6>
 800617a:	46b0      	mov	r8, r6
 800617c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006180:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006184:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006188:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800618c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006190:	2200      	movs	r2, #0
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <_dtoa_r+0x328>)
 8006194:	4640      	mov	r0, r8
 8006196:	4649      	mov	r1, r9
 8006198:	f7f9 ffe6 	bl	8000168 <__aeabi_dsub>
 800619c:	a37c      	add	r3, pc, #496	; (adr r3, 8006390 <_dtoa_r+0x300>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f999 	bl	80004d8 <__aeabi_dmul>
 80061a6:	a37c      	add	r3, pc, #496	; (adr r3, 8006398 <_dtoa_r+0x308>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7f9 ffde 	bl	800016c <__adddf3>
 80061b0:	4606      	mov	r6, r0
 80061b2:	4628      	mov	r0, r5
 80061b4:	460f      	mov	r7, r1
 80061b6:	f7fa f925 	bl	8000404 <__aeabi_i2d>
 80061ba:	a379      	add	r3, pc, #484	; (adr r3, 80063a0 <_dtoa_r+0x310>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa f98a 	bl	80004d8 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4630      	mov	r0, r6
 80061ca:	4639      	mov	r1, r7
 80061cc:	f7f9 ffce 	bl	800016c <__adddf3>
 80061d0:	4606      	mov	r6, r0
 80061d2:	460f      	mov	r7, r1
 80061d4:	f7fa fc30 	bl	8000a38 <__aeabi_d2iz>
 80061d8:	2200      	movs	r2, #0
 80061da:	4682      	mov	sl, r0
 80061dc:	2300      	movs	r3, #0
 80061de:	4630      	mov	r0, r6
 80061e0:	4639      	mov	r1, r7
 80061e2:	f7fa fbeb 	bl	80009bc <__aeabi_dcmplt>
 80061e6:	b148      	cbz	r0, 80061fc <_dtoa_r+0x16c>
 80061e8:	4650      	mov	r0, sl
 80061ea:	f7fa f90b 	bl	8000404 <__aeabi_i2d>
 80061ee:	4632      	mov	r2, r6
 80061f0:	463b      	mov	r3, r7
 80061f2:	f7fa fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80061f6:	b908      	cbnz	r0, 80061fc <_dtoa_r+0x16c>
 80061f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fc:	f1ba 0f16 	cmp.w	sl, #22
 8006200:	d85a      	bhi.n	80062b8 <_dtoa_r+0x228>
 8006202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006206:	496d      	ldr	r1, [pc, #436]	; (80063bc <_dtoa_r+0x32c>)
 8006208:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800620c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006210:	f7fa fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8006214:	2800      	cmp	r0, #0
 8006216:	d051      	beq.n	80062bc <_dtoa_r+0x22c>
 8006218:	2300      	movs	r3, #0
 800621a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800621e:	930d      	str	r3, [sp, #52]	; 0x34
 8006220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006222:	1b5d      	subs	r5, r3, r5
 8006224:	1e6b      	subs	r3, r5, #1
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	bf43      	ittte	mi
 800622a:	2300      	movmi	r3, #0
 800622c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006230:	9307      	strmi	r3, [sp, #28]
 8006232:	f04f 0900 	movpl.w	r9, #0
 8006236:	f1ba 0f00 	cmp.w	sl, #0
 800623a:	db41      	blt.n	80062c0 <_dtoa_r+0x230>
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006242:	4453      	add	r3, sl
 8006244:	9307      	str	r3, [sp, #28]
 8006246:	2300      	movs	r3, #0
 8006248:	9308      	str	r3, [sp, #32]
 800624a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800624c:	2b09      	cmp	r3, #9
 800624e:	f200 808f 	bhi.w	8006370 <_dtoa_r+0x2e0>
 8006252:	2b05      	cmp	r3, #5
 8006254:	bfc4      	itt	gt
 8006256:	3b04      	subgt	r3, #4
 8006258:	931e      	strgt	r3, [sp, #120]	; 0x78
 800625a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800625c:	bfc8      	it	gt
 800625e:	2500      	movgt	r5, #0
 8006260:	f1a3 0302 	sub.w	r3, r3, #2
 8006264:	bfd8      	it	le
 8006266:	2501      	movle	r5, #1
 8006268:	2b03      	cmp	r3, #3
 800626a:	f200 808d 	bhi.w	8006388 <_dtoa_r+0x2f8>
 800626e:	e8df f003 	tbb	[pc, r3]
 8006272:	7d7b      	.short	0x7d7b
 8006274:	6f2f      	.short	0x6f2f
 8006276:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800627a:	441d      	add	r5, r3
 800627c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006280:	2820      	cmp	r0, #32
 8006282:	dd13      	ble.n	80062ac <_dtoa_r+0x21c>
 8006284:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	fa08 f800 	lsl.w	r8, r8, r0
 800628e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006292:	fa23 f000 	lsr.w	r0, r3, r0
 8006296:	ea48 0000 	orr.w	r0, r8, r0
 800629a:	f7fa f8a3 	bl	80003e4 <__aeabi_ui2d>
 800629e:	2301      	movs	r3, #1
 80062a0:	4680      	mov	r8, r0
 80062a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80062a6:	3d01      	subs	r5, #1
 80062a8:	9310      	str	r3, [sp, #64]	; 0x40
 80062aa:	e771      	b.n	8006190 <_dtoa_r+0x100>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	f1c0 0020 	rsb	r0, r0, #32
 80062b2:	fa03 f000 	lsl.w	r0, r3, r0
 80062b6:	e7f0      	b.n	800629a <_dtoa_r+0x20a>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e7b0      	b.n	800621e <_dtoa_r+0x18e>
 80062bc:	900d      	str	r0, [sp, #52]	; 0x34
 80062be:	e7af      	b.n	8006220 <_dtoa_r+0x190>
 80062c0:	f1ca 0300 	rsb	r3, sl, #0
 80062c4:	9308      	str	r3, [sp, #32]
 80062c6:	2300      	movs	r3, #0
 80062c8:	eba9 090a 	sub.w	r9, r9, sl
 80062cc:	930c      	str	r3, [sp, #48]	; 0x30
 80062ce:	e7bc      	b.n	800624a <_dtoa_r+0x1ba>
 80062d0:	2301      	movs	r3, #1
 80062d2:	9309      	str	r3, [sp, #36]	; 0x24
 80062d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dd74      	ble.n	80063c4 <_dtoa_r+0x334>
 80062da:	4698      	mov	r8, r3
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	2200      	movs	r2, #0
 80062e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062e2:	6072      	str	r2, [r6, #4]
 80062e4:	2204      	movs	r2, #4
 80062e6:	f102 0014 	add.w	r0, r2, #20
 80062ea:	4298      	cmp	r0, r3
 80062ec:	6871      	ldr	r1, [r6, #4]
 80062ee:	d96e      	bls.n	80063ce <_dtoa_r+0x33e>
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fff0 	bl	80072d6 <_Balloc>
 80062f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b8 0f0e 	cmp.w	r8, #14
 8006300:	9306      	str	r3, [sp, #24]
 8006302:	f200 80ed 	bhi.w	80064e0 <_dtoa_r+0x450>
 8006306:	2d00      	cmp	r5, #0
 8006308:	f000 80ea 	beq.w	80064e0 <_dtoa_r+0x450>
 800630c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006310:	f1ba 0f00 	cmp.w	sl, #0
 8006314:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006318:	dd77      	ble.n	800640a <_dtoa_r+0x37a>
 800631a:	4a28      	ldr	r2, [pc, #160]	; (80063bc <_dtoa_r+0x32c>)
 800631c:	f00a 030f 	and.w	r3, sl, #15
 8006320:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006324:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006328:	06f0      	lsls	r0, r6, #27
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006332:	d568      	bpl.n	8006406 <_dtoa_r+0x376>
 8006334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <_dtoa_r+0x330>)
 800633a:	2503      	movs	r5, #3
 800633c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006340:	f7fa f9f4 	bl	800072c <__aeabi_ddiv>
 8006344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006348:	f006 060f 	and.w	r6, r6, #15
 800634c:	4f1c      	ldr	r7, [pc, #112]	; (80063c0 <_dtoa_r+0x330>)
 800634e:	e04f      	b.n	80063f0 <_dtoa_r+0x360>
 8006350:	2301      	movs	r3, #1
 8006352:	9309      	str	r3, [sp, #36]	; 0x24
 8006354:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006356:	4453      	add	r3, sl
 8006358:	f103 0801 	add.w	r8, r3, #1
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	4643      	mov	r3, r8
 8006360:	2b01      	cmp	r3, #1
 8006362:	bfb8      	it	lt
 8006364:	2301      	movlt	r3, #1
 8006366:	e7ba      	b.n	80062de <_dtoa_r+0x24e>
 8006368:	2300      	movs	r3, #0
 800636a:	e7b2      	b.n	80062d2 <_dtoa_r+0x242>
 800636c:	2300      	movs	r3, #0
 800636e:	e7f0      	b.n	8006352 <_dtoa_r+0x2c2>
 8006370:	2501      	movs	r5, #1
 8006372:	2300      	movs	r3, #0
 8006374:	9509      	str	r5, [sp, #36]	; 0x24
 8006376:	931e      	str	r3, [sp, #120]	; 0x78
 8006378:	f04f 33ff 	mov.w	r3, #4294967295
 800637c:	2200      	movs	r2, #0
 800637e:	9304      	str	r3, [sp, #16]
 8006380:	4698      	mov	r8, r3
 8006382:	2312      	movs	r3, #18
 8006384:	921f      	str	r2, [sp, #124]	; 0x7c
 8006386:	e7aa      	b.n	80062de <_dtoa_r+0x24e>
 8006388:	2301      	movs	r3, #1
 800638a:	9309      	str	r3, [sp, #36]	; 0x24
 800638c:	e7f4      	b.n	8006378 <_dtoa_r+0x2e8>
 800638e:	bf00      	nop
 8006390:	636f4361 	.word	0x636f4361
 8006394:	3fd287a7 	.word	0x3fd287a7
 8006398:	8b60c8b3 	.word	0x8b60c8b3
 800639c:	3fc68a28 	.word	0x3fc68a28
 80063a0:	509f79fb 	.word	0x509f79fb
 80063a4:	3fd34413 	.word	0x3fd34413
 80063a8:	7ff00000 	.word	0x7ff00000
 80063ac:	08008141 	.word	0x08008141
 80063b0:	08008138 	.word	0x08008138
 80063b4:	080080b9 	.word	0x080080b9
 80063b8:	3ff80000 	.word	0x3ff80000
 80063bc:	08008178 	.word	0x08008178
 80063c0:	08008150 	.word	0x08008150
 80063c4:	2301      	movs	r3, #1
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	4698      	mov	r8, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	e7da      	b.n	8006384 <_dtoa_r+0x2f4>
 80063ce:	3101      	adds	r1, #1
 80063d0:	6071      	str	r1, [r6, #4]
 80063d2:	0052      	lsls	r2, r2, #1
 80063d4:	e787      	b.n	80062e6 <_dtoa_r+0x256>
 80063d6:	07f1      	lsls	r1, r6, #31
 80063d8:	d508      	bpl.n	80063ec <_dtoa_r+0x35c>
 80063da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e2:	f7fa f879 	bl	80004d8 <__aeabi_dmul>
 80063e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063ea:	3501      	adds	r5, #1
 80063ec:	1076      	asrs	r6, r6, #1
 80063ee:	3708      	adds	r7, #8
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	d1f0      	bne.n	80063d6 <_dtoa_r+0x346>
 80063f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fc:	f7fa f996 	bl	800072c <__aeabi_ddiv>
 8006400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006404:	e01b      	b.n	800643e <_dtoa_r+0x3ae>
 8006406:	2502      	movs	r5, #2
 8006408:	e7a0      	b.n	800634c <_dtoa_r+0x2bc>
 800640a:	f000 80a4 	beq.w	8006556 <_dtoa_r+0x4c6>
 800640e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006412:	f1ca 0600 	rsb	r6, sl, #0
 8006416:	4ba0      	ldr	r3, [pc, #640]	; (8006698 <_dtoa_r+0x608>)
 8006418:	f006 020f 	and.w	r2, r6, #15
 800641c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f7fa f858 	bl	80004d8 <__aeabi_dmul>
 8006428:	2502      	movs	r5, #2
 800642a:	2300      	movs	r3, #0
 800642c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006430:	4f9a      	ldr	r7, [pc, #616]	; (800669c <_dtoa_r+0x60c>)
 8006432:	1136      	asrs	r6, r6, #4
 8006434:	2e00      	cmp	r6, #0
 8006436:	f040 8083 	bne.w	8006540 <_dtoa_r+0x4b0>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e0      	bne.n	8006400 <_dtoa_r+0x370>
 800643e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 808a 	beq.w	800655a <_dtoa_r+0x4ca>
 8006446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800644a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800644e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006452:	2200      	movs	r2, #0
 8006454:	4b92      	ldr	r3, [pc, #584]	; (80066a0 <_dtoa_r+0x610>)
 8006456:	f7fa fab1 	bl	80009bc <__aeabi_dcmplt>
 800645a:	2800      	cmp	r0, #0
 800645c:	d07d      	beq.n	800655a <_dtoa_r+0x4ca>
 800645e:	f1b8 0f00 	cmp.w	r8, #0
 8006462:	d07a      	beq.n	800655a <_dtoa_r+0x4ca>
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	dd36      	ble.n	80064d8 <_dtoa_r+0x448>
 800646a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800646e:	2200      	movs	r2, #0
 8006470:	4b8c      	ldr	r3, [pc, #560]	; (80066a4 <_dtoa_r+0x614>)
 8006472:	f7fa f831 	bl	80004d8 <__aeabi_dmul>
 8006476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800647a:	9e04      	ldr	r6, [sp, #16]
 800647c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006480:	3501      	adds	r5, #1
 8006482:	4628      	mov	r0, r5
 8006484:	f7f9 ffbe 	bl	8000404 <__aeabi_i2d>
 8006488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800648c:	f7fa f824 	bl	80004d8 <__aeabi_dmul>
 8006490:	2200      	movs	r2, #0
 8006492:	4b85      	ldr	r3, [pc, #532]	; (80066a8 <_dtoa_r+0x618>)
 8006494:	f7f9 fe6a 	bl	800016c <__adddf3>
 8006498:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800649c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80064a2:	2e00      	cmp	r6, #0
 80064a4:	d15c      	bne.n	8006560 <_dtoa_r+0x4d0>
 80064a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b7f      	ldr	r3, [pc, #508]	; (80066ac <_dtoa_r+0x61c>)
 80064ae:	f7f9 fe5b 	bl	8000168 <__aeabi_dsub>
 80064b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b4:	462b      	mov	r3, r5
 80064b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ba:	f7fa fa9d 	bl	80009f8 <__aeabi_dcmpgt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f040 8281 	bne.w	80069c6 <_dtoa_r+0x936>
 80064c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80064ce:	f7fa fa75 	bl	80009bc <__aeabi_dcmplt>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	f040 8275 	bne.w	80069c2 <_dtoa_r+0x932>
 80064d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80064dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f2c0 814b 	blt.w	800677e <_dtoa_r+0x6ee>
 80064e8:	f1ba 0f0e 	cmp.w	sl, #14
 80064ec:	f300 8147 	bgt.w	800677e <_dtoa_r+0x6ee>
 80064f0:	4b69      	ldr	r3, [pc, #420]	; (8006698 <_dtoa_r+0x608>)
 80064f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006500:	2b00      	cmp	r3, #0
 8006502:	f280 80d7 	bge.w	80066b4 <_dtoa_r+0x624>
 8006506:	f1b8 0f00 	cmp.w	r8, #0
 800650a:	f300 80d3 	bgt.w	80066b4 <_dtoa_r+0x624>
 800650e:	f040 8257 	bne.w	80069c0 <_dtoa_r+0x930>
 8006512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006516:	2200      	movs	r2, #0
 8006518:	4b64      	ldr	r3, [pc, #400]	; (80066ac <_dtoa_r+0x61c>)
 800651a:	f7f9 ffdd 	bl	80004d8 <__aeabi_dmul>
 800651e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006522:	f7fa fa5f 	bl	80009e4 <__aeabi_dcmpge>
 8006526:	4646      	mov	r6, r8
 8006528:	4647      	mov	r7, r8
 800652a:	2800      	cmp	r0, #0
 800652c:	f040 822d 	bne.w	800698a <_dtoa_r+0x8fa>
 8006530:	9b06      	ldr	r3, [sp, #24]
 8006532:	9a06      	ldr	r2, [sp, #24]
 8006534:	1c5d      	adds	r5, r3, #1
 8006536:	2331      	movs	r3, #49	; 0x31
 8006538:	f10a 0a01 	add.w	sl, sl, #1
 800653c:	7013      	strb	r3, [r2, #0]
 800653e:	e228      	b.n	8006992 <_dtoa_r+0x902>
 8006540:	07f2      	lsls	r2, r6, #31
 8006542:	d505      	bpl.n	8006550 <_dtoa_r+0x4c0>
 8006544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006548:	f7f9 ffc6 	bl	80004d8 <__aeabi_dmul>
 800654c:	2301      	movs	r3, #1
 800654e:	3501      	adds	r5, #1
 8006550:	1076      	asrs	r6, r6, #1
 8006552:	3708      	adds	r7, #8
 8006554:	e76e      	b.n	8006434 <_dtoa_r+0x3a4>
 8006556:	2502      	movs	r5, #2
 8006558:	e771      	b.n	800643e <_dtoa_r+0x3ae>
 800655a:	4657      	mov	r7, sl
 800655c:	4646      	mov	r6, r8
 800655e:	e790      	b.n	8006482 <_dtoa_r+0x3f2>
 8006560:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <_dtoa_r+0x608>)
 8006562:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006566:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800656a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	d048      	beq.n	8006602 <_dtoa_r+0x572>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	2000      	movs	r0, #0
 8006576:	494e      	ldr	r1, [pc, #312]	; (80066b0 <_dtoa_r+0x620>)
 8006578:	f7fa f8d8 	bl	800072c <__aeabi_ddiv>
 800657c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006580:	f7f9 fdf2 	bl	8000168 <__aeabi_dsub>
 8006584:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006588:	9d06      	ldr	r5, [sp, #24]
 800658a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800658e:	f7fa fa53 	bl	8000a38 <__aeabi_d2iz>
 8006592:	9011      	str	r0, [sp, #68]	; 0x44
 8006594:	f7f9 ff36 	bl	8000404 <__aeabi_i2d>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a0:	f7f9 fde2 	bl	8000168 <__aeabi_dsub>
 80065a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065aa:	3330      	adds	r3, #48	; 0x30
 80065ac:	f805 3b01 	strb.w	r3, [r5], #1
 80065b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065b4:	f7fa fa02 	bl	80009bc <__aeabi_dcmplt>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d163      	bne.n	8006684 <_dtoa_r+0x5f4>
 80065bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c0:	2000      	movs	r0, #0
 80065c2:	4937      	ldr	r1, [pc, #220]	; (80066a0 <_dtoa_r+0x610>)
 80065c4:	f7f9 fdd0 	bl	8000168 <__aeabi_dsub>
 80065c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065cc:	f7fa f9f6 	bl	80009bc <__aeabi_dcmplt>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f040 80b5 	bne.w	8006740 <_dtoa_r+0x6b0>
 80065d6:	9b06      	ldr	r3, [sp, #24]
 80065d8:	1aeb      	subs	r3, r5, r3
 80065da:	429e      	cmp	r6, r3
 80065dc:	f77f af7c 	ble.w	80064d8 <_dtoa_r+0x448>
 80065e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065e4:	2200      	movs	r2, #0
 80065e6:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <_dtoa_r+0x614>)
 80065e8:	f7f9 ff76 	bl	80004d8 <__aeabi_dmul>
 80065ec:	2200      	movs	r2, #0
 80065ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f6:	4b2b      	ldr	r3, [pc, #172]	; (80066a4 <_dtoa_r+0x614>)
 80065f8:	f7f9 ff6e 	bl	80004d8 <__aeabi_dmul>
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	e7c3      	b.n	800658a <_dtoa_r+0x4fa>
 8006602:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006606:	f7f9 ff67 	bl	80004d8 <__aeabi_dmul>
 800660a:	9b06      	ldr	r3, [sp, #24]
 800660c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006610:	199d      	adds	r5, r3, r6
 8006612:	461e      	mov	r6, r3
 8006614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006618:	f7fa fa0e 	bl	8000a38 <__aeabi_d2iz>
 800661c:	9011      	str	r0, [sp, #68]	; 0x44
 800661e:	f7f9 fef1 	bl	8000404 <__aeabi_i2d>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662a:	f7f9 fd9d 	bl	8000168 <__aeabi_dsub>
 800662e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006634:	3330      	adds	r3, #48	; 0x30
 8006636:	f806 3b01 	strb.w	r3, [r6], #1
 800663a:	42ae      	cmp	r6, r5
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	d124      	bne.n	800668c <_dtoa_r+0x5fc>
 8006642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006646:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <_dtoa_r+0x620>)
 8006648:	f7f9 fd90 	bl	800016c <__adddf3>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006654:	f7fa f9d0 	bl	80009f8 <__aeabi_dcmpgt>
 8006658:	2800      	cmp	r0, #0
 800665a:	d171      	bne.n	8006740 <_dtoa_r+0x6b0>
 800665c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006660:	2000      	movs	r0, #0
 8006662:	4913      	ldr	r1, [pc, #76]	; (80066b0 <_dtoa_r+0x620>)
 8006664:	f7f9 fd80 	bl	8000168 <__aeabi_dsub>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006670:	f7fa f9a4 	bl	80009bc <__aeabi_dcmplt>
 8006674:	2800      	cmp	r0, #0
 8006676:	f43f af2f 	beq.w	80064d8 <_dtoa_r+0x448>
 800667a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800667e:	1e6a      	subs	r2, r5, #1
 8006680:	2b30      	cmp	r3, #48	; 0x30
 8006682:	d001      	beq.n	8006688 <_dtoa_r+0x5f8>
 8006684:	46ba      	mov	sl, r7
 8006686:	e04a      	b.n	800671e <_dtoa_r+0x68e>
 8006688:	4615      	mov	r5, r2
 800668a:	e7f6      	b.n	800667a <_dtoa_r+0x5ea>
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <_dtoa_r+0x614>)
 800668e:	f7f9 ff23 	bl	80004d8 <__aeabi_dmul>
 8006692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006696:	e7bd      	b.n	8006614 <_dtoa_r+0x584>
 8006698:	08008178 	.word	0x08008178
 800669c:	08008150 	.word	0x08008150
 80066a0:	3ff00000 	.word	0x3ff00000
 80066a4:	40240000 	.word	0x40240000
 80066a8:	401c0000 	.word	0x401c0000
 80066ac:	40140000 	.word	0x40140000
 80066b0:	3fe00000 	.word	0x3fe00000
 80066b4:	9d06      	ldr	r5, [sp, #24]
 80066b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7fa f833 	bl	800072c <__aeabi_ddiv>
 80066c6:	f7fa f9b7 	bl	8000a38 <__aeabi_d2iz>
 80066ca:	4681      	mov	r9, r0
 80066cc:	f7f9 fe9a 	bl	8000404 <__aeabi_i2d>
 80066d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d4:	f7f9 ff00 	bl	80004d8 <__aeabi_dmul>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7f9 fd42 	bl	8000168 <__aeabi_dsub>
 80066e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80066e8:	f805 6b01 	strb.w	r6, [r5], #1
 80066ec:	9e06      	ldr	r6, [sp, #24]
 80066ee:	4602      	mov	r2, r0
 80066f0:	1bae      	subs	r6, r5, r6
 80066f2:	45b0      	cmp	r8, r6
 80066f4:	460b      	mov	r3, r1
 80066f6:	d135      	bne.n	8006764 <_dtoa_r+0x6d4>
 80066f8:	f7f9 fd38 	bl	800016c <__adddf3>
 80066fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006700:	4606      	mov	r6, r0
 8006702:	460f      	mov	r7, r1
 8006704:	f7fa f978 	bl	80009f8 <__aeabi_dcmpgt>
 8006708:	b9c8      	cbnz	r0, 800673e <_dtoa_r+0x6ae>
 800670a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7fa f949 	bl	80009a8 <__aeabi_dcmpeq>
 8006716:	b110      	cbz	r0, 800671e <_dtoa_r+0x68e>
 8006718:	f019 0f01 	tst.w	r9, #1
 800671c:	d10f      	bne.n	800673e <_dtoa_r+0x6ae>
 800671e:	4659      	mov	r1, fp
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fe0c 	bl	800733e <_Bfree>
 8006726:	2300      	movs	r3, #0
 8006728:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800672a:	702b      	strb	r3, [r5, #0]
 800672c:	f10a 0301 	add.w	r3, sl, #1
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006734:	2b00      	cmp	r3, #0
 8006736:	f43f acf3 	beq.w	8006120 <_dtoa_r+0x90>
 800673a:	601d      	str	r5, [r3, #0]
 800673c:	e4f0      	b.n	8006120 <_dtoa_r+0x90>
 800673e:	4657      	mov	r7, sl
 8006740:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006744:	1e6b      	subs	r3, r5, #1
 8006746:	2a39      	cmp	r2, #57	; 0x39
 8006748:	d106      	bne.n	8006758 <_dtoa_r+0x6c8>
 800674a:	9a06      	ldr	r2, [sp, #24]
 800674c:	429a      	cmp	r2, r3
 800674e:	d107      	bne.n	8006760 <_dtoa_r+0x6d0>
 8006750:	2330      	movs	r3, #48	; 0x30
 8006752:	7013      	strb	r3, [r2, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	3701      	adds	r7, #1
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	3201      	adds	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e791      	b.n	8006684 <_dtoa_r+0x5f4>
 8006760:	461d      	mov	r5, r3
 8006762:	e7ed      	b.n	8006740 <_dtoa_r+0x6b0>
 8006764:	2200      	movs	r2, #0
 8006766:	4b99      	ldr	r3, [pc, #612]	; (80069cc <_dtoa_r+0x93c>)
 8006768:	f7f9 feb6 	bl	80004d8 <__aeabi_dmul>
 800676c:	2200      	movs	r2, #0
 800676e:	2300      	movs	r3, #0
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	f7fa f918 	bl	80009a8 <__aeabi_dcmpeq>
 8006778:	2800      	cmp	r0, #0
 800677a:	d09e      	beq.n	80066ba <_dtoa_r+0x62a>
 800677c:	e7cf      	b.n	800671e <_dtoa_r+0x68e>
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	2a00      	cmp	r2, #0
 8006782:	f000 8088 	beq.w	8006896 <_dtoa_r+0x806>
 8006786:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006788:	2a01      	cmp	r2, #1
 800678a:	dc6d      	bgt.n	8006868 <_dtoa_r+0x7d8>
 800678c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800678e:	2a00      	cmp	r2, #0
 8006790:	d066      	beq.n	8006860 <_dtoa_r+0x7d0>
 8006792:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006796:	464d      	mov	r5, r9
 8006798:	9e08      	ldr	r6, [sp, #32]
 800679a:	9a07      	ldr	r2, [sp, #28]
 800679c:	2101      	movs	r1, #1
 800679e:	441a      	add	r2, r3
 80067a0:	4620      	mov	r0, r4
 80067a2:	4499      	add	r9, r3
 80067a4:	9207      	str	r2, [sp, #28]
 80067a6:	f000 fea8 	bl	80074fa <__i2b>
 80067aa:	4607      	mov	r7, r0
 80067ac:	2d00      	cmp	r5, #0
 80067ae:	dd0b      	ble.n	80067c8 <_dtoa_r+0x738>
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd08      	ble.n	80067c8 <_dtoa_r+0x738>
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	bfa8      	it	ge
 80067ba:	462b      	movge	r3, r5
 80067bc:	9a07      	ldr	r2, [sp, #28]
 80067be:	eba9 0903 	sub.w	r9, r9, r3
 80067c2:	1aed      	subs	r5, r5, r3
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	9b08      	ldr	r3, [sp, #32]
 80067ca:	b1eb      	cbz	r3, 8006808 <_dtoa_r+0x778>
 80067cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d065      	beq.n	800689e <_dtoa_r+0x80e>
 80067d2:	b18e      	cbz	r6, 80067f8 <_dtoa_r+0x768>
 80067d4:	4639      	mov	r1, r7
 80067d6:	4632      	mov	r2, r6
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 ff2d 	bl	8007638 <__pow5mult>
 80067de:	465a      	mov	r2, fp
 80067e0:	4601      	mov	r1, r0
 80067e2:	4607      	mov	r7, r0
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 fe91 	bl	800750c <__multiply>
 80067ea:	4659      	mov	r1, fp
 80067ec:	900a      	str	r0, [sp, #40]	; 0x28
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 fda5 	bl	800733e <_Bfree>
 80067f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f6:	469b      	mov	fp, r3
 80067f8:	9b08      	ldr	r3, [sp, #32]
 80067fa:	1b9a      	subs	r2, r3, r6
 80067fc:	d004      	beq.n	8006808 <_dtoa_r+0x778>
 80067fe:	4659      	mov	r1, fp
 8006800:	4620      	mov	r0, r4
 8006802:	f000 ff19 	bl	8007638 <__pow5mult>
 8006806:	4683      	mov	fp, r0
 8006808:	2101      	movs	r1, #1
 800680a:	4620      	mov	r0, r4
 800680c:	f000 fe75 	bl	80074fa <__i2b>
 8006810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006812:	4606      	mov	r6, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 81c6 	beq.w	8006ba6 <_dtoa_r+0xb16>
 800681a:	461a      	mov	r2, r3
 800681c:	4601      	mov	r1, r0
 800681e:	4620      	mov	r0, r4
 8006820:	f000 ff0a 	bl	8007638 <__pow5mult>
 8006824:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006826:	4606      	mov	r6, r0
 8006828:	2b01      	cmp	r3, #1
 800682a:	dc3e      	bgt.n	80068aa <_dtoa_r+0x81a>
 800682c:	9b02      	ldr	r3, [sp, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d137      	bne.n	80068a2 <_dtoa_r+0x812>
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006838:	2b00      	cmp	r3, #0
 800683a:	d134      	bne.n	80068a6 <_dtoa_r+0x816>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006842:	0d1b      	lsrs	r3, r3, #20
 8006844:	051b      	lsls	r3, r3, #20
 8006846:	b12b      	cbz	r3, 8006854 <_dtoa_r+0x7c4>
 8006848:	9b07      	ldr	r3, [sp, #28]
 800684a:	f109 0901 	add.w	r9, r9, #1
 800684e:	3301      	adds	r3, #1
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	2301      	movs	r3, #1
 8006854:	9308      	str	r3, [sp, #32]
 8006856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006858:	2b00      	cmp	r3, #0
 800685a:	d128      	bne.n	80068ae <_dtoa_r+0x81e>
 800685c:	2001      	movs	r0, #1
 800685e:	e02e      	b.n	80068be <_dtoa_r+0x82e>
 8006860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006862:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006866:	e796      	b.n	8006796 <_dtoa_r+0x706>
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	f108 36ff 	add.w	r6, r8, #4294967295
 800686e:	42b3      	cmp	r3, r6
 8006870:	bfb7      	itett	lt
 8006872:	9b08      	ldrlt	r3, [sp, #32]
 8006874:	1b9e      	subge	r6, r3, r6
 8006876:	1af2      	sublt	r2, r6, r3
 8006878:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800687a:	bfbf      	itttt	lt
 800687c:	9608      	strlt	r6, [sp, #32]
 800687e:	189b      	addlt	r3, r3, r2
 8006880:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006882:	2600      	movlt	r6, #0
 8006884:	f1b8 0f00 	cmp.w	r8, #0
 8006888:	bfb9      	ittee	lt
 800688a:	eba9 0508 	sublt.w	r5, r9, r8
 800688e:	2300      	movlt	r3, #0
 8006890:	464d      	movge	r5, r9
 8006892:	4643      	movge	r3, r8
 8006894:	e781      	b.n	800679a <_dtoa_r+0x70a>
 8006896:	9e08      	ldr	r6, [sp, #32]
 8006898:	464d      	mov	r5, r9
 800689a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800689c:	e786      	b.n	80067ac <_dtoa_r+0x71c>
 800689e:	9a08      	ldr	r2, [sp, #32]
 80068a0:	e7ad      	b.n	80067fe <_dtoa_r+0x76e>
 80068a2:	2300      	movs	r3, #0
 80068a4:	e7d6      	b.n	8006854 <_dtoa_r+0x7c4>
 80068a6:	9b02      	ldr	r3, [sp, #8]
 80068a8:	e7d4      	b.n	8006854 <_dtoa_r+0x7c4>
 80068aa:	2300      	movs	r3, #0
 80068ac:	9308      	str	r3, [sp, #32]
 80068ae:	6933      	ldr	r3, [r6, #16]
 80068b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068b4:	6918      	ldr	r0, [r3, #16]
 80068b6:	f000 fdd2 	bl	800745e <__hi0bits>
 80068ba:	f1c0 0020 	rsb	r0, r0, #32
 80068be:	9b07      	ldr	r3, [sp, #28]
 80068c0:	4418      	add	r0, r3
 80068c2:	f010 001f 	ands.w	r0, r0, #31
 80068c6:	d047      	beq.n	8006958 <_dtoa_r+0x8c8>
 80068c8:	f1c0 0320 	rsb	r3, r0, #32
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	dd3b      	ble.n	8006948 <_dtoa_r+0x8b8>
 80068d0:	9b07      	ldr	r3, [sp, #28]
 80068d2:	f1c0 001c 	rsb	r0, r0, #28
 80068d6:	4481      	add	r9, r0
 80068d8:	4405      	add	r5, r0
 80068da:	4403      	add	r3, r0
 80068dc:	9307      	str	r3, [sp, #28]
 80068de:	f1b9 0f00 	cmp.w	r9, #0
 80068e2:	dd05      	ble.n	80068f0 <_dtoa_r+0x860>
 80068e4:	4659      	mov	r1, fp
 80068e6:	464a      	mov	r2, r9
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fef3 	bl	80076d4 <__lshift>
 80068ee:	4683      	mov	fp, r0
 80068f0:	9b07      	ldr	r3, [sp, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dd05      	ble.n	8006902 <_dtoa_r+0x872>
 80068f6:	4631      	mov	r1, r6
 80068f8:	461a      	mov	r2, r3
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 feea 	bl	80076d4 <__lshift>
 8006900:	4606      	mov	r6, r0
 8006902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006904:	b353      	cbz	r3, 800695c <_dtoa_r+0x8cc>
 8006906:	4631      	mov	r1, r6
 8006908:	4658      	mov	r0, fp
 800690a:	f000 ff37 	bl	800777c <__mcmp>
 800690e:	2800      	cmp	r0, #0
 8006910:	da24      	bge.n	800695c <_dtoa_r+0x8cc>
 8006912:	2300      	movs	r3, #0
 8006914:	4659      	mov	r1, fp
 8006916:	220a      	movs	r2, #10
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fd27 	bl	800736c <__multadd>
 800691e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006920:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006924:	4683      	mov	fp, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8144 	beq.w	8006bb4 <_dtoa_r+0xb24>
 800692c:	2300      	movs	r3, #0
 800692e:	4639      	mov	r1, r7
 8006930:	220a      	movs	r2, #10
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fd1a 	bl	800736c <__multadd>
 8006938:	9b04      	ldr	r3, [sp, #16]
 800693a:	4607      	mov	r7, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	dc4d      	bgt.n	80069dc <_dtoa_r+0x94c>
 8006940:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006942:	2b02      	cmp	r3, #2
 8006944:	dd4a      	ble.n	80069dc <_dtoa_r+0x94c>
 8006946:	e011      	b.n	800696c <_dtoa_r+0x8dc>
 8006948:	d0c9      	beq.n	80068de <_dtoa_r+0x84e>
 800694a:	9a07      	ldr	r2, [sp, #28]
 800694c:	331c      	adds	r3, #28
 800694e:	441a      	add	r2, r3
 8006950:	4499      	add	r9, r3
 8006952:	441d      	add	r5, r3
 8006954:	4613      	mov	r3, r2
 8006956:	e7c1      	b.n	80068dc <_dtoa_r+0x84c>
 8006958:	4603      	mov	r3, r0
 800695a:	e7f6      	b.n	800694a <_dtoa_r+0x8ba>
 800695c:	f1b8 0f00 	cmp.w	r8, #0
 8006960:	dc36      	bgt.n	80069d0 <_dtoa_r+0x940>
 8006962:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006964:	2b02      	cmp	r3, #2
 8006966:	dd33      	ble.n	80069d0 <_dtoa_r+0x940>
 8006968:	f8cd 8010 	str.w	r8, [sp, #16]
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	b963      	cbnz	r3, 800698a <_dtoa_r+0x8fa>
 8006970:	4631      	mov	r1, r6
 8006972:	2205      	movs	r2, #5
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fcf9 	bl	800736c <__multadd>
 800697a:	4601      	mov	r1, r0
 800697c:	4606      	mov	r6, r0
 800697e:	4658      	mov	r0, fp
 8006980:	f000 fefc 	bl	800777c <__mcmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	f73f add3 	bgt.w	8006530 <_dtoa_r+0x4a0>
 800698a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800698c:	9d06      	ldr	r5, [sp, #24]
 800698e:	ea6f 0a03 	mvn.w	sl, r3
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	4631      	mov	r1, r6
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fcd0 	bl	800733e <_Bfree>
 800699e:	2f00      	cmp	r7, #0
 80069a0:	f43f aebd 	beq.w	800671e <_dtoa_r+0x68e>
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	d005      	beq.n	80069b6 <_dtoa_r+0x926>
 80069aa:	45b9      	cmp	r9, r7
 80069ac:	d003      	beq.n	80069b6 <_dtoa_r+0x926>
 80069ae:	4649      	mov	r1, r9
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fcc4 	bl	800733e <_Bfree>
 80069b6:	4639      	mov	r1, r7
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fcc0 	bl	800733e <_Bfree>
 80069be:	e6ae      	b.n	800671e <_dtoa_r+0x68e>
 80069c0:	2600      	movs	r6, #0
 80069c2:	4637      	mov	r7, r6
 80069c4:	e7e1      	b.n	800698a <_dtoa_r+0x8fa>
 80069c6:	46ba      	mov	sl, r7
 80069c8:	4637      	mov	r7, r6
 80069ca:	e5b1      	b.n	8006530 <_dtoa_r+0x4a0>
 80069cc:	40240000 	.word	0x40240000
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 80f3 	beq.w	8006bc2 <_dtoa_r+0xb32>
 80069dc:	2d00      	cmp	r5, #0
 80069de:	dd05      	ble.n	80069ec <_dtoa_r+0x95c>
 80069e0:	4639      	mov	r1, r7
 80069e2:	462a      	mov	r2, r5
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fe75 	bl	80076d4 <__lshift>
 80069ea:	4607      	mov	r7, r0
 80069ec:	9b08      	ldr	r3, [sp, #32]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d04c      	beq.n	8006a8c <_dtoa_r+0x9fc>
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fc6e 	bl	80072d6 <_Balloc>
 80069fa:	4605      	mov	r5, r0
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	f107 010c 	add.w	r1, r7, #12
 8006a02:	3202      	adds	r2, #2
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	300c      	adds	r0, #12
 8006a08:	f000 fc5a 	bl	80072c0 <memcpy>
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fe5f 	bl	80076d4 <__lshift>
 8006a16:	46b9      	mov	r9, r7
 8006a18:	4607      	mov	r7, r0
 8006a1a:	9b06      	ldr	r3, [sp, #24]
 8006a1c:	9307      	str	r3, [sp, #28]
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	9308      	str	r3, [sp, #32]
 8006a26:	4631      	mov	r1, r6
 8006a28:	4658      	mov	r0, fp
 8006a2a:	f7ff faa3 	bl	8005f74 <quorem>
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4605      	mov	r5, r0
 8006a32:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a36:	4658      	mov	r0, fp
 8006a38:	f000 fea0 	bl	800777c <__mcmp>
 8006a3c:	463a      	mov	r2, r7
 8006a3e:	9002      	str	r0, [sp, #8]
 8006a40:	4631      	mov	r1, r6
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 feb4 	bl	80077b0 <__mdiff>
 8006a48:	68c3      	ldr	r3, [r0, #12]
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	bb03      	cbnz	r3, 8006a90 <_dtoa_r+0xa00>
 8006a4e:	4601      	mov	r1, r0
 8006a50:	9009      	str	r0, [sp, #36]	; 0x24
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fe92 	bl	800777c <__mcmp>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4620      	mov	r0, r4
 8006a60:	9309      	str	r3, [sp, #36]	; 0x24
 8006a62:	f000 fc6c 	bl	800733e <_Bfree>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	b9a3      	cbnz	r3, 8006a94 <_dtoa_r+0xa04>
 8006a6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a6c:	b992      	cbnz	r2, 8006a94 <_dtoa_r+0xa04>
 8006a6e:	9a08      	ldr	r2, [sp, #32]
 8006a70:	b982      	cbnz	r2, 8006a94 <_dtoa_r+0xa04>
 8006a72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a76:	d029      	beq.n	8006acc <_dtoa_r+0xa3c>
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dd01      	ble.n	8006a82 <_dtoa_r+0x9f2>
 8006a7e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a82:	9b07      	ldr	r3, [sp, #28]
 8006a84:	1c5d      	adds	r5, r3, #1
 8006a86:	f883 8000 	strb.w	r8, [r3]
 8006a8a:	e784      	b.n	8006996 <_dtoa_r+0x906>
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	e7c2      	b.n	8006a16 <_dtoa_r+0x986>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7e3      	b.n	8006a5c <_dtoa_r+0x9cc>
 8006a94:	9a02      	ldr	r2, [sp, #8]
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	db04      	blt.n	8006aa4 <_dtoa_r+0xa14>
 8006a9a:	d123      	bne.n	8006ae4 <_dtoa_r+0xa54>
 8006a9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a9e:	bb0a      	cbnz	r2, 8006ae4 <_dtoa_r+0xa54>
 8006aa0:	9a08      	ldr	r2, [sp, #32]
 8006aa2:	b9fa      	cbnz	r2, 8006ae4 <_dtoa_r+0xa54>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	ddec      	ble.n	8006a82 <_dtoa_r+0x9f2>
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fe11 	bl	80076d4 <__lshift>
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4683      	mov	fp, r0
 8006ab6:	f000 fe61 	bl	800777c <__mcmp>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	dc03      	bgt.n	8006ac6 <_dtoa_r+0xa36>
 8006abe:	d1e0      	bne.n	8006a82 <_dtoa_r+0x9f2>
 8006ac0:	f018 0f01 	tst.w	r8, #1
 8006ac4:	d0dd      	beq.n	8006a82 <_dtoa_r+0x9f2>
 8006ac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aca:	d1d8      	bne.n	8006a7e <_dtoa_r+0x9ee>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	9a07      	ldr	r2, [sp, #28]
 8006ad0:	1c5d      	adds	r5, r3, #1
 8006ad2:	2339      	movs	r3, #57	; 0x39
 8006ad4:	7013      	strb	r3, [r2, #0]
 8006ad6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ada:	1e6a      	subs	r2, r5, #1
 8006adc:	2b39      	cmp	r3, #57	; 0x39
 8006ade:	d04d      	beq.n	8006b7c <_dtoa_r+0xaec>
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	e052      	b.n	8006b8a <_dtoa_r+0xafa>
 8006ae4:	9a07      	ldr	r2, [sp, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f102 0501 	add.w	r5, r2, #1
 8006aec:	dd06      	ble.n	8006afc <_dtoa_r+0xa6c>
 8006aee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006af2:	d0eb      	beq.n	8006acc <_dtoa_r+0xa3c>
 8006af4:	f108 0801 	add.w	r8, r8, #1
 8006af8:	9b07      	ldr	r3, [sp, #28]
 8006afa:	e7c4      	b.n	8006a86 <_dtoa_r+0x9f6>
 8006afc:	9b06      	ldr	r3, [sp, #24]
 8006afe:	9a04      	ldr	r2, [sp, #16]
 8006b00:	1aeb      	subs	r3, r5, r3
 8006b02:	4293      	cmp	r3, r2
 8006b04:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b08:	d021      	beq.n	8006b4e <_dtoa_r+0xabe>
 8006b0a:	4659      	mov	r1, fp
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	220a      	movs	r2, #10
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fc2b 	bl	800736c <__multadd>
 8006b16:	45b9      	cmp	r9, r7
 8006b18:	4683      	mov	fp, r0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	f04f 020a 	mov.w	r2, #10
 8006b22:	4649      	mov	r1, r9
 8006b24:	4620      	mov	r0, r4
 8006b26:	d105      	bne.n	8006b34 <_dtoa_r+0xaa4>
 8006b28:	f000 fc20 	bl	800736c <__multadd>
 8006b2c:	4681      	mov	r9, r0
 8006b2e:	4607      	mov	r7, r0
 8006b30:	9507      	str	r5, [sp, #28]
 8006b32:	e778      	b.n	8006a26 <_dtoa_r+0x996>
 8006b34:	f000 fc1a 	bl	800736c <__multadd>
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4681      	mov	r9, r0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	220a      	movs	r2, #10
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fc13 	bl	800736c <__multadd>
 8006b46:	4607      	mov	r7, r0
 8006b48:	e7f2      	b.n	8006b30 <_dtoa_r+0xaa0>
 8006b4a:	f04f 0900 	mov.w	r9, #0
 8006b4e:	4659      	mov	r1, fp
 8006b50:	2201      	movs	r2, #1
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fdbe 	bl	80076d4 <__lshift>
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4683      	mov	fp, r0
 8006b5c:	f000 fe0e 	bl	800777c <__mcmp>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	dcb8      	bgt.n	8006ad6 <_dtoa_r+0xa46>
 8006b64:	d102      	bne.n	8006b6c <_dtoa_r+0xadc>
 8006b66:	f018 0f01 	tst.w	r8, #1
 8006b6a:	d1b4      	bne.n	8006ad6 <_dtoa_r+0xa46>
 8006b6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b70:	1e6a      	subs	r2, r5, #1
 8006b72:	2b30      	cmp	r3, #48	; 0x30
 8006b74:	f47f af0f 	bne.w	8006996 <_dtoa_r+0x906>
 8006b78:	4615      	mov	r5, r2
 8006b7a:	e7f7      	b.n	8006b6c <_dtoa_r+0xadc>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d105      	bne.n	8006b8e <_dtoa_r+0xafe>
 8006b82:	2331      	movs	r3, #49	; 0x31
 8006b84:	9a06      	ldr	r2, [sp, #24]
 8006b86:	f10a 0a01 	add.w	sl, sl, #1
 8006b8a:	7013      	strb	r3, [r2, #0]
 8006b8c:	e703      	b.n	8006996 <_dtoa_r+0x906>
 8006b8e:	4615      	mov	r5, r2
 8006b90:	e7a1      	b.n	8006ad6 <_dtoa_r+0xa46>
 8006b92:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <_dtoa_r+0xb60>)
 8006b94:	f7ff bae1 	b.w	800615a <_dtoa_r+0xca>
 8006b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f47f aabb 	bne.w	8006116 <_dtoa_r+0x86>
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <_dtoa_r+0xb64>)
 8006ba2:	f7ff bada 	b.w	800615a <_dtoa_r+0xca>
 8006ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f77f ae3f 	ble.w	800682c <_dtoa_r+0x79c>
 8006bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bb0:	9308      	str	r3, [sp, #32]
 8006bb2:	e653      	b.n	800685c <_dtoa_r+0x7cc>
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dc03      	bgt.n	8006bc2 <_dtoa_r+0xb32>
 8006bba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	f73f aed5 	bgt.w	800696c <_dtoa_r+0x8dc>
 8006bc2:	9d06      	ldr	r5, [sp, #24]
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f7ff f9d4 	bl	8005f74 <quorem>
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006bd2:	f805 8b01 	strb.w	r8, [r5], #1
 8006bd6:	9a04      	ldr	r2, [sp, #16]
 8006bd8:	1aeb      	subs	r3, r5, r3
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	ddb5      	ble.n	8006b4a <_dtoa_r+0xaba>
 8006bde:	4659      	mov	r1, fp
 8006be0:	2300      	movs	r3, #0
 8006be2:	220a      	movs	r2, #10
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 fbc1 	bl	800736c <__multadd>
 8006bea:	4683      	mov	fp, r0
 8006bec:	e7ea      	b.n	8006bc4 <_dtoa_r+0xb34>
 8006bee:	bf00      	nop
 8006bf0:	080080b8 	.word	0x080080b8
 8006bf4:	08008138 	.word	0x08008138

08006bf8 <rshift>:
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	6906      	ldr	r6, [r0, #16]
 8006bfc:	114b      	asrs	r3, r1, #5
 8006bfe:	429e      	cmp	r6, r3
 8006c00:	f100 0414 	add.w	r4, r0, #20
 8006c04:	dd31      	ble.n	8006c6a <rshift+0x72>
 8006c06:	f011 011f 	ands.w	r1, r1, #31
 8006c0a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c0e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006c12:	d108      	bne.n	8006c26 <rshift+0x2e>
 8006c14:	4621      	mov	r1, r4
 8006c16:	42b2      	cmp	r2, r6
 8006c18:	460b      	mov	r3, r1
 8006c1a:	d211      	bcs.n	8006c40 <rshift+0x48>
 8006c1c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c20:	f841 3b04 	str.w	r3, [r1], #4
 8006c24:	e7f7      	b.n	8006c16 <rshift+0x1e>
 8006c26:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	f1c1 0c20 	rsb	ip, r1, #32
 8006c30:	40cd      	lsrs	r5, r1
 8006c32:	3204      	adds	r2, #4
 8006c34:	42b2      	cmp	r2, r6
 8006c36:	4617      	mov	r7, r2
 8006c38:	d30d      	bcc.n	8006c56 <rshift+0x5e>
 8006c3a:	601d      	str	r5, [r3, #0]
 8006c3c:	b105      	cbz	r5, 8006c40 <rshift+0x48>
 8006c3e:	3304      	adds	r3, #4
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	eba3 0204 	sub.w	r2, r3, r4
 8006c46:	bf08      	it	eq
 8006c48:	2300      	moveq	r3, #0
 8006c4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c4e:	6102      	str	r2, [r0, #16]
 8006c50:	bf08      	it	eq
 8006c52:	6143      	streq	r3, [r0, #20]
 8006c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c56:	683f      	ldr	r7, [r7, #0]
 8006c58:	fa07 f70c 	lsl.w	r7, r7, ip
 8006c5c:	433d      	orrs	r5, r7
 8006c5e:	f843 5b04 	str.w	r5, [r3], #4
 8006c62:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c66:	40cd      	lsrs	r5, r1
 8006c68:	e7e4      	b.n	8006c34 <rshift+0x3c>
 8006c6a:	4623      	mov	r3, r4
 8006c6c:	e7e8      	b.n	8006c40 <rshift+0x48>

08006c6e <__hexdig_fun>:
 8006c6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	d802      	bhi.n	8006c7c <__hexdig_fun+0xe>
 8006c76:	3820      	subs	r0, #32
 8006c78:	b2c0      	uxtb	r0, r0
 8006c7a:	4770      	bx	lr
 8006c7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c80:	2b05      	cmp	r3, #5
 8006c82:	d801      	bhi.n	8006c88 <__hexdig_fun+0x1a>
 8006c84:	3847      	subs	r0, #71	; 0x47
 8006c86:	e7f7      	b.n	8006c78 <__hexdig_fun+0xa>
 8006c88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c8c:	2b05      	cmp	r3, #5
 8006c8e:	d801      	bhi.n	8006c94 <__hexdig_fun+0x26>
 8006c90:	3827      	subs	r0, #39	; 0x27
 8006c92:	e7f1      	b.n	8006c78 <__hexdig_fun+0xa>
 8006c94:	2000      	movs	r0, #0
 8006c96:	4770      	bx	lr

08006c98 <__gethex>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b08b      	sub	sp, #44	; 0x2c
 8006c9e:	9002      	str	r0, [sp, #8]
 8006ca0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006ca2:	468a      	mov	sl, r1
 8006ca4:	4690      	mov	r8, r2
 8006ca6:	9306      	str	r3, [sp, #24]
 8006ca8:	f000 fad1 	bl	800724e <__localeconv_l>
 8006cac:	6803      	ldr	r3, [r0, #0]
 8006cae:	f04f 0b00 	mov.w	fp, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	9303      	str	r3, [sp, #12]
 8006cb6:	f7f9 fa4b 	bl	8000150 <strlen>
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	9001      	str	r0, [sp, #4]
 8006cbe:	4403      	add	r3, r0
 8006cc0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cc4:	9307      	str	r3, [sp, #28]
 8006cc6:	f8da 3000 	ldr.w	r3, [sl]
 8006cca:	3302      	adds	r3, #2
 8006ccc:	461f      	mov	r7, r3
 8006cce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cd2:	2830      	cmp	r0, #48	; 0x30
 8006cd4:	d06c      	beq.n	8006db0 <__gethex+0x118>
 8006cd6:	f7ff ffca 	bl	8006c6e <__hexdig_fun>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d16a      	bne.n	8006db6 <__gethex+0x11e>
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	9903      	ldr	r1, [sp, #12]
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f001 f905 	bl	8007ef4 <strncmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d166      	bne.n	8006dbc <__gethex+0x124>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	5cf8      	ldrb	r0, [r7, r3]
 8006cf2:	18fe      	adds	r6, r7, r3
 8006cf4:	f7ff ffbb 	bl	8006c6e <__hexdig_fun>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d062      	beq.n	8006dc2 <__gethex+0x12a>
 8006cfc:	4633      	mov	r3, r6
 8006cfe:	7818      	ldrb	r0, [r3, #0]
 8006d00:	461f      	mov	r7, r3
 8006d02:	2830      	cmp	r0, #48	; 0x30
 8006d04:	f103 0301 	add.w	r3, r3, #1
 8006d08:	d0f9      	beq.n	8006cfe <__gethex+0x66>
 8006d0a:	f7ff ffb0 	bl	8006c6e <__hexdig_fun>
 8006d0e:	fab0 f580 	clz	r5, r0
 8006d12:	4634      	mov	r4, r6
 8006d14:	f04f 0b01 	mov.w	fp, #1
 8006d18:	096d      	lsrs	r5, r5, #5
 8006d1a:	463a      	mov	r2, r7
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	7830      	ldrb	r0, [r6, #0]
 8006d20:	3201      	adds	r2, #1
 8006d22:	f7ff ffa4 	bl	8006c6e <__hexdig_fun>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d1f8      	bne.n	8006d1c <__gethex+0x84>
 8006d2a:	9a01      	ldr	r2, [sp, #4]
 8006d2c:	9903      	ldr	r1, [sp, #12]
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f001 f8e0 	bl	8007ef4 <strncmp>
 8006d34:	b950      	cbnz	r0, 8006d4c <__gethex+0xb4>
 8006d36:	b954      	cbnz	r4, 8006d4e <__gethex+0xb6>
 8006d38:	9b01      	ldr	r3, [sp, #4]
 8006d3a:	18f4      	adds	r4, r6, r3
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4616      	mov	r6, r2
 8006d40:	7830      	ldrb	r0, [r6, #0]
 8006d42:	3201      	adds	r2, #1
 8006d44:	f7ff ff93 	bl	8006c6e <__hexdig_fun>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d1f8      	bne.n	8006d3e <__gethex+0xa6>
 8006d4c:	b10c      	cbz	r4, 8006d52 <__gethex+0xba>
 8006d4e:	1ba4      	subs	r4, r4, r6
 8006d50:	00a4      	lsls	r4, r4, #2
 8006d52:	7833      	ldrb	r3, [r6, #0]
 8006d54:	2b50      	cmp	r3, #80	; 0x50
 8006d56:	d001      	beq.n	8006d5c <__gethex+0xc4>
 8006d58:	2b70      	cmp	r3, #112	; 0x70
 8006d5a:	d140      	bne.n	8006dde <__gethex+0x146>
 8006d5c:	7873      	ldrb	r3, [r6, #1]
 8006d5e:	2b2b      	cmp	r3, #43	; 0x2b
 8006d60:	d031      	beq.n	8006dc6 <__gethex+0x12e>
 8006d62:	2b2d      	cmp	r3, #45	; 0x2d
 8006d64:	d033      	beq.n	8006dce <__gethex+0x136>
 8006d66:	f04f 0900 	mov.w	r9, #0
 8006d6a:	1c71      	adds	r1, r6, #1
 8006d6c:	7808      	ldrb	r0, [r1, #0]
 8006d6e:	f7ff ff7e 	bl	8006c6e <__hexdig_fun>
 8006d72:	1e43      	subs	r3, r0, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b18      	cmp	r3, #24
 8006d78:	d831      	bhi.n	8006dde <__gethex+0x146>
 8006d7a:	f1a0 0210 	sub.w	r2, r0, #16
 8006d7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d82:	f7ff ff74 	bl	8006c6e <__hexdig_fun>
 8006d86:	1e43      	subs	r3, r0, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b18      	cmp	r3, #24
 8006d8c:	d922      	bls.n	8006dd4 <__gethex+0x13c>
 8006d8e:	f1b9 0f00 	cmp.w	r9, #0
 8006d92:	d000      	beq.n	8006d96 <__gethex+0xfe>
 8006d94:	4252      	negs	r2, r2
 8006d96:	4414      	add	r4, r2
 8006d98:	f8ca 1000 	str.w	r1, [sl]
 8006d9c:	b30d      	cbz	r5, 8006de2 <__gethex+0x14a>
 8006d9e:	f1bb 0f00 	cmp.w	fp, #0
 8006da2:	bf0c      	ite	eq
 8006da4:	2706      	moveq	r7, #6
 8006da6:	2700      	movne	r7, #0
 8006da8:	4638      	mov	r0, r7
 8006daa:	b00b      	add	sp, #44	; 0x2c
 8006dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db0:	f10b 0b01 	add.w	fp, fp, #1
 8006db4:	e78a      	b.n	8006ccc <__gethex+0x34>
 8006db6:	2500      	movs	r5, #0
 8006db8:	462c      	mov	r4, r5
 8006dba:	e7ae      	b.n	8006d1a <__gethex+0x82>
 8006dbc:	463e      	mov	r6, r7
 8006dbe:	2501      	movs	r5, #1
 8006dc0:	e7c7      	b.n	8006d52 <__gethex+0xba>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	e7fb      	b.n	8006dbe <__gethex+0x126>
 8006dc6:	f04f 0900 	mov.w	r9, #0
 8006dca:	1cb1      	adds	r1, r6, #2
 8006dcc:	e7ce      	b.n	8006d6c <__gethex+0xd4>
 8006dce:	f04f 0901 	mov.w	r9, #1
 8006dd2:	e7fa      	b.n	8006dca <__gethex+0x132>
 8006dd4:	230a      	movs	r3, #10
 8006dd6:	fb03 0202 	mla	r2, r3, r2, r0
 8006dda:	3a10      	subs	r2, #16
 8006ddc:	e7cf      	b.n	8006d7e <__gethex+0xe6>
 8006dde:	4631      	mov	r1, r6
 8006de0:	e7da      	b.n	8006d98 <__gethex+0x100>
 8006de2:	4629      	mov	r1, r5
 8006de4:	1bf3      	subs	r3, r6, r7
 8006de6:	3b01      	subs	r3, #1
 8006de8:	2b07      	cmp	r3, #7
 8006dea:	dc49      	bgt.n	8006e80 <__gethex+0x1e8>
 8006dec:	9802      	ldr	r0, [sp, #8]
 8006dee:	f000 fa72 	bl	80072d6 <_Balloc>
 8006df2:	f04f 0b00 	mov.w	fp, #0
 8006df6:	4605      	mov	r5, r0
 8006df8:	46da      	mov	sl, fp
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	f100 0914 	add.w	r9, r0, #20
 8006e00:	f1c3 0301 	rsb	r3, r3, #1
 8006e04:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	42b7      	cmp	r7, r6
 8006e0c:	d33b      	bcc.n	8006e86 <__gethex+0x1ee>
 8006e0e:	9804      	ldr	r0, [sp, #16]
 8006e10:	f840 ab04 	str.w	sl, [r0], #4
 8006e14:	eba0 0009 	sub.w	r0, r0, r9
 8006e18:	1080      	asrs	r0, r0, #2
 8006e1a:	6128      	str	r0, [r5, #16]
 8006e1c:	0147      	lsls	r7, r0, #5
 8006e1e:	4650      	mov	r0, sl
 8006e20:	f000 fb1d 	bl	800745e <__hi0bits>
 8006e24:	f8d8 6000 	ldr.w	r6, [r8]
 8006e28:	1a3f      	subs	r7, r7, r0
 8006e2a:	42b7      	cmp	r7, r6
 8006e2c:	dd64      	ble.n	8006ef8 <__gethex+0x260>
 8006e2e:	1bbf      	subs	r7, r7, r6
 8006e30:	4639      	mov	r1, r7
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fe27 	bl	8007a86 <__any_on>
 8006e38:	4682      	mov	sl, r0
 8006e3a:	b178      	cbz	r0, 8006e5c <__gethex+0x1c4>
 8006e3c:	f04f 0a01 	mov.w	sl, #1
 8006e40:	1e7b      	subs	r3, r7, #1
 8006e42:	1159      	asrs	r1, r3, #5
 8006e44:	f003 021f 	and.w	r2, r3, #31
 8006e48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e4c:	fa0a f202 	lsl.w	r2, sl, r2
 8006e50:	420a      	tst	r2, r1
 8006e52:	d003      	beq.n	8006e5c <__gethex+0x1c4>
 8006e54:	4553      	cmp	r3, sl
 8006e56:	dc46      	bgt.n	8006ee6 <__gethex+0x24e>
 8006e58:	f04f 0a02 	mov.w	sl, #2
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f7ff feca 	bl	8006bf8 <rshift>
 8006e64:	443c      	add	r4, r7
 8006e66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	da52      	bge.n	8006f14 <__gethex+0x27c>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	9802      	ldr	r0, [sp, #8]
 8006e72:	f000 fa64 	bl	800733e <_Bfree>
 8006e76:	2300      	movs	r3, #0
 8006e78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e7a:	27a3      	movs	r7, #163	; 0xa3
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	e793      	b.n	8006da8 <__gethex+0x110>
 8006e80:	3101      	adds	r1, #1
 8006e82:	105b      	asrs	r3, r3, #1
 8006e84:	e7b0      	b.n	8006de8 <__gethex+0x150>
 8006e86:	1e73      	subs	r3, r6, #1
 8006e88:	9305      	str	r3, [sp, #20]
 8006e8a:	9a07      	ldr	r2, [sp, #28]
 8006e8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d018      	beq.n	8006ec6 <__gethex+0x22e>
 8006e94:	f1bb 0f20 	cmp.w	fp, #32
 8006e98:	d107      	bne.n	8006eaa <__gethex+0x212>
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	f8c3 a000 	str.w	sl, [r3]
 8006ea0:	f04f 0a00 	mov.w	sl, #0
 8006ea4:	46d3      	mov	fp, sl
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006eae:	f7ff fede 	bl	8006c6e <__hexdig_fun>
 8006eb2:	f000 000f 	and.w	r0, r0, #15
 8006eb6:	fa00 f00b 	lsl.w	r0, r0, fp
 8006eba:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ebe:	f10b 0b04 	add.w	fp, fp, #4
 8006ec2:	9b05      	ldr	r3, [sp, #20]
 8006ec4:	e00d      	b.n	8006ee2 <__gethex+0x24a>
 8006ec6:	9b05      	ldr	r3, [sp, #20]
 8006ec8:	9a08      	ldr	r2, [sp, #32]
 8006eca:	4413      	add	r3, r2
 8006ecc:	42bb      	cmp	r3, r7
 8006ece:	d3e1      	bcc.n	8006e94 <__gethex+0x1fc>
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	9a01      	ldr	r2, [sp, #4]
 8006ed4:	9903      	ldr	r1, [sp, #12]
 8006ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed8:	f001 f80c 	bl	8007ef4 <strncmp>
 8006edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d1d8      	bne.n	8006e94 <__gethex+0x1fc>
 8006ee2:	461e      	mov	r6, r3
 8006ee4:	e791      	b.n	8006e0a <__gethex+0x172>
 8006ee6:	1eb9      	subs	r1, r7, #2
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 fdcc 	bl	8007a86 <__any_on>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0b2      	beq.n	8006e58 <__gethex+0x1c0>
 8006ef2:	f04f 0a03 	mov.w	sl, #3
 8006ef6:	e7b1      	b.n	8006e5c <__gethex+0x1c4>
 8006ef8:	da09      	bge.n	8006f0e <__gethex+0x276>
 8006efa:	1bf7      	subs	r7, r6, r7
 8006efc:	4629      	mov	r1, r5
 8006efe:	463a      	mov	r2, r7
 8006f00:	9802      	ldr	r0, [sp, #8]
 8006f02:	f000 fbe7 	bl	80076d4 <__lshift>
 8006f06:	4605      	mov	r5, r0
 8006f08:	1be4      	subs	r4, r4, r7
 8006f0a:	f100 0914 	add.w	r9, r0, #20
 8006f0e:	f04f 0a00 	mov.w	sl, #0
 8006f12:	e7a8      	b.n	8006e66 <__gethex+0x1ce>
 8006f14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f18:	42a0      	cmp	r0, r4
 8006f1a:	dd6b      	ble.n	8006ff4 <__gethex+0x35c>
 8006f1c:	1b04      	subs	r4, r0, r4
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	dc2e      	bgt.n	8006f80 <__gethex+0x2e8>
 8006f22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d022      	beq.n	8006f70 <__gethex+0x2d8>
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d024      	beq.n	8006f78 <__gethex+0x2e0>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d115      	bne.n	8006f5e <__gethex+0x2c6>
 8006f32:	42a6      	cmp	r6, r4
 8006f34:	d113      	bne.n	8006f5e <__gethex+0x2c6>
 8006f36:	2e01      	cmp	r6, #1
 8006f38:	dc0b      	bgt.n	8006f52 <__gethex+0x2ba>
 8006f3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f3e:	9a06      	ldr	r2, [sp, #24]
 8006f40:	2762      	movs	r7, #98	; 0x62
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	2301      	movs	r3, #1
 8006f46:	612b      	str	r3, [r5, #16]
 8006f48:	f8c9 3000 	str.w	r3, [r9]
 8006f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f4e:	601d      	str	r5, [r3, #0]
 8006f50:	e72a      	b.n	8006da8 <__gethex+0x110>
 8006f52:	1e71      	subs	r1, r6, #1
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 fd96 	bl	8007a86 <__any_on>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d1ed      	bne.n	8006f3a <__gethex+0x2a2>
 8006f5e:	4629      	mov	r1, r5
 8006f60:	9802      	ldr	r0, [sp, #8]
 8006f62:	f000 f9ec 	bl	800733e <_Bfree>
 8006f66:	2300      	movs	r3, #0
 8006f68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f6a:	2750      	movs	r7, #80	; 0x50
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	e71b      	b.n	8006da8 <__gethex+0x110>
 8006f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0e1      	beq.n	8006f3a <__gethex+0x2a2>
 8006f76:	e7f2      	b.n	8006f5e <__gethex+0x2c6>
 8006f78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1dd      	bne.n	8006f3a <__gethex+0x2a2>
 8006f7e:	e7ee      	b.n	8006f5e <__gethex+0x2c6>
 8006f80:	1e67      	subs	r7, r4, #1
 8006f82:	f1ba 0f00 	cmp.w	sl, #0
 8006f86:	d132      	bne.n	8006fee <__gethex+0x356>
 8006f88:	b127      	cbz	r7, 8006f94 <__gethex+0x2fc>
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 fd7a 	bl	8007a86 <__any_on>
 8006f92:	4682      	mov	sl, r0
 8006f94:	2301      	movs	r3, #1
 8006f96:	117a      	asrs	r2, r7, #5
 8006f98:	f007 071f 	and.w	r7, r7, #31
 8006f9c:	fa03 f707 	lsl.w	r7, r3, r7
 8006fa0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	421f      	tst	r7, r3
 8006fa8:	f04f 0702 	mov.w	r7, #2
 8006fac:	4628      	mov	r0, r5
 8006fae:	bf18      	it	ne
 8006fb0:	f04a 0a02 	orrne.w	sl, sl, #2
 8006fb4:	1b36      	subs	r6, r6, r4
 8006fb6:	f7ff fe1f 	bl	8006bf8 <rshift>
 8006fba:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006fbe:	f1ba 0f00 	cmp.w	sl, #0
 8006fc2:	d048      	beq.n	8007056 <__gethex+0x3be>
 8006fc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d015      	beq.n	8006ff8 <__gethex+0x360>
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d017      	beq.n	8007000 <__gethex+0x368>
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d109      	bne.n	8006fe8 <__gethex+0x350>
 8006fd4:	f01a 0f02 	tst.w	sl, #2
 8006fd8:	d006      	beq.n	8006fe8 <__gethex+0x350>
 8006fda:	f8d9 3000 	ldr.w	r3, [r9]
 8006fde:	ea4a 0a03 	orr.w	sl, sl, r3
 8006fe2:	f01a 0f01 	tst.w	sl, #1
 8006fe6:	d10e      	bne.n	8007006 <__gethex+0x36e>
 8006fe8:	f047 0710 	orr.w	r7, r7, #16
 8006fec:	e033      	b.n	8007056 <__gethex+0x3be>
 8006fee:	f04f 0a01 	mov.w	sl, #1
 8006ff2:	e7cf      	b.n	8006f94 <__gethex+0x2fc>
 8006ff4:	2701      	movs	r7, #1
 8006ff6:	e7e2      	b.n	8006fbe <__gethex+0x326>
 8006ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ffa:	f1c3 0301 	rsb	r3, r3, #1
 8006ffe:	9315      	str	r3, [sp, #84]	; 0x54
 8007000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f0      	beq.n	8006fe8 <__gethex+0x350>
 8007006:	f04f 0c00 	mov.w	ip, #0
 800700a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800700e:	f105 0314 	add.w	r3, r5, #20
 8007012:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007016:	eb03 010a 	add.w	r1, r3, sl
 800701a:	4618      	mov	r0, r3
 800701c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007020:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007024:	d01c      	beq.n	8007060 <__gethex+0x3c8>
 8007026:	3201      	adds	r2, #1
 8007028:	6002      	str	r2, [r0, #0]
 800702a:	2f02      	cmp	r7, #2
 800702c:	f105 0314 	add.w	r3, r5, #20
 8007030:	d138      	bne.n	80070a4 <__gethex+0x40c>
 8007032:	f8d8 2000 	ldr.w	r2, [r8]
 8007036:	3a01      	subs	r2, #1
 8007038:	42b2      	cmp	r2, r6
 800703a:	d10a      	bne.n	8007052 <__gethex+0x3ba>
 800703c:	2201      	movs	r2, #1
 800703e:	1171      	asrs	r1, r6, #5
 8007040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007044:	f006 061f 	and.w	r6, r6, #31
 8007048:	fa02 f606 	lsl.w	r6, r2, r6
 800704c:	421e      	tst	r6, r3
 800704e:	bf18      	it	ne
 8007050:	4617      	movne	r7, r2
 8007052:	f047 0720 	orr.w	r7, r7, #32
 8007056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007058:	601d      	str	r5, [r3, #0]
 800705a:	9b06      	ldr	r3, [sp, #24]
 800705c:	601c      	str	r4, [r3, #0]
 800705e:	e6a3      	b.n	8006da8 <__gethex+0x110>
 8007060:	4299      	cmp	r1, r3
 8007062:	f843 cc04 	str.w	ip, [r3, #-4]
 8007066:	d8d8      	bhi.n	800701a <__gethex+0x382>
 8007068:	68ab      	ldr	r3, [r5, #8]
 800706a:	4599      	cmp	r9, r3
 800706c:	db12      	blt.n	8007094 <__gethex+0x3fc>
 800706e:	6869      	ldr	r1, [r5, #4]
 8007070:	9802      	ldr	r0, [sp, #8]
 8007072:	3101      	adds	r1, #1
 8007074:	f000 f92f 	bl	80072d6 <_Balloc>
 8007078:	4683      	mov	fp, r0
 800707a:	692a      	ldr	r2, [r5, #16]
 800707c:	f105 010c 	add.w	r1, r5, #12
 8007080:	3202      	adds	r2, #2
 8007082:	0092      	lsls	r2, r2, #2
 8007084:	300c      	adds	r0, #12
 8007086:	f000 f91b 	bl	80072c0 <memcpy>
 800708a:	4629      	mov	r1, r5
 800708c:	9802      	ldr	r0, [sp, #8]
 800708e:	f000 f956 	bl	800733e <_Bfree>
 8007092:	465d      	mov	r5, fp
 8007094:	692b      	ldr	r3, [r5, #16]
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	612a      	str	r2, [r5, #16]
 800709a:	2201      	movs	r2, #1
 800709c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80070a0:	615a      	str	r2, [r3, #20]
 80070a2:	e7c2      	b.n	800702a <__gethex+0x392>
 80070a4:	692a      	ldr	r2, [r5, #16]
 80070a6:	454a      	cmp	r2, r9
 80070a8:	dd0b      	ble.n	80070c2 <__gethex+0x42a>
 80070aa:	2101      	movs	r1, #1
 80070ac:	4628      	mov	r0, r5
 80070ae:	f7ff fda3 	bl	8006bf8 <rshift>
 80070b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070b6:	3401      	adds	r4, #1
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	f6ff aed8 	blt.w	8006e6e <__gethex+0x1d6>
 80070be:	2701      	movs	r7, #1
 80070c0:	e7c7      	b.n	8007052 <__gethex+0x3ba>
 80070c2:	f016 061f 	ands.w	r6, r6, #31
 80070c6:	d0fa      	beq.n	80070be <__gethex+0x426>
 80070c8:	449a      	add	sl, r3
 80070ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80070ce:	f000 f9c6 	bl	800745e <__hi0bits>
 80070d2:	f1c6 0620 	rsb	r6, r6, #32
 80070d6:	42b0      	cmp	r0, r6
 80070d8:	dbe7      	blt.n	80070aa <__gethex+0x412>
 80070da:	e7f0      	b.n	80070be <__gethex+0x426>

080070dc <L_shift>:
 80070dc:	f1c2 0208 	rsb	r2, r2, #8
 80070e0:	0092      	lsls	r2, r2, #2
 80070e2:	b570      	push	{r4, r5, r6, lr}
 80070e4:	f1c2 0620 	rsb	r6, r2, #32
 80070e8:	6843      	ldr	r3, [r0, #4]
 80070ea:	6804      	ldr	r4, [r0, #0]
 80070ec:	fa03 f506 	lsl.w	r5, r3, r6
 80070f0:	432c      	orrs	r4, r5
 80070f2:	40d3      	lsrs	r3, r2
 80070f4:	6004      	str	r4, [r0, #0]
 80070f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80070fa:	4288      	cmp	r0, r1
 80070fc:	d3f4      	bcc.n	80070e8 <L_shift+0xc>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}

08007100 <__match>:
 8007100:	b530      	push	{r4, r5, lr}
 8007102:	6803      	ldr	r3, [r0, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710a:	b914      	cbnz	r4, 8007112 <__match+0x12>
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	2001      	movs	r0, #1
 8007110:	bd30      	pop	{r4, r5, pc}
 8007112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007116:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800711a:	2d19      	cmp	r5, #25
 800711c:	bf98      	it	ls
 800711e:	3220      	addls	r2, #32
 8007120:	42a2      	cmp	r2, r4
 8007122:	d0f0      	beq.n	8007106 <__match+0x6>
 8007124:	2000      	movs	r0, #0
 8007126:	e7f3      	b.n	8007110 <__match+0x10>

08007128 <__hexnan>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	2500      	movs	r5, #0
 800712e:	680b      	ldr	r3, [r1, #0]
 8007130:	4682      	mov	sl, r0
 8007132:	115f      	asrs	r7, r3, #5
 8007134:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007138:	f013 031f 	ands.w	r3, r3, #31
 800713c:	bf18      	it	ne
 800713e:	3704      	addne	r7, #4
 8007140:	1f3e      	subs	r6, r7, #4
 8007142:	4690      	mov	r8, r2
 8007144:	46b1      	mov	r9, r6
 8007146:	4634      	mov	r4, r6
 8007148:	46ab      	mov	fp, r5
 800714a:	b087      	sub	sp, #28
 800714c:	6801      	ldr	r1, [r0, #0]
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	f847 5c04 	str.w	r5, [r7, #-4]
 8007154:	9502      	str	r5, [sp, #8]
 8007156:	784a      	ldrb	r2, [r1, #1]
 8007158:	1c4b      	adds	r3, r1, #1
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	b342      	cbz	r2, 80071b0 <__hexnan+0x88>
 800715e:	4610      	mov	r0, r2
 8007160:	9105      	str	r1, [sp, #20]
 8007162:	9204      	str	r2, [sp, #16]
 8007164:	f7ff fd83 	bl	8006c6e <__hexdig_fun>
 8007168:	2800      	cmp	r0, #0
 800716a:	d143      	bne.n	80071f4 <__hexnan+0xcc>
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	9905      	ldr	r1, [sp, #20]
 8007170:	2a20      	cmp	r2, #32
 8007172:	d818      	bhi.n	80071a6 <__hexnan+0x7e>
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	459b      	cmp	fp, r3
 8007178:	dd13      	ble.n	80071a2 <__hexnan+0x7a>
 800717a:	454c      	cmp	r4, r9
 800717c:	d206      	bcs.n	800718c <__hexnan+0x64>
 800717e:	2d07      	cmp	r5, #7
 8007180:	dc04      	bgt.n	800718c <__hexnan+0x64>
 8007182:	462a      	mov	r2, r5
 8007184:	4649      	mov	r1, r9
 8007186:	4620      	mov	r0, r4
 8007188:	f7ff ffa8 	bl	80070dc <L_shift>
 800718c:	4544      	cmp	r4, r8
 800718e:	d944      	bls.n	800721a <__hexnan+0xf2>
 8007190:	2300      	movs	r3, #0
 8007192:	f1a4 0904 	sub.w	r9, r4, #4
 8007196:	f844 3c04 	str.w	r3, [r4, #-4]
 800719a:	461d      	mov	r5, r3
 800719c:	464c      	mov	r4, r9
 800719e:	f8cd b008 	str.w	fp, [sp, #8]
 80071a2:	9903      	ldr	r1, [sp, #12]
 80071a4:	e7d7      	b.n	8007156 <__hexnan+0x2e>
 80071a6:	2a29      	cmp	r2, #41	; 0x29
 80071a8:	d14a      	bne.n	8007240 <__hexnan+0x118>
 80071aa:	3102      	adds	r1, #2
 80071ac:	f8ca 1000 	str.w	r1, [sl]
 80071b0:	f1bb 0f00 	cmp.w	fp, #0
 80071b4:	d044      	beq.n	8007240 <__hexnan+0x118>
 80071b6:	454c      	cmp	r4, r9
 80071b8:	d206      	bcs.n	80071c8 <__hexnan+0xa0>
 80071ba:	2d07      	cmp	r5, #7
 80071bc:	dc04      	bgt.n	80071c8 <__hexnan+0xa0>
 80071be:	462a      	mov	r2, r5
 80071c0:	4649      	mov	r1, r9
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff ff8a 	bl	80070dc <L_shift>
 80071c8:	4544      	cmp	r4, r8
 80071ca:	d928      	bls.n	800721e <__hexnan+0xf6>
 80071cc:	4643      	mov	r3, r8
 80071ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	f843 2b04 	str.w	r2, [r3], #4
 80071d8:	d2f9      	bcs.n	80071ce <__hexnan+0xa6>
 80071da:	2200      	movs	r2, #0
 80071dc:	f843 2b04 	str.w	r2, [r3], #4
 80071e0:	429e      	cmp	r6, r3
 80071e2:	d2fb      	bcs.n	80071dc <__hexnan+0xb4>
 80071e4:	6833      	ldr	r3, [r6, #0]
 80071e6:	b91b      	cbnz	r3, 80071f0 <__hexnan+0xc8>
 80071e8:	4546      	cmp	r6, r8
 80071ea:	d127      	bne.n	800723c <__hexnan+0x114>
 80071ec:	2301      	movs	r3, #1
 80071ee:	6033      	str	r3, [r6, #0]
 80071f0:	2005      	movs	r0, #5
 80071f2:	e026      	b.n	8007242 <__hexnan+0x11a>
 80071f4:	3501      	adds	r5, #1
 80071f6:	2d08      	cmp	r5, #8
 80071f8:	f10b 0b01 	add.w	fp, fp, #1
 80071fc:	dd06      	ble.n	800720c <__hexnan+0xe4>
 80071fe:	4544      	cmp	r4, r8
 8007200:	d9cf      	bls.n	80071a2 <__hexnan+0x7a>
 8007202:	2300      	movs	r3, #0
 8007204:	2501      	movs	r5, #1
 8007206:	f844 3c04 	str.w	r3, [r4, #-4]
 800720a:	3c04      	subs	r4, #4
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	f000 000f 	and.w	r0, r0, #15
 8007212:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007216:	6020      	str	r0, [r4, #0]
 8007218:	e7c3      	b.n	80071a2 <__hexnan+0x7a>
 800721a:	2508      	movs	r5, #8
 800721c:	e7c1      	b.n	80071a2 <__hexnan+0x7a>
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0df      	beq.n	80071e4 <__hexnan+0xbc>
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	f1c3 0320 	rsb	r3, r3, #32
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
 8007230:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007234:	401a      	ands	r2, r3
 8007236:	f847 2c04 	str.w	r2, [r7, #-4]
 800723a:	e7d3      	b.n	80071e4 <__hexnan+0xbc>
 800723c:	3e04      	subs	r6, #4
 800723e:	e7d1      	b.n	80071e4 <__hexnan+0xbc>
 8007240:	2004      	movs	r0, #4
 8007242:	b007      	add	sp, #28
 8007244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007248 <__locale_ctype_ptr_l>:
 8007248:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800724c:	4770      	bx	lr

0800724e <__localeconv_l>:
 800724e:	30f0      	adds	r0, #240	; 0xf0
 8007250:	4770      	bx	lr
	...

08007254 <_localeconv_r>:
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <_localeconv_r+0x14>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6a18      	ldr	r0, [r3, #32]
 800725a:	4b04      	ldr	r3, [pc, #16]	; (800726c <_localeconv_r+0x18>)
 800725c:	2800      	cmp	r0, #0
 800725e:	bf08      	it	eq
 8007260:	4618      	moveq	r0, r3
 8007262:	30f0      	adds	r0, #240	; 0xf0
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	2000000c 	.word	0x2000000c
 800726c:	20000070 	.word	0x20000070

08007270 <malloc>:
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <malloc+0xc>)
 8007272:	4601      	mov	r1, r0
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	f000 bc81 	b.w	8007b7c <_malloc_r>
 800727a:	bf00      	nop
 800727c:	2000000c 	.word	0x2000000c

08007280 <__ascii_mbtowc>:
 8007280:	b082      	sub	sp, #8
 8007282:	b901      	cbnz	r1, 8007286 <__ascii_mbtowc+0x6>
 8007284:	a901      	add	r1, sp, #4
 8007286:	b142      	cbz	r2, 800729a <__ascii_mbtowc+0x1a>
 8007288:	b14b      	cbz	r3, 800729e <__ascii_mbtowc+0x1e>
 800728a:	7813      	ldrb	r3, [r2, #0]
 800728c:	600b      	str	r3, [r1, #0]
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	1c10      	adds	r0, r2, #0
 8007292:	bf18      	it	ne
 8007294:	2001      	movne	r0, #1
 8007296:	b002      	add	sp, #8
 8007298:	4770      	bx	lr
 800729a:	4610      	mov	r0, r2
 800729c:	e7fb      	b.n	8007296 <__ascii_mbtowc+0x16>
 800729e:	f06f 0001 	mvn.w	r0, #1
 80072a2:	e7f8      	b.n	8007296 <__ascii_mbtowc+0x16>

080072a4 <memchr>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	b2c9      	uxtb	r1, r1
 80072a8:	4402      	add	r2, r0
 80072aa:	4290      	cmp	r0, r2
 80072ac:	4603      	mov	r3, r0
 80072ae:	d101      	bne.n	80072b4 <memchr+0x10>
 80072b0:	2300      	movs	r3, #0
 80072b2:	e003      	b.n	80072bc <memchr+0x18>
 80072b4:	781c      	ldrb	r4, [r3, #0]
 80072b6:	3001      	adds	r0, #1
 80072b8:	428c      	cmp	r4, r1
 80072ba:	d1f6      	bne.n	80072aa <memchr+0x6>
 80072bc:	4618      	mov	r0, r3
 80072be:	bd10      	pop	{r4, pc}

080072c0 <memcpy>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	1e43      	subs	r3, r0, #1
 80072c4:	440a      	add	r2, r1
 80072c6:	4291      	cmp	r1, r2
 80072c8:	d100      	bne.n	80072cc <memcpy+0xc>
 80072ca:	bd10      	pop	{r4, pc}
 80072cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d4:	e7f7      	b.n	80072c6 <memcpy+0x6>

080072d6 <_Balloc>:
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072da:	4604      	mov	r4, r0
 80072dc:	460e      	mov	r6, r1
 80072de:	b93d      	cbnz	r5, 80072f0 <_Balloc+0x1a>
 80072e0:	2010      	movs	r0, #16
 80072e2:	f7ff ffc5 	bl	8007270 <malloc>
 80072e6:	6260      	str	r0, [r4, #36]	; 0x24
 80072e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072ec:	6005      	str	r5, [r0, #0]
 80072ee:	60c5      	str	r5, [r0, #12]
 80072f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072f2:	68eb      	ldr	r3, [r5, #12]
 80072f4:	b183      	cbz	r3, 8007318 <_Balloc+0x42>
 80072f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072fe:	b9b8      	cbnz	r0, 8007330 <_Balloc+0x5a>
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f506 	lsl.w	r5, r1, r6
 8007306:	1d6a      	adds	r2, r5, #5
 8007308:	0092      	lsls	r2, r2, #2
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fbdc 	bl	8007ac8 <_calloc_r>
 8007310:	b160      	cbz	r0, 800732c <_Balloc+0x56>
 8007312:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007316:	e00e      	b.n	8007336 <_Balloc+0x60>
 8007318:	2221      	movs	r2, #33	; 0x21
 800731a:	2104      	movs	r1, #4
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fbd3 	bl	8007ac8 <_calloc_r>
 8007322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007324:	60e8      	str	r0, [r5, #12]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e4      	bne.n	80072f6 <_Balloc+0x20>
 800732c:	2000      	movs	r0, #0
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	6802      	ldr	r2, [r0, #0]
 8007332:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007336:	2300      	movs	r3, #0
 8007338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800733c:	e7f7      	b.n	800732e <_Balloc+0x58>

0800733e <_Bfree>:
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007342:	4606      	mov	r6, r0
 8007344:	460d      	mov	r5, r1
 8007346:	b93c      	cbnz	r4, 8007358 <_Bfree+0x1a>
 8007348:	2010      	movs	r0, #16
 800734a:	f7ff ff91 	bl	8007270 <malloc>
 800734e:	6270      	str	r0, [r6, #36]	; 0x24
 8007350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007354:	6004      	str	r4, [r0, #0]
 8007356:	60c4      	str	r4, [r0, #12]
 8007358:	b13d      	cbz	r5, 800736a <_Bfree+0x2c>
 800735a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800735c:	686a      	ldr	r2, [r5, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007364:	6029      	str	r1, [r5, #0]
 8007366:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800736a:	bd70      	pop	{r4, r5, r6, pc}

0800736c <__multadd>:
 800736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007370:	461f      	mov	r7, r3
 8007372:	4606      	mov	r6, r0
 8007374:	460c      	mov	r4, r1
 8007376:	2300      	movs	r3, #0
 8007378:	690d      	ldr	r5, [r1, #16]
 800737a:	f101 0c14 	add.w	ip, r1, #20
 800737e:	f8dc 0000 	ldr.w	r0, [ip]
 8007382:	3301      	adds	r3, #1
 8007384:	b281      	uxth	r1, r0
 8007386:	fb02 7101 	mla	r1, r2, r1, r7
 800738a:	0c00      	lsrs	r0, r0, #16
 800738c:	0c0f      	lsrs	r7, r1, #16
 800738e:	fb02 7000 	mla	r0, r2, r0, r7
 8007392:	b289      	uxth	r1, r1
 8007394:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007398:	429d      	cmp	r5, r3
 800739a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800739e:	f84c 1b04 	str.w	r1, [ip], #4
 80073a2:	dcec      	bgt.n	800737e <__multadd+0x12>
 80073a4:	b1d7      	cbz	r7, 80073dc <__multadd+0x70>
 80073a6:	68a3      	ldr	r3, [r4, #8]
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dc12      	bgt.n	80073d2 <__multadd+0x66>
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	4630      	mov	r0, r6
 80073b0:	3101      	adds	r1, #1
 80073b2:	f7ff ff90 	bl	80072d6 <_Balloc>
 80073b6:	4680      	mov	r8, r0
 80073b8:	6922      	ldr	r2, [r4, #16]
 80073ba:	f104 010c 	add.w	r1, r4, #12
 80073be:	3202      	adds	r2, #2
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	300c      	adds	r0, #12
 80073c4:	f7ff ff7c 	bl	80072c0 <memcpy>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ffb7 	bl	800733e <_Bfree>
 80073d0:	4644      	mov	r4, r8
 80073d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073d6:	3501      	adds	r5, #1
 80073d8:	615f      	str	r7, [r3, #20]
 80073da:	6125      	str	r5, [r4, #16]
 80073dc:	4620      	mov	r0, r4
 80073de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073e2 <__s2b>:
 80073e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e6:	4615      	mov	r5, r2
 80073e8:	2209      	movs	r2, #9
 80073ea:	461f      	mov	r7, r3
 80073ec:	3308      	adds	r3, #8
 80073ee:	460c      	mov	r4, r1
 80073f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f4:	4606      	mov	r6, r0
 80073f6:	2201      	movs	r2, #1
 80073f8:	2100      	movs	r1, #0
 80073fa:	429a      	cmp	r2, r3
 80073fc:	db20      	blt.n	8007440 <__s2b+0x5e>
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ff69 	bl	80072d6 <_Balloc>
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	2d09      	cmp	r5, #9
 8007408:	6143      	str	r3, [r0, #20]
 800740a:	f04f 0301 	mov.w	r3, #1
 800740e:	6103      	str	r3, [r0, #16]
 8007410:	dd19      	ble.n	8007446 <__s2b+0x64>
 8007412:	f104 0809 	add.w	r8, r4, #9
 8007416:	46c1      	mov	r9, r8
 8007418:	442c      	add	r4, r5
 800741a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800741e:	4601      	mov	r1, r0
 8007420:	3b30      	subs	r3, #48	; 0x30
 8007422:	220a      	movs	r2, #10
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff ffa1 	bl	800736c <__multadd>
 800742a:	45a1      	cmp	r9, r4
 800742c:	d1f5      	bne.n	800741a <__s2b+0x38>
 800742e:	eb08 0405 	add.w	r4, r8, r5
 8007432:	3c08      	subs	r4, #8
 8007434:	1b2d      	subs	r5, r5, r4
 8007436:	1963      	adds	r3, r4, r5
 8007438:	42bb      	cmp	r3, r7
 800743a:	db07      	blt.n	800744c <__s2b+0x6a>
 800743c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007440:	0052      	lsls	r2, r2, #1
 8007442:	3101      	adds	r1, #1
 8007444:	e7d9      	b.n	80073fa <__s2b+0x18>
 8007446:	340a      	adds	r4, #10
 8007448:	2509      	movs	r5, #9
 800744a:	e7f3      	b.n	8007434 <__s2b+0x52>
 800744c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007450:	4601      	mov	r1, r0
 8007452:	3b30      	subs	r3, #48	; 0x30
 8007454:	220a      	movs	r2, #10
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ff88 	bl	800736c <__multadd>
 800745c:	e7eb      	b.n	8007436 <__s2b+0x54>

0800745e <__hi0bits>:
 800745e:	0c02      	lsrs	r2, r0, #16
 8007460:	0412      	lsls	r2, r2, #16
 8007462:	4603      	mov	r3, r0
 8007464:	b9b2      	cbnz	r2, 8007494 <__hi0bits+0x36>
 8007466:	0403      	lsls	r3, r0, #16
 8007468:	2010      	movs	r0, #16
 800746a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800746e:	bf04      	itt	eq
 8007470:	021b      	lsleq	r3, r3, #8
 8007472:	3008      	addeq	r0, #8
 8007474:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007478:	bf04      	itt	eq
 800747a:	011b      	lsleq	r3, r3, #4
 800747c:	3004      	addeq	r0, #4
 800747e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007482:	bf04      	itt	eq
 8007484:	009b      	lsleq	r3, r3, #2
 8007486:	3002      	addeq	r0, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	db06      	blt.n	800749a <__hi0bits+0x3c>
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	d503      	bpl.n	8007498 <__hi0bits+0x3a>
 8007490:	3001      	adds	r0, #1
 8007492:	4770      	bx	lr
 8007494:	2000      	movs	r0, #0
 8007496:	e7e8      	b.n	800746a <__hi0bits+0xc>
 8007498:	2020      	movs	r0, #32
 800749a:	4770      	bx	lr

0800749c <__lo0bits>:
 800749c:	6803      	ldr	r3, [r0, #0]
 800749e:	4601      	mov	r1, r0
 80074a0:	f013 0207 	ands.w	r2, r3, #7
 80074a4:	d00b      	beq.n	80074be <__lo0bits+0x22>
 80074a6:	07da      	lsls	r2, r3, #31
 80074a8:	d423      	bmi.n	80074f2 <__lo0bits+0x56>
 80074aa:	0798      	lsls	r0, r3, #30
 80074ac:	bf49      	itett	mi
 80074ae:	085b      	lsrmi	r3, r3, #1
 80074b0:	089b      	lsrpl	r3, r3, #2
 80074b2:	2001      	movmi	r0, #1
 80074b4:	600b      	strmi	r3, [r1, #0]
 80074b6:	bf5c      	itt	pl
 80074b8:	600b      	strpl	r3, [r1, #0]
 80074ba:	2002      	movpl	r0, #2
 80074bc:	4770      	bx	lr
 80074be:	b298      	uxth	r0, r3
 80074c0:	b9a8      	cbnz	r0, 80074ee <__lo0bits+0x52>
 80074c2:	2010      	movs	r0, #16
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074ca:	bf04      	itt	eq
 80074cc:	0a1b      	lsreq	r3, r3, #8
 80074ce:	3008      	addeq	r0, #8
 80074d0:	071a      	lsls	r2, r3, #28
 80074d2:	bf04      	itt	eq
 80074d4:	091b      	lsreq	r3, r3, #4
 80074d6:	3004      	addeq	r0, #4
 80074d8:	079a      	lsls	r2, r3, #30
 80074da:	bf04      	itt	eq
 80074dc:	089b      	lsreq	r3, r3, #2
 80074de:	3002      	addeq	r0, #2
 80074e0:	07da      	lsls	r2, r3, #31
 80074e2:	d402      	bmi.n	80074ea <__lo0bits+0x4e>
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	d006      	beq.n	80074f6 <__lo0bits+0x5a>
 80074e8:	3001      	adds	r0, #1
 80074ea:	600b      	str	r3, [r1, #0]
 80074ec:	4770      	bx	lr
 80074ee:	4610      	mov	r0, r2
 80074f0:	e7e9      	b.n	80074c6 <__lo0bits+0x2a>
 80074f2:	2000      	movs	r0, #0
 80074f4:	4770      	bx	lr
 80074f6:	2020      	movs	r0, #32
 80074f8:	4770      	bx	lr

080074fa <__i2b>:
 80074fa:	b510      	push	{r4, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	2101      	movs	r1, #1
 8007500:	f7ff fee9 	bl	80072d6 <_Balloc>
 8007504:	2201      	movs	r2, #1
 8007506:	6144      	str	r4, [r0, #20]
 8007508:	6102      	str	r2, [r0, #16]
 800750a:	bd10      	pop	{r4, pc}

0800750c <__multiply>:
 800750c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	4614      	mov	r4, r2
 8007512:	690a      	ldr	r2, [r1, #16]
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	4688      	mov	r8, r1
 8007518:	429a      	cmp	r2, r3
 800751a:	bfbe      	ittt	lt
 800751c:	460b      	movlt	r3, r1
 800751e:	46a0      	movlt	r8, r4
 8007520:	461c      	movlt	r4, r3
 8007522:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007526:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800752a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800752e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007532:	eb07 0609 	add.w	r6, r7, r9
 8007536:	42b3      	cmp	r3, r6
 8007538:	bfb8      	it	lt
 800753a:	3101      	addlt	r1, #1
 800753c:	f7ff fecb 	bl	80072d6 <_Balloc>
 8007540:	f100 0514 	add.w	r5, r0, #20
 8007544:	462b      	mov	r3, r5
 8007546:	2200      	movs	r2, #0
 8007548:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800754c:	4573      	cmp	r3, lr
 800754e:	d316      	bcc.n	800757e <__multiply+0x72>
 8007550:	f104 0214 	add.w	r2, r4, #20
 8007554:	f108 0114 	add.w	r1, r8, #20
 8007558:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800755c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	9201      	str	r2, [sp, #4]
 8007566:	4293      	cmp	r3, r2
 8007568:	d80c      	bhi.n	8007584 <__multiply+0x78>
 800756a:	2e00      	cmp	r6, #0
 800756c:	dd03      	ble.n	8007576 <__multiply+0x6a>
 800756e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007572:	2b00      	cmp	r3, #0
 8007574:	d05d      	beq.n	8007632 <__multiply+0x126>
 8007576:	6106      	str	r6, [r0, #16]
 8007578:	b003      	add	sp, #12
 800757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757e:	f843 2b04 	str.w	r2, [r3], #4
 8007582:	e7e3      	b.n	800754c <__multiply+0x40>
 8007584:	f8b2 b000 	ldrh.w	fp, [r2]
 8007588:	f1bb 0f00 	cmp.w	fp, #0
 800758c:	d023      	beq.n	80075d6 <__multiply+0xca>
 800758e:	4689      	mov	r9, r1
 8007590:	46ac      	mov	ip, r5
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	f859 4b04 	ldr.w	r4, [r9], #4
 800759a:	f8dc a000 	ldr.w	sl, [ip]
 800759e:	b2a3      	uxth	r3, r4
 80075a0:	fa1f fa8a 	uxth.w	sl, sl
 80075a4:	fb0b a303 	mla	r3, fp, r3, sl
 80075a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80075ac:	f8dc 4000 	ldr.w	r4, [ip]
 80075b0:	4443      	add	r3, r8
 80075b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80075ba:	46e2      	mov	sl, ip
 80075bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075c6:	454f      	cmp	r7, r9
 80075c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075cc:	f84a 3b04 	str.w	r3, [sl], #4
 80075d0:	d82b      	bhi.n	800762a <__multiply+0x11e>
 80075d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	3204      	adds	r2, #4
 80075da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80075de:	f1ba 0f00 	cmp.w	sl, #0
 80075e2:	d020      	beq.n	8007626 <__multiply+0x11a>
 80075e4:	4689      	mov	r9, r1
 80075e6:	46a8      	mov	r8, r5
 80075e8:	f04f 0b00 	mov.w	fp, #0
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80075f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	fb0a 440c 	mla	r4, sl, ip, r4
 80075fc:	46c4      	mov	ip, r8
 80075fe:	445c      	add	r4, fp
 8007600:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007604:	f84c 3b04 	str.w	r3, [ip], #4
 8007608:	f859 3b04 	ldr.w	r3, [r9], #4
 800760c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	fb0a b303 	mla	r3, sl, r3, fp
 8007616:	454f      	cmp	r7, r9
 8007618:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800761c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007620:	d805      	bhi.n	800762e <__multiply+0x122>
 8007622:	f8c8 3004 	str.w	r3, [r8, #4]
 8007626:	3504      	adds	r5, #4
 8007628:	e79b      	b.n	8007562 <__multiply+0x56>
 800762a:	46d4      	mov	ip, sl
 800762c:	e7b3      	b.n	8007596 <__multiply+0x8a>
 800762e:	46e0      	mov	r8, ip
 8007630:	e7dd      	b.n	80075ee <__multiply+0xe2>
 8007632:	3e01      	subs	r6, #1
 8007634:	e799      	b.n	800756a <__multiply+0x5e>
	...

08007638 <__pow5mult>:
 8007638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800763c:	4615      	mov	r5, r2
 800763e:	f012 0203 	ands.w	r2, r2, #3
 8007642:	4606      	mov	r6, r0
 8007644:	460f      	mov	r7, r1
 8007646:	d007      	beq.n	8007658 <__pow5mult+0x20>
 8007648:	4c21      	ldr	r4, [pc, #132]	; (80076d0 <__pow5mult+0x98>)
 800764a:	3a01      	subs	r2, #1
 800764c:	2300      	movs	r3, #0
 800764e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007652:	f7ff fe8b 	bl	800736c <__multadd>
 8007656:	4607      	mov	r7, r0
 8007658:	10ad      	asrs	r5, r5, #2
 800765a:	d035      	beq.n	80076c8 <__pow5mult+0x90>
 800765c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800765e:	b93c      	cbnz	r4, 8007670 <__pow5mult+0x38>
 8007660:	2010      	movs	r0, #16
 8007662:	f7ff fe05 	bl	8007270 <malloc>
 8007666:	6270      	str	r0, [r6, #36]	; 0x24
 8007668:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800766c:	6004      	str	r4, [r0, #0]
 800766e:	60c4      	str	r4, [r0, #12]
 8007670:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007674:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007678:	b94c      	cbnz	r4, 800768e <__pow5mult+0x56>
 800767a:	f240 2171 	movw	r1, #625	; 0x271
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff ff3b 	bl	80074fa <__i2b>
 8007684:	2300      	movs	r3, #0
 8007686:	4604      	mov	r4, r0
 8007688:	f8c8 0008 	str.w	r0, [r8, #8]
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	07eb      	lsls	r3, r5, #31
 8007694:	d50a      	bpl.n	80076ac <__pow5mult+0x74>
 8007696:	4639      	mov	r1, r7
 8007698:	4622      	mov	r2, r4
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff ff36 	bl	800750c <__multiply>
 80076a0:	4681      	mov	r9, r0
 80076a2:	4639      	mov	r1, r7
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff fe4a 	bl	800733e <_Bfree>
 80076aa:	464f      	mov	r7, r9
 80076ac:	106d      	asrs	r5, r5, #1
 80076ae:	d00b      	beq.n	80076c8 <__pow5mult+0x90>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	b938      	cbnz	r0, 80076c4 <__pow5mult+0x8c>
 80076b4:	4622      	mov	r2, r4
 80076b6:	4621      	mov	r1, r4
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ff27 	bl	800750c <__multiply>
 80076be:	6020      	str	r0, [r4, #0]
 80076c0:	f8c0 8000 	str.w	r8, [r0]
 80076c4:	4604      	mov	r4, r0
 80076c6:	e7e4      	b.n	8007692 <__pow5mult+0x5a>
 80076c8:	4638      	mov	r0, r7
 80076ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ce:	bf00      	nop
 80076d0:	08008240 	.word	0x08008240

080076d4 <__lshift>:
 80076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	4607      	mov	r7, r0
 80076dc:	4616      	mov	r6, r2
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076e4:	eb0a 0903 	add.w	r9, sl, r3
 80076e8:	6849      	ldr	r1, [r1, #4]
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	f109 0501 	add.w	r5, r9, #1
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	db32      	blt.n	800775a <__lshift+0x86>
 80076f4:	4638      	mov	r0, r7
 80076f6:	f7ff fdee 	bl	80072d6 <_Balloc>
 80076fa:	2300      	movs	r3, #0
 80076fc:	4680      	mov	r8, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	f100 0114 	add.w	r1, r0, #20
 8007704:	4553      	cmp	r3, sl
 8007706:	db2b      	blt.n	8007760 <__lshift+0x8c>
 8007708:	6920      	ldr	r0, [r4, #16]
 800770a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800770e:	f104 0314 	add.w	r3, r4, #20
 8007712:	f016 021f 	ands.w	r2, r6, #31
 8007716:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800771a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800771e:	d025      	beq.n	800776c <__lshift+0x98>
 8007720:	2000      	movs	r0, #0
 8007722:	f1c2 0e20 	rsb	lr, r2, #32
 8007726:	468a      	mov	sl, r1
 8007728:	681e      	ldr	r6, [r3, #0]
 800772a:	4096      	lsls	r6, r2
 800772c:	4330      	orrs	r0, r6
 800772e:	f84a 0b04 	str.w	r0, [sl], #4
 8007732:	f853 0b04 	ldr.w	r0, [r3], #4
 8007736:	459c      	cmp	ip, r3
 8007738:	fa20 f00e 	lsr.w	r0, r0, lr
 800773c:	d814      	bhi.n	8007768 <__lshift+0x94>
 800773e:	6048      	str	r0, [r1, #4]
 8007740:	b108      	cbz	r0, 8007746 <__lshift+0x72>
 8007742:	f109 0502 	add.w	r5, r9, #2
 8007746:	3d01      	subs	r5, #1
 8007748:	4638      	mov	r0, r7
 800774a:	f8c8 5010 	str.w	r5, [r8, #16]
 800774e:	4621      	mov	r1, r4
 8007750:	f7ff fdf5 	bl	800733e <_Bfree>
 8007754:	4640      	mov	r0, r8
 8007756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775a:	3101      	adds	r1, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	e7c7      	b.n	80076f0 <__lshift+0x1c>
 8007760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007764:	3301      	adds	r3, #1
 8007766:	e7cd      	b.n	8007704 <__lshift+0x30>
 8007768:	4651      	mov	r1, sl
 800776a:	e7dc      	b.n	8007726 <__lshift+0x52>
 800776c:	3904      	subs	r1, #4
 800776e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007772:	459c      	cmp	ip, r3
 8007774:	f841 2f04 	str.w	r2, [r1, #4]!
 8007778:	d8f9      	bhi.n	800776e <__lshift+0x9a>
 800777a:	e7e4      	b.n	8007746 <__lshift+0x72>

0800777c <__mcmp>:
 800777c:	6903      	ldr	r3, [r0, #16]
 800777e:	690a      	ldr	r2, [r1, #16]
 8007780:	b530      	push	{r4, r5, lr}
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	d10c      	bne.n	80077a0 <__mcmp+0x24>
 8007786:	0092      	lsls	r2, r2, #2
 8007788:	3014      	adds	r0, #20
 800778a:	3114      	adds	r1, #20
 800778c:	1884      	adds	r4, r0, r2
 800778e:	4411      	add	r1, r2
 8007790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007798:	4295      	cmp	r5, r2
 800779a:	d003      	beq.n	80077a4 <__mcmp+0x28>
 800779c:	d305      	bcc.n	80077aa <__mcmp+0x2e>
 800779e:	2301      	movs	r3, #1
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd30      	pop	{r4, r5, pc}
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d3f3      	bcc.n	8007790 <__mcmp+0x14>
 80077a8:	e7fa      	b.n	80077a0 <__mcmp+0x24>
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295
 80077ae:	e7f7      	b.n	80077a0 <__mcmp+0x24>

080077b0 <__mdiff>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	460d      	mov	r5, r1
 80077b6:	4607      	mov	r7, r0
 80077b8:	4611      	mov	r1, r2
 80077ba:	4628      	mov	r0, r5
 80077bc:	4614      	mov	r4, r2
 80077be:	f7ff ffdd 	bl	800777c <__mcmp>
 80077c2:	1e06      	subs	r6, r0, #0
 80077c4:	d108      	bne.n	80077d8 <__mdiff+0x28>
 80077c6:	4631      	mov	r1, r6
 80077c8:	4638      	mov	r0, r7
 80077ca:	f7ff fd84 	bl	80072d6 <_Balloc>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	bfa4      	itt	ge
 80077da:	4623      	movge	r3, r4
 80077dc:	462c      	movge	r4, r5
 80077de:	4638      	mov	r0, r7
 80077e0:	6861      	ldr	r1, [r4, #4]
 80077e2:	bfa6      	itte	ge
 80077e4:	461d      	movge	r5, r3
 80077e6:	2600      	movge	r6, #0
 80077e8:	2601      	movlt	r6, #1
 80077ea:	f7ff fd74 	bl	80072d6 <_Balloc>
 80077ee:	f04f 0e00 	mov.w	lr, #0
 80077f2:	60c6      	str	r6, [r0, #12]
 80077f4:	692b      	ldr	r3, [r5, #16]
 80077f6:	6926      	ldr	r6, [r4, #16]
 80077f8:	f104 0214 	add.w	r2, r4, #20
 80077fc:	f105 0914 	add.w	r9, r5, #20
 8007800:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007804:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007808:	f100 0114 	add.w	r1, r0, #20
 800780c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007810:	f859 5b04 	ldr.w	r5, [r9], #4
 8007814:	fa1f f38a 	uxth.w	r3, sl
 8007818:	4473      	add	r3, lr
 800781a:	b2ac      	uxth	r4, r5
 800781c:	1b1b      	subs	r3, r3, r4
 800781e:	0c2c      	lsrs	r4, r5, #16
 8007820:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007824:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007828:	b29b      	uxth	r3, r3
 800782a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800782e:	45c8      	cmp	r8, r9
 8007830:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007834:	4694      	mov	ip, r2
 8007836:	f841 4b04 	str.w	r4, [r1], #4
 800783a:	d8e7      	bhi.n	800780c <__mdiff+0x5c>
 800783c:	45bc      	cmp	ip, r7
 800783e:	d304      	bcc.n	800784a <__mdiff+0x9a>
 8007840:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007844:	b183      	cbz	r3, 8007868 <__mdiff+0xb8>
 8007846:	6106      	str	r6, [r0, #16]
 8007848:	e7c4      	b.n	80077d4 <__mdiff+0x24>
 800784a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800784e:	b2a2      	uxth	r2, r4
 8007850:	4472      	add	r2, lr
 8007852:	1413      	asrs	r3, r2, #16
 8007854:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007858:	b292      	uxth	r2, r2
 800785a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800785e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007862:	f841 2b04 	str.w	r2, [r1], #4
 8007866:	e7e9      	b.n	800783c <__mdiff+0x8c>
 8007868:	3e01      	subs	r6, #1
 800786a:	e7e9      	b.n	8007840 <__mdiff+0x90>

0800786c <__ulp>:
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <__ulp+0x44>)
 800786e:	400b      	ands	r3, r1
 8007870:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007874:	2b00      	cmp	r3, #0
 8007876:	dd02      	ble.n	800787e <__ulp+0x12>
 8007878:	2000      	movs	r0, #0
 800787a:	4619      	mov	r1, r3
 800787c:	4770      	bx	lr
 800787e:	425b      	negs	r3, r3
 8007880:	151b      	asrs	r3, r3, #20
 8007882:	2b13      	cmp	r3, #19
 8007884:	f04f 0000 	mov.w	r0, #0
 8007888:	f04f 0100 	mov.w	r1, #0
 800788c:	dc04      	bgt.n	8007898 <__ulp+0x2c>
 800788e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007892:	fa42 f103 	asr.w	r1, r2, r3
 8007896:	4770      	bx	lr
 8007898:	2201      	movs	r2, #1
 800789a:	3b14      	subs	r3, #20
 800789c:	2b1e      	cmp	r3, #30
 800789e:	bfce      	itee	gt
 80078a0:	4613      	movgt	r3, r2
 80078a2:	f1c3 031f 	rsble	r3, r3, #31
 80078a6:	fa02 f303 	lslle.w	r3, r2, r3
 80078aa:	4618      	mov	r0, r3
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	7ff00000 	.word	0x7ff00000

080078b4 <__b2d>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	6907      	ldr	r7, [r0, #16]
 80078ba:	f100 0914 	add.w	r9, r0, #20
 80078be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078c6:	f1a7 0804 	sub.w	r8, r7, #4
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff fdc7 	bl	800745e <__hi0bits>
 80078d0:	f1c0 0320 	rsb	r3, r0, #32
 80078d4:	280a      	cmp	r0, #10
 80078d6:	600b      	str	r3, [r1, #0]
 80078d8:	491e      	ldr	r1, [pc, #120]	; (8007954 <__b2d+0xa0>)
 80078da:	dc17      	bgt.n	800790c <__b2d+0x58>
 80078dc:	45c1      	cmp	r9, r8
 80078de:	bf28      	it	cs
 80078e0:	2200      	movcs	r2, #0
 80078e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80078e6:	fa26 f30c 	lsr.w	r3, r6, ip
 80078ea:	bf38      	it	cc
 80078ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80078f0:	ea43 0501 	orr.w	r5, r3, r1
 80078f4:	f100 0315 	add.w	r3, r0, #21
 80078f8:	fa06 f303 	lsl.w	r3, r6, r3
 80078fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8007900:	ea43 0402 	orr.w	r4, r3, r2
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790c:	45c1      	cmp	r9, r8
 800790e:	bf3a      	itte	cc
 8007910:	f1a7 0808 	subcc.w	r8, r7, #8
 8007914:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007918:	2200      	movcs	r2, #0
 800791a:	f1b0 030b 	subs.w	r3, r0, #11
 800791e:	d015      	beq.n	800794c <__b2d+0x98>
 8007920:	409e      	lsls	r6, r3
 8007922:	f1c3 0720 	rsb	r7, r3, #32
 8007926:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800792a:	fa22 f107 	lsr.w	r1, r2, r7
 800792e:	45c8      	cmp	r8, r9
 8007930:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007934:	ea46 0501 	orr.w	r5, r6, r1
 8007938:	bf94      	ite	ls
 800793a:	2100      	movls	r1, #0
 800793c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007940:	fa02 f003 	lsl.w	r0, r2, r3
 8007944:	40f9      	lsrs	r1, r7
 8007946:	ea40 0401 	orr.w	r4, r0, r1
 800794a:	e7db      	b.n	8007904 <__b2d+0x50>
 800794c:	ea46 0501 	orr.w	r5, r6, r1
 8007950:	4614      	mov	r4, r2
 8007952:	e7d7      	b.n	8007904 <__b2d+0x50>
 8007954:	3ff00000 	.word	0x3ff00000

08007958 <__d2b>:
 8007958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800795c:	461c      	mov	r4, r3
 800795e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007962:	2101      	movs	r1, #1
 8007964:	4690      	mov	r8, r2
 8007966:	f7ff fcb6 	bl	80072d6 <_Balloc>
 800796a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800796e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007972:	4607      	mov	r7, r0
 8007974:	bb34      	cbnz	r4, 80079c4 <__d2b+0x6c>
 8007976:	9201      	str	r2, [sp, #4]
 8007978:	f1b8 0200 	subs.w	r2, r8, #0
 800797c:	d027      	beq.n	80079ce <__d2b+0x76>
 800797e:	a802      	add	r0, sp, #8
 8007980:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007984:	f7ff fd8a 	bl	800749c <__lo0bits>
 8007988:	9900      	ldr	r1, [sp, #0]
 800798a:	b1f0      	cbz	r0, 80079ca <__d2b+0x72>
 800798c:	9a01      	ldr	r2, [sp, #4]
 800798e:	f1c0 0320 	rsb	r3, r0, #32
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	430b      	orrs	r3, r1
 8007998:	40c2      	lsrs	r2, r0
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bf14      	ite	ne
 80079a4:	2102      	movne	r1, #2
 80079a6:	2101      	moveq	r1, #1
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	6139      	str	r1, [r7, #16]
 80079ac:	b1c4      	cbz	r4, 80079e0 <__d2b+0x88>
 80079ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80079b2:	4404      	add	r4, r0
 80079b4:	6034      	str	r4, [r6, #0]
 80079b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079ba:	6028      	str	r0, [r5, #0]
 80079bc:	4638      	mov	r0, r7
 80079be:	b002      	add	sp, #8
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079c8:	e7d5      	b.n	8007976 <__d2b+0x1e>
 80079ca:	6179      	str	r1, [r7, #20]
 80079cc:	e7e7      	b.n	800799e <__d2b+0x46>
 80079ce:	a801      	add	r0, sp, #4
 80079d0:	f7ff fd64 	bl	800749c <__lo0bits>
 80079d4:	2101      	movs	r1, #1
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	6139      	str	r1, [r7, #16]
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	3020      	adds	r0, #32
 80079de:	e7e5      	b.n	80079ac <__d2b+0x54>
 80079e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80079e8:	6030      	str	r0, [r6, #0]
 80079ea:	6918      	ldr	r0, [r3, #16]
 80079ec:	f7ff fd37 	bl	800745e <__hi0bits>
 80079f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80079f4:	e7e1      	b.n	80079ba <__d2b+0x62>

080079f6 <__ratio>:
 80079f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	4688      	mov	r8, r1
 80079fc:	4669      	mov	r1, sp
 80079fe:	4681      	mov	r9, r0
 8007a00:	f7ff ff58 	bl	80078b4 <__b2d>
 8007a04:	468b      	mov	fp, r1
 8007a06:	4606      	mov	r6, r0
 8007a08:	460f      	mov	r7, r1
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	a901      	add	r1, sp, #4
 8007a0e:	f7ff ff51 	bl	80078b4 <__b2d>
 8007a12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	eba3 0c02 	sub.w	ip, r3, r2
 8007a20:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfd5      	itete	le
 8007a2e:	460a      	movle	r2, r1
 8007a30:	463a      	movgt	r2, r7
 8007a32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a36:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a3a:	bfd8      	it	le
 8007a3c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007a40:	462b      	mov	r3, r5
 8007a42:	4602      	mov	r2, r0
 8007a44:	4659      	mov	r1, fp
 8007a46:	4630      	mov	r0, r6
 8007a48:	f7f8 fe70 	bl	800072c <__aeabi_ddiv>
 8007a4c:	b003      	add	sp, #12
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a52 <__copybits>:
 8007a52:	3901      	subs	r1, #1
 8007a54:	b510      	push	{r4, lr}
 8007a56:	1149      	asrs	r1, r1, #5
 8007a58:	6914      	ldr	r4, [r2, #16]
 8007a5a:	3101      	adds	r1, #1
 8007a5c:	f102 0314 	add.w	r3, r2, #20
 8007a60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	d303      	bcc.n	8007a76 <__copybits+0x24>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	428a      	cmp	r2, r1
 8007a72:	d305      	bcc.n	8007a80 <__copybits+0x2e>
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7a:	f840 2b04 	str.w	r2, [r0], #4
 8007a7e:	e7f3      	b.n	8007a68 <__copybits+0x16>
 8007a80:	f842 3b04 	str.w	r3, [r2], #4
 8007a84:	e7f4      	b.n	8007a70 <__copybits+0x1e>

08007a86 <__any_on>:
 8007a86:	f100 0214 	add.w	r2, r0, #20
 8007a8a:	6900      	ldr	r0, [r0, #16]
 8007a8c:	114b      	asrs	r3, r1, #5
 8007a8e:	4298      	cmp	r0, r3
 8007a90:	b510      	push	{r4, lr}
 8007a92:	db11      	blt.n	8007ab8 <__any_on+0x32>
 8007a94:	dd0a      	ble.n	8007aac <__any_on+0x26>
 8007a96:	f011 011f 	ands.w	r1, r1, #31
 8007a9a:	d007      	beq.n	8007aac <__any_on+0x26>
 8007a9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007aa0:	fa24 f001 	lsr.w	r0, r4, r1
 8007aa4:	fa00 f101 	lsl.w	r1, r0, r1
 8007aa8:	428c      	cmp	r4, r1
 8007aaa:	d10b      	bne.n	8007ac4 <__any_on+0x3e>
 8007aac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d803      	bhi.n	8007abc <__any_on+0x36>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	bd10      	pop	{r4, pc}
 8007ab8:	4603      	mov	r3, r0
 8007aba:	e7f7      	b.n	8007aac <__any_on+0x26>
 8007abc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	d0f5      	beq.n	8007ab0 <__any_on+0x2a>
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	e7f6      	b.n	8007ab6 <__any_on+0x30>

08007ac8 <_calloc_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	fb02 f401 	mul.w	r4, r2, r1
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f000 f854 	bl	8007b7c <_malloc_r>
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	b118      	cbz	r0, 8007ae0 <_calloc_r+0x18>
 8007ad8:	4622      	mov	r2, r4
 8007ada:	2100      	movs	r1, #0
 8007adc:	f7fc fd2c 	bl	8004538 <memset>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}

08007ae4 <_free_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	d043      	beq.n	8007b74 <_free_r+0x90>
 8007aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af0:	1f0c      	subs	r4, r1, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bfb8      	it	lt
 8007af6:	18e4      	addlt	r4, r4, r3
 8007af8:	f000 fa34 	bl	8007f64 <__malloc_lock>
 8007afc:	4a1e      	ldr	r2, [pc, #120]	; (8007b78 <_free_r+0x94>)
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	4610      	mov	r0, r2
 8007b02:	b933      	cbnz	r3, 8007b12 <_free_r+0x2e>
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6014      	str	r4, [r2, #0]
 8007b08:	4628      	mov	r0, r5
 8007b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b0e:	f000 ba2a 	b.w	8007f66 <__malloc_unlock>
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	d90b      	bls.n	8007b2e <_free_r+0x4a>
 8007b16:	6821      	ldr	r1, [r4, #0]
 8007b18:	1862      	adds	r2, r4, r1
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bf01      	itttt	eq
 8007b1e:	681a      	ldreq	r2, [r3, #0]
 8007b20:	685b      	ldreq	r3, [r3, #4]
 8007b22:	1852      	addeq	r2, r2, r1
 8007b24:	6022      	streq	r2, [r4, #0]
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	6004      	str	r4, [r0, #0]
 8007b2a:	e7ed      	b.n	8007b08 <_free_r+0x24>
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	b10a      	cbz	r2, 8007b36 <_free_r+0x52>
 8007b32:	42a2      	cmp	r2, r4
 8007b34:	d9fa      	bls.n	8007b2c <_free_r+0x48>
 8007b36:	6819      	ldr	r1, [r3, #0]
 8007b38:	1858      	adds	r0, r3, r1
 8007b3a:	42a0      	cmp	r0, r4
 8007b3c:	d10b      	bne.n	8007b56 <_free_r+0x72>
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	4401      	add	r1, r0
 8007b42:	1858      	adds	r0, r3, r1
 8007b44:	4282      	cmp	r2, r0
 8007b46:	6019      	str	r1, [r3, #0]
 8007b48:	d1de      	bne.n	8007b08 <_free_r+0x24>
 8007b4a:	6810      	ldr	r0, [r2, #0]
 8007b4c:	6852      	ldr	r2, [r2, #4]
 8007b4e:	4401      	add	r1, r0
 8007b50:	6019      	str	r1, [r3, #0]
 8007b52:	605a      	str	r2, [r3, #4]
 8007b54:	e7d8      	b.n	8007b08 <_free_r+0x24>
 8007b56:	d902      	bls.n	8007b5e <_free_r+0x7a>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	e7d4      	b.n	8007b08 <_free_r+0x24>
 8007b5e:	6820      	ldr	r0, [r4, #0]
 8007b60:	1821      	adds	r1, r4, r0
 8007b62:	428a      	cmp	r2, r1
 8007b64:	bf01      	itttt	eq
 8007b66:	6811      	ldreq	r1, [r2, #0]
 8007b68:	6852      	ldreq	r2, [r2, #4]
 8007b6a:	1809      	addeq	r1, r1, r0
 8007b6c:	6021      	streq	r1, [r4, #0]
 8007b6e:	6062      	str	r2, [r4, #4]
 8007b70:	605c      	str	r4, [r3, #4]
 8007b72:	e7c9      	b.n	8007b08 <_free_r+0x24>
 8007b74:	bd38      	pop	{r3, r4, r5, pc}
 8007b76:	bf00      	nop
 8007b78:	20000210 	.word	0x20000210

08007b7c <_malloc_r>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	1ccd      	adds	r5, r1, #3
 8007b80:	f025 0503 	bic.w	r5, r5, #3
 8007b84:	3508      	adds	r5, #8
 8007b86:	2d0c      	cmp	r5, #12
 8007b88:	bf38      	it	cc
 8007b8a:	250c      	movcc	r5, #12
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	4606      	mov	r6, r0
 8007b90:	db01      	blt.n	8007b96 <_malloc_r+0x1a>
 8007b92:	42a9      	cmp	r1, r5
 8007b94:	d903      	bls.n	8007b9e <_malloc_r+0x22>
 8007b96:	230c      	movs	r3, #12
 8007b98:	6033      	str	r3, [r6, #0]
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	bd70      	pop	{r4, r5, r6, pc}
 8007b9e:	f000 f9e1 	bl	8007f64 <__malloc_lock>
 8007ba2:	4a21      	ldr	r2, [pc, #132]	; (8007c28 <_malloc_r+0xac>)
 8007ba4:	6814      	ldr	r4, [r2, #0]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	b991      	cbnz	r1, 8007bd0 <_malloc_r+0x54>
 8007baa:	4c20      	ldr	r4, [pc, #128]	; (8007c2c <_malloc_r+0xb0>)
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	b91b      	cbnz	r3, 8007bb8 <_malloc_r+0x3c>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 f98f 	bl	8007ed4 <_sbrk_r>
 8007bb6:	6020      	str	r0, [r4, #0]
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f000 f98a 	bl	8007ed4 <_sbrk_r>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d124      	bne.n	8007c0e <_malloc_r+0x92>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	f000 f9cc 	bl	8007f66 <__malloc_unlock>
 8007bce:	e7e4      	b.n	8007b9a <_malloc_r+0x1e>
 8007bd0:	680b      	ldr	r3, [r1, #0]
 8007bd2:	1b5b      	subs	r3, r3, r5
 8007bd4:	d418      	bmi.n	8007c08 <_malloc_r+0x8c>
 8007bd6:	2b0b      	cmp	r3, #11
 8007bd8:	d90f      	bls.n	8007bfa <_malloc_r+0x7e>
 8007bda:	600b      	str	r3, [r1, #0]
 8007bdc:	18cc      	adds	r4, r1, r3
 8007bde:	50cd      	str	r5, [r1, r3]
 8007be0:	4630      	mov	r0, r6
 8007be2:	f000 f9c0 	bl	8007f66 <__malloc_unlock>
 8007be6:	f104 000b 	add.w	r0, r4, #11
 8007bea:	1d23      	adds	r3, r4, #4
 8007bec:	f020 0007 	bic.w	r0, r0, #7
 8007bf0:	1ac3      	subs	r3, r0, r3
 8007bf2:	d0d3      	beq.n	8007b9c <_malloc_r+0x20>
 8007bf4:	425a      	negs	r2, r3
 8007bf6:	50e2      	str	r2, [r4, r3]
 8007bf8:	e7d0      	b.n	8007b9c <_malloc_r+0x20>
 8007bfa:	684b      	ldr	r3, [r1, #4]
 8007bfc:	428c      	cmp	r4, r1
 8007bfe:	bf16      	itet	ne
 8007c00:	6063      	strne	r3, [r4, #4]
 8007c02:	6013      	streq	r3, [r2, #0]
 8007c04:	460c      	movne	r4, r1
 8007c06:	e7eb      	b.n	8007be0 <_malloc_r+0x64>
 8007c08:	460c      	mov	r4, r1
 8007c0a:	6849      	ldr	r1, [r1, #4]
 8007c0c:	e7cc      	b.n	8007ba8 <_malloc_r+0x2c>
 8007c0e:	1cc4      	adds	r4, r0, #3
 8007c10:	f024 0403 	bic.w	r4, r4, #3
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	d005      	beq.n	8007c24 <_malloc_r+0xa8>
 8007c18:	1a21      	subs	r1, r4, r0
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f95a 	bl	8007ed4 <_sbrk_r>
 8007c20:	3001      	adds	r0, #1
 8007c22:	d0cf      	beq.n	8007bc4 <_malloc_r+0x48>
 8007c24:	6025      	str	r5, [r4, #0]
 8007c26:	e7db      	b.n	8007be0 <_malloc_r+0x64>
 8007c28:	20000210 	.word	0x20000210
 8007c2c:	20000214 	.word	0x20000214

08007c30 <__ssputs_r>:
 8007c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	688e      	ldr	r6, [r1, #8]
 8007c36:	4682      	mov	sl, r0
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4690      	mov	r8, r2
 8007c3e:	4699      	mov	r9, r3
 8007c40:	d837      	bhi.n	8007cb2 <__ssputs_r+0x82>
 8007c42:	898a      	ldrh	r2, [r1, #12]
 8007c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c48:	d031      	beq.n	8007cae <__ssputs_r+0x7e>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	6909      	ldr	r1, [r1, #16]
 8007c50:	1a6f      	subs	r7, r5, r1
 8007c52:	6965      	ldr	r5, [r4, #20]
 8007c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c58:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c5c:	f109 0301 	add.w	r3, r9, #1
 8007c60:	443b      	add	r3, r7
 8007c62:	429d      	cmp	r5, r3
 8007c64:	bf38      	it	cc
 8007c66:	461d      	movcc	r5, r3
 8007c68:	0553      	lsls	r3, r2, #21
 8007c6a:	d530      	bpl.n	8007cce <__ssputs_r+0x9e>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	f7ff ff85 	bl	8007b7c <_malloc_r>
 8007c72:	4606      	mov	r6, r0
 8007c74:	b950      	cbnz	r0, 8007c8c <__ssputs_r+0x5c>
 8007c76:	230c      	movs	r3, #12
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	f8ca 3000 	str.w	r3, [sl]
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	6921      	ldr	r1, [r4, #16]
 8007c90:	f7ff fb16 	bl	80072c0 <memcpy>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	6126      	str	r6, [r4, #16]
 8007ca2:	443e      	add	r6, r7
 8007ca4:	6026      	str	r6, [r4, #0]
 8007ca6:	464e      	mov	r6, r9
 8007ca8:	6165      	str	r5, [r4, #20]
 8007caa:	1bed      	subs	r5, r5, r7
 8007cac:	60a5      	str	r5, [r4, #8]
 8007cae:	454e      	cmp	r6, r9
 8007cb0:	d900      	bls.n	8007cb4 <__ssputs_r+0x84>
 8007cb2:	464e      	mov	r6, r9
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	f000 f93a 	bl	8007f32 <memmove>
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	1b9b      	subs	r3, r3, r6
 8007cc4:	60a3      	str	r3, [r4, #8]
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	441e      	add	r6, r3
 8007cca:	6026      	str	r6, [r4, #0]
 8007ccc:	e7dc      	b.n	8007c88 <__ssputs_r+0x58>
 8007cce:	462a      	mov	r2, r5
 8007cd0:	f000 f94a 	bl	8007f68 <_realloc_r>
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d1e2      	bne.n	8007ca0 <__ssputs_r+0x70>
 8007cda:	6921      	ldr	r1, [r4, #16]
 8007cdc:	4650      	mov	r0, sl
 8007cde:	f7ff ff01 	bl	8007ae4 <_free_r>
 8007ce2:	e7c8      	b.n	8007c76 <__ssputs_r+0x46>

08007ce4 <_svfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	461d      	mov	r5, r3
 8007cea:	898b      	ldrh	r3, [r1, #12]
 8007cec:	b09d      	sub	sp, #116	; 0x74
 8007cee:	061f      	lsls	r7, r3, #24
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	d50f      	bpl.n	8007d18 <_svfiprintf_r+0x34>
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	b96b      	cbnz	r3, 8007d18 <_svfiprintf_r+0x34>
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	f7ff ff3d 	bl	8007b7c <_malloc_r>
 8007d02:	6020      	str	r0, [r4, #0]
 8007d04:	6120      	str	r0, [r4, #16]
 8007d06:	b928      	cbnz	r0, 8007d14 <_svfiprintf_r+0x30>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	f8c8 3000 	str.w	r3, [r8]
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d12:	e0c8      	b.n	8007ea6 <_svfiprintf_r+0x1c2>
 8007d14:	2340      	movs	r3, #64	; 0x40
 8007d16:	6163      	str	r3, [r4, #20]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d22:	2330      	movs	r3, #48	; 0x30
 8007d24:	f04f 0b01 	mov.w	fp, #1
 8007d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d2c:	9503      	str	r5, [sp, #12]
 8007d2e:	4637      	mov	r7, r6
 8007d30:	463d      	mov	r5, r7
 8007d32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d36:	b10b      	cbz	r3, 8007d3c <_svfiprintf_r+0x58>
 8007d38:	2b25      	cmp	r3, #37	; 0x25
 8007d3a:	d13e      	bne.n	8007dba <_svfiprintf_r+0xd6>
 8007d3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d40:	d00b      	beq.n	8007d5a <_svfiprintf_r+0x76>
 8007d42:	4653      	mov	r3, sl
 8007d44:	4632      	mov	r2, r6
 8007d46:	4621      	mov	r1, r4
 8007d48:	4640      	mov	r0, r8
 8007d4a:	f7ff ff71 	bl	8007c30 <__ssputs_r>
 8007d4e:	3001      	adds	r0, #1
 8007d50:	f000 80a4 	beq.w	8007e9c <_svfiprintf_r+0x1b8>
 8007d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d56:	4453      	add	r3, sl
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	783b      	ldrb	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 809d 	beq.w	8007e9c <_svfiprintf_r+0x1b8>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	9307      	str	r3, [sp, #28]
 8007d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d74:	931a      	str	r3, [sp, #104]	; 0x68
 8007d76:	462f      	mov	r7, r5
 8007d78:	2205      	movs	r2, #5
 8007d7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d7e:	4850      	ldr	r0, [pc, #320]	; (8007ec0 <_svfiprintf_r+0x1dc>)
 8007d80:	f7ff fa90 	bl	80072a4 <memchr>
 8007d84:	9b04      	ldr	r3, [sp, #16]
 8007d86:	b9d0      	cbnz	r0, 8007dbe <_svfiprintf_r+0xda>
 8007d88:	06d9      	lsls	r1, r3, #27
 8007d8a:	bf44      	itt	mi
 8007d8c:	2220      	movmi	r2, #32
 8007d8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d92:	071a      	lsls	r2, r3, #28
 8007d94:	bf44      	itt	mi
 8007d96:	222b      	movmi	r2, #43	; 0x2b
 8007d98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d9c:	782a      	ldrb	r2, [r5, #0]
 8007d9e:	2a2a      	cmp	r2, #42	; 0x2a
 8007da0:	d015      	beq.n	8007dce <_svfiprintf_r+0xea>
 8007da2:	462f      	mov	r7, r5
 8007da4:	2000      	movs	r0, #0
 8007da6:	250a      	movs	r5, #10
 8007da8:	9a07      	ldr	r2, [sp, #28]
 8007daa:	4639      	mov	r1, r7
 8007dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db0:	3b30      	subs	r3, #48	; 0x30
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d94d      	bls.n	8007e52 <_svfiprintf_r+0x16e>
 8007db6:	b1b8      	cbz	r0, 8007de8 <_svfiprintf_r+0x104>
 8007db8:	e00f      	b.n	8007dda <_svfiprintf_r+0xf6>
 8007dba:	462f      	mov	r7, r5
 8007dbc:	e7b8      	b.n	8007d30 <_svfiprintf_r+0x4c>
 8007dbe:	4a40      	ldr	r2, [pc, #256]	; (8007ec0 <_svfiprintf_r+0x1dc>)
 8007dc0:	463d      	mov	r5, r7
 8007dc2:	1a80      	subs	r0, r0, r2
 8007dc4:	fa0b f000 	lsl.w	r0, fp, r0
 8007dc8:	4318      	orrs	r0, r3
 8007dca:	9004      	str	r0, [sp, #16]
 8007dcc:	e7d3      	b.n	8007d76 <_svfiprintf_r+0x92>
 8007dce:	9a03      	ldr	r2, [sp, #12]
 8007dd0:	1d11      	adds	r1, r2, #4
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	9103      	str	r1, [sp, #12]
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	db01      	blt.n	8007dde <_svfiprintf_r+0xfa>
 8007dda:	9207      	str	r2, [sp, #28]
 8007ddc:	e004      	b.n	8007de8 <_svfiprintf_r+0x104>
 8007dde:	4252      	negs	r2, r2
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	9207      	str	r2, [sp, #28]
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	783b      	ldrb	r3, [r7, #0]
 8007dea:	2b2e      	cmp	r3, #46	; 0x2e
 8007dec:	d10c      	bne.n	8007e08 <_svfiprintf_r+0x124>
 8007dee:	787b      	ldrb	r3, [r7, #1]
 8007df0:	2b2a      	cmp	r3, #42	; 0x2a
 8007df2:	d133      	bne.n	8007e5c <_svfiprintf_r+0x178>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	3702      	adds	r7, #2
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	9203      	str	r2, [sp, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfb8      	it	lt
 8007e02:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	4d2e      	ldr	r5, [pc, #184]	; (8007ec4 <_svfiprintf_r+0x1e0>)
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	7839      	ldrb	r1, [r7, #0]
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7ff fa48 	bl	80072a4 <memchr>
 8007e14:	b138      	cbz	r0, 8007e26 <_svfiprintf_r+0x142>
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	1b40      	subs	r0, r0, r5
 8007e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3701      	adds	r7, #1
 8007e22:	4303      	orrs	r3, r0
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	7839      	ldrb	r1, [r7, #0]
 8007e28:	2206      	movs	r2, #6
 8007e2a:	4827      	ldr	r0, [pc, #156]	; (8007ec8 <_svfiprintf_r+0x1e4>)
 8007e2c:	1c7e      	adds	r6, r7, #1
 8007e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e32:	f7ff fa37 	bl	80072a4 <memchr>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d038      	beq.n	8007eac <_svfiprintf_r+0x1c8>
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <_svfiprintf_r+0x1e8>)
 8007e3c:	bb13      	cbnz	r3, 8007e84 <_svfiprintf_r+0x1a0>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	3307      	adds	r3, #7
 8007e42:	f023 0307 	bic.w	r3, r3, #7
 8007e46:	3308      	adds	r3, #8
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4c:	444b      	add	r3, r9
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	e76d      	b.n	8007d2e <_svfiprintf_r+0x4a>
 8007e52:	fb05 3202 	mla	r2, r5, r2, r3
 8007e56:	2001      	movs	r0, #1
 8007e58:	460f      	mov	r7, r1
 8007e5a:	e7a6      	b.n	8007daa <_svfiprintf_r+0xc6>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	250a      	movs	r5, #10
 8007e60:	4619      	mov	r1, r3
 8007e62:	3701      	adds	r7, #1
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	4638      	mov	r0, r7
 8007e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e6c:	3a30      	subs	r2, #48	; 0x30
 8007e6e:	2a09      	cmp	r2, #9
 8007e70:	d903      	bls.n	8007e7a <_svfiprintf_r+0x196>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c8      	beq.n	8007e08 <_svfiprintf_r+0x124>
 8007e76:	9105      	str	r1, [sp, #20]
 8007e78:	e7c6      	b.n	8007e08 <_svfiprintf_r+0x124>
 8007e7a:	fb05 2101 	mla	r1, r5, r1, r2
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4607      	mov	r7, r0
 8007e82:	e7f0      	b.n	8007e66 <_svfiprintf_r+0x182>
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4b11      	ldr	r3, [pc, #68]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7fc fbec 	bl	800466c <_printf_float>
 8007e94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e98:	4681      	mov	r9, r0
 8007e9a:	d1d6      	bne.n	8007e4a <_svfiprintf_r+0x166>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	065b      	lsls	r3, r3, #25
 8007ea0:	f53f af35 	bmi.w	8007d0e <_svfiprintf_r+0x2a>
 8007ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea6:	b01d      	add	sp, #116	; 0x74
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eac:	ab03      	add	r3, sp, #12
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007eb4:	a904      	add	r1, sp, #16
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f7fc fe84 	bl	8004bc4 <_printf_i>
 8007ebc:	e7ea      	b.n	8007e94 <_svfiprintf_r+0x1b0>
 8007ebe:	bf00      	nop
 8007ec0:	0800824c 	.word	0x0800824c
 8007ec4:	08008252 	.word	0x08008252
 8007ec8:	08008256 	.word	0x08008256
 8007ecc:	0800466d 	.word	0x0800466d
 8007ed0:	08007c31 	.word	0x08007c31

08007ed4 <_sbrk_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4c05      	ldr	r4, [pc, #20]	; (8007ef0 <_sbrk_r+0x1c>)
 8007eda:	4605      	mov	r5, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	f7fa f948 	bl	8002174 <_sbrk>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_sbrk_r+0x1a>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_sbrk_r+0x1a>
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	20000458 	.word	0x20000458

08007ef4 <strncmp>:
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	b16a      	cbz	r2, 8007f14 <strncmp+0x20>
 8007ef8:	3901      	subs	r1, #1
 8007efa:	1884      	adds	r4, r0, r2
 8007efc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d103      	bne.n	8007f10 <strncmp+0x1c>
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d001      	beq.n	8007f10 <strncmp+0x1c>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f5      	bne.n	8007efc <strncmp+0x8>
 8007f10:	1a98      	subs	r0, r3, r2
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	4610      	mov	r0, r2
 8007f16:	e7fc      	b.n	8007f12 <strncmp+0x1e>

08007f18 <__ascii_wctomb>:
 8007f18:	b149      	cbz	r1, 8007f2e <__ascii_wctomb+0x16>
 8007f1a:	2aff      	cmp	r2, #255	; 0xff
 8007f1c:	bf8b      	itete	hi
 8007f1e:	238a      	movhi	r3, #138	; 0x8a
 8007f20:	700a      	strbls	r2, [r1, #0]
 8007f22:	6003      	strhi	r3, [r0, #0]
 8007f24:	2001      	movls	r0, #1
 8007f26:	bf88      	it	hi
 8007f28:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f2c:	4770      	bx	lr
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4770      	bx	lr

08007f32 <memmove>:
 8007f32:	4288      	cmp	r0, r1
 8007f34:	b510      	push	{r4, lr}
 8007f36:	eb01 0302 	add.w	r3, r1, r2
 8007f3a:	d807      	bhi.n	8007f4c <memmove+0x1a>
 8007f3c:	1e42      	subs	r2, r0, #1
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	d00a      	beq.n	8007f58 <memmove+0x26>
 8007f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f4a:	e7f8      	b.n	8007f3e <memmove+0xc>
 8007f4c:	4283      	cmp	r3, r0
 8007f4e:	d9f5      	bls.n	8007f3c <memmove+0xa>
 8007f50:	1881      	adds	r1, r0, r2
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	42d3      	cmn	r3, r2
 8007f56:	d100      	bne.n	8007f5a <memmove+0x28>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f62:	e7f7      	b.n	8007f54 <memmove+0x22>

08007f64 <__malloc_lock>:
 8007f64:	4770      	bx	lr

08007f66 <__malloc_unlock>:
 8007f66:	4770      	bx	lr

08007f68 <_realloc_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	460e      	mov	r6, r1
 8007f70:	b921      	cbnz	r1, 8007f7c <_realloc_r+0x14>
 8007f72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f76:	4611      	mov	r1, r2
 8007f78:	f7ff be00 	b.w	8007b7c <_malloc_r>
 8007f7c:	b922      	cbnz	r2, 8007f88 <_realloc_r+0x20>
 8007f7e:	f7ff fdb1 	bl	8007ae4 <_free_r>
 8007f82:	4625      	mov	r5, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f88:	f000 f814 	bl	8007fb4 <_malloc_usable_size_r>
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d20f      	bcs.n	8007fb0 <_realloc_r+0x48>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4638      	mov	r0, r7
 8007f94:	f7ff fdf2 	bl	8007b7c <_malloc_r>
 8007f98:	4605      	mov	r5, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d0f2      	beq.n	8007f84 <_realloc_r+0x1c>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	f7ff f98d 	bl	80072c0 <memcpy>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff fd9b 	bl	8007ae4 <_free_r>
 8007fae:	e7e9      	b.n	8007f84 <_realloc_r+0x1c>
 8007fb0:	4635      	mov	r5, r6
 8007fb2:	e7e7      	b.n	8007f84 <_realloc_r+0x1c>

08007fb4 <_malloc_usable_size_r>:
 8007fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb8:	1f18      	subs	r0, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfbc      	itt	lt
 8007fbe:	580b      	ldrlt	r3, [r1, r0]
 8007fc0:	18c0      	addlt	r0, r0, r3
 8007fc2:	4770      	bx	lr

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr
